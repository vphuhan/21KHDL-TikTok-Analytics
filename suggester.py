import streamlit as st
import os
import functools
from pathlib import Path
from google import genai


# Cache function to read prompt files
@st.cache_data
def read_prompt_file(file_path):
    """Read and cache prompt content from a markdown file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        return content
    except Exception as e:
        st.error(f"Error reading file: {e}")
        return None


# Function to generate suggestions using Gemini API
@st.cache_data
def generate_suggestion(system_prompt: str, user_description: str):
    """Generate video suggestions using Google's Gemini API."""

    # Generate content
    try:
        client = genai.Client(
            api_key="AIzaSyBYqr4g63GOBTslf5xP0-AbIcSSlAuvMnM")
        response = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=[
                system_prompt,
                user_description,
            ],
        )
        return response.text
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o n·ªôi dung: {e}")
        return None


st.set_page_config(
    page_title="H·ªá th·ªëng g·ª£i √Ω n·ªôi dung video ·∫©m th·ª±c",
    page_icon="üçú",
    layout="wide",
)

st.title("H·ªá th·ªëng g·ª£i √Ω n·ªôi dung video ·∫©m th·ª±c")


# Video direction selection
st.header("Ch·ªçn h∆∞·ªõng th·ª±c hi·ªán video")
video_type = st.radio(
    "Ch·ªçn lo·∫°i video b·∫°n mu·ªën th·ª±c hi·ªán:",
    ["Video review m√≥n ƒÉn ho·∫∑c qu√°n ƒÉn", "Video mukbang", "Video h∆∞·ªõng d·∫´n n·∫•u ƒÉn"]
)
st.write(
    f"B·∫°n ƒë√£ ch·ªçn: **{video_type}**. H·ªá th·ªëng s·∫Ω g·ª£i √Ω n·ªôi dung cho video n√†y."
)


# Map the selection to prompt files
prompt_file_mapping = {
    "Video review m√≥n ƒÉn ho·∫∑c qu√°n ƒÉn": "data/prompts/food_review_template.md",
    "Video mukbang": "data/prompts/mukbang_template.md",
    "Video h∆∞·ªõng d·∫´n n·∫•u ƒÉn": "data/prompts/cooking_template.md"
}

selected_prompt_file = prompt_file_mapping[video_type]
system_prompt = read_prompt_file(selected_prompt_file)

# User input
st.header("M√¥ t·∫£ video c·ªßa b·∫°n")
user_description = st.text_area(
    "H√£y m√¥ t·∫£ chi ti·∫øt v·ªÅ video ·∫©m th·ª±c b·∫°n mu·ªën th·ª±c hi·ªán:",
    height=150
)

# Generate suggestions
if st.button("T·∫°o g·ª£i √Ω"):
    if not user_description.strip():
        st.warning(
            "Vui l√≤ng nh·∫≠p m√¥ t·∫£ v·ªÅ video c·ªßa b·∫°n tr∆∞·ªõc khi t·∫°o g·ª£i √Ω.")
    else:
        with st.spinner("ƒêang t·∫°o g·ª£i √Ω..."):
            suggestion = generate_suggestion(
                system_prompt, user_description)
            if suggestion:
                st.header("G·ª£i √Ω cho video c·ªßa b·∫°n")
                st.markdown(suggestion)
