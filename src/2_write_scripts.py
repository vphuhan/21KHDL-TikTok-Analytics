import os
import sys
from data_loader import load_data
from utils import *

try:
    import streamlit as st
    from google import genai
    import time
except ImportError as e:
    import traceback
    print(f"Error importing required packages: {e}")
    print(traceback.format_exc())
    try:
        # If streamlit is successfully imported, show error in UI
        if 'st' in globals():
            st.error(
                f"Failed to import required packages. Please install them using: pip install -r requirements.txt\n\nError: {e}")
            st.stop()
    except:
        # If we can't even use streamlit, exit the program
        sys.exit(1)


# App configuration
st.set_page_config(page_title="Write Scripts", page_icon="üìù")

# T·∫£i d·ªØ li·ªáu v·ªõi v√≤ng quay ch·ªù
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu TikTok..."):
    # T·∫£i d·ªØ li·ªáu
    features_df = load_data()

# # Define the legacy prompt to be sent (default prompt)
# legacy_prompt = f"""
# Topic: %s

# Instructions: You are a powerful AI designed to create engaging and high-quality video scripts that can attract millions of views. I need a complete script for a video on the topic provided above. The script should include a catchy hook, an engaging introduction, informative and entertaining content, and a compelling call to action. Follow these detailed steps to create the script:

# ### Hook:

# - Start with an attention-grabbing hook that introduces the topic in an exciting way.
# - Use a surprising fact, a question, or a bold statement to draw viewers in.
# - Keep the hook under 30 seconds to ensure it's concise and impactful.

# ### Introduction:

# - Briefly introduce yourself and establish credibility.
# - Provide a quick overview of what the video will cover.
# - Highlight the value the viewer will get from watching the entire video.

# ### Main Content:

# - Break down the topic into clear, easy-to-follow sections.
# - Use a mix of informative content, personal anecdotes, and engaging storytelling.
# - Include at least three main points or subtopics to keep the content organized.
# - Use examples, statistics, and visuals (if applicable) to enhance the explanation.
# - Keep the tone conversational and relatable to maintain viewer interest.

# ### Engagement:

# - Ask rhetorical questions to keep viewers thinking and engaged.
# - Encourage viewers to leave comments, like the video, and subscribe to the channel.
# - Use phrases like ‚ÄúLet me know in the comments‚Äù or ‚ÄúWhat do you think about this?‚Äù

# ### Call to Action:

# - End with a strong call to action that tells viewers what to do next.
# - Suggest watching another related video, downloading a resource, or following on social media.
# - Thank the viewers for watching and remind them to subscribe for more content.

# Please give the answer in Vietnamese.

# Give the answer in format (add newline character after each section):

# ### Hook
# - [a paragraph]
# ### Introduction
# - [a paragraph]
# ### Main Content
# - [List of main content]
# ### Engagement
# - [List of engagement]
# ### Call to Action
# - [a paragraph]
# """.strip()


# # Available AI Models
# available_models = [
#     # Input token limit: 1,048,576
#     # Output token limit: 8,192
#     "gemini-2.0-flash",

#     # Input token limit 2,048,576
#     # Output token limit 8,192
#     "gemini-2.0-pro-exp",

#     "gemini-2.0-flash-thinking-exp",

#     # Input token limit 1,048,576
#     # Output token limit 8,192
#     "gemini-2.0-flash-lite",

#     # Input token limit 1,048,576
#     # Output token limit 8,192
#     "gemini-1.5-flash",

#     # Input token limit 1,048,576
#     # Output token limit 8,192
#     "gemini-1.5-flash-8b",

#     # Input token limit 2,097,152
#     # Output token limit 8,192
#     "gemini-1.5-pro",

#     "learnlm-1.5-pro-experimental",

#     "gemma-3-27b-it",
# ]


# def get_model():
#     # Function to get the selected model
#     return st.sidebar.selectbox(
#         "Select AI Model:",
#         available_models,
#         index=available_models.index("gemini-2.0-flash")
#     )


# # Get selected model
# model = get_model()
# print(f"Selected Model: {model}")

# # Title and description
# st.title('üìùüîó Write Scripts')
# st.markdown("Generate engaging video scripts with AI assistance")


# # Set start session time
# if 'start_time' not in st.session_state:
#     st.session_state.start_time = time.time()
# # Prompt customization section
# if 'prompt' not in st.session_state:
#     st.session_state.write_script_prompt = legacy_prompt


# with st.expander("View/Edit Research Prompt", expanded=False):
#     st.markdown("**You can customize the research prompt below:**")
#     st.markdown(
#         "_This is the instruction sent to the AI model. You can modify it to better suit your needs._")

#     # Text area for editing the prompt
#     custom_prompt = st.text_area(
#         "Customize Prompt Template:",
#         # Use the same key as the session state variable
#         key=f"2_write_scripts_custom_prompt_{st.session_state.start_time}",
#         value=st.session_state.write_script_prompt,
#         height=300
#     )

#     col1, col2 = st.columns(2)

#     with col1:
#         if st.button("Update Prompt"):
#             st.session_state.write_script_prompt = custom_prompt
#             st.success("Prompt updated successfully!")

#     with col2:
#         if st.button("Reset to Default"):
#             st.success("Prompt reset to default!")
#             st.session_state.write_script_prompt = legacy_prompt
#             st.session_state.start_time = time.time()
#             st.rerun()

# prompt = st.session_state.write_script_prompt
# print("Prompt:", prompt)


# # Main content
# topic = st.text_area('Enter your video topic:', height=100,
#                      placeholder="For example: 'Street food for students'")
# print(f"Topic: {topic}")

# # Generate content when button is pressed
# if st.button('Generate Script') and topic:
#     try:
#         # Research on the topic
#         with st.spinner('Researching content...'):
#             print(prompt % topic)

#             client = genai.Client(
#                 api_key="AIzaSyBYqr4g63GOBTslf5xP0-AbIcSSlAuvMnM")
#             response = client.models.generate_content(
#                 model=model,
#                 contents=(prompt % topic).strip(),
#             )

#         # Display results
#         st.subheader("Generated Content:")
#         st.write(response.text)

#         # # Expandable sections for additional info
#         # with st.expander('Title History'):
#         #     st.info(title_memory.buffer)

#         # with st.expander('Script History'):
#         #     st.info(script_memory.buffer)

#         # with st.expander('Wikipedia Research'):
#         #     st.info(wiki_research)

#         # # Download options
#         # st.download_button(
#         #     label="Download Script",
#         #     data=f"TITLE: {title}\n\n{script}",
#         #     file_name="youtube_script.txt",
#         #     mime="text/plain"
#         # )

#     except Exception as e:
#         st.error(f"An error occurred: {e}")

# elif topic == "":
#     st.info("Please enter a topic to research.")
#     st.info("For example: Enter 'Street food for students' and click on the 'Generate Script' button.")


# --- PAGE: T·∫°o k·ªãch b·∫£n t·ª´ m√¥ t·∫£ ng∆∞·ªùi d√πng ---


# def display_script_sections(script_data):
#     # --- TH√îNG TIN CHUNG ---
#     st.markdown("### üìù T·ªïng quan video")
#     st.markdown(
#         f"**üé¨ M√¥ t·∫£ video:** {script_data.get('video_description', '')}")
#     st.markdown(f"**‚è±Ô∏è ƒê·ªô d√†i d·ª± ki·∫øn:** {script_data.get('duration', '')}")
#     st.markdown(f"**üìç B·ªëi c·∫£nh:** {script_data.get('setting', '')}")
#     st.markdown(f"**üë§ Nh√¢n v·∫≠t:** {script_data.get('characters', '')}")
#     st.markdown("---")

#     # --- DANH S√ÅCH C√ÅC ƒêO·∫†N ---
#     st.markdown("### üé¨ K·ªãch b·∫£n theo t·ª´ng ph·∫ßn")

#     for section in script_data.get("main_content", []):
#         time_title = f"#### **[{section['time_range']}] {section['title']}**"
#         # st.markdown(time_title)
#         st.markdown(
#             f"""
#             <div style="background-color: #f0f0f0; padding: 8px 16px; border-radius: 6px; margin-top: 10px; margin-bottom: 10px;">
#                 <strong>[{section['time_range']}] {section['title']}</strong>
#             </div>
#             """,
#             unsafe_allow_html=True
#         )

#         col1, col2 = st.columns([1, 2])
#         with col1:
#             st.markdown("üé• **C·∫£nh quay**")
#             st.markdown(f"{section['visual_description']}")

#         with col2:
#             st.markdown("üó£Ô∏è **L·ªùi tho·∫°i**")
#             st.markdown(f"\"{section['dialogue']}\"")

#         # st.markdown("---")

def display_script_sections(script_data):
    # --- TH√îNG TIN CHUNG ---
    st.markdown("### üìù T·ªïng quan video")
    st.markdown(
        f"**üé¨ M√¥ t·∫£ video:** {script_data.get('video_description', '')}")
    st.markdown(f"**‚è±Ô∏è ƒê·ªô d√†i d·ª± ki·∫øn:** {script_data.get('duration', '')}")
    st.markdown(f"**üìç B·ªëi c·∫£nh:** {script_data.get('setting', '')}")
    st.markdown(f"**üë§ Nh√¢n v·∫≠t:** {script_data.get('characters', '')}")
    st.markdown("---")

    st.markdown("### üé¨ K·ªãch b·∫£n theo t·ª´ng ph·∫ßn")
    updated_sections = []

    # Kh·ªüi t·∫°o session state cho d·ªØ li·ªáu ch·ªânh s·ª≠a n·∫øu ch∆∞a c√≥
    if 'updated_script_data' not in st.session_state:
        st.session_state.updated_script_data = script_data.copy()

    # X·ª≠ l√Ω xo√° ph·∫ßn n·∫øu c√≥
    sections_to_delete = []
    for idx in range(len(st.session_state.updated_script_data.get("main_content", []))):
        if st.session_state.get(f"delete_section_{idx}", False):
            sections_to_delete.append(idx)
            st.session_state[f"delete_section_{idx}"] = False
    for idx in sorted(sections_to_delete, reverse=True):
        st.session_state.updated_script_data["main_content"].pop(idx)

    # Hi·ªÉn th·ªã t·ª´ng ƒëo·∫°n
    for idx, section in enumerate(st.session_state.updated_script_data.get("main_content", [])):
        key_prefix = f"sec_{idx}"
        # N·∫øu ch∆∞a c√≥, kh·ªüi t·∫°o edit mode
        if f"{key_prefix}_edit" not in st.session_state:
            st.session_state[f"{key_prefix}_edit"] = False
        edit_mode = st.session_state[f"{key_prefix}_edit"]

        default_text = f"[{section['time_range']}] {section['title']}"
        # D√≤ng ti√™u ƒë·ªÅ v·ªõi n√∫t s·ª≠a v√† xo√°
        col_title, col_btns = st.columns([8, 2])
        with col_title:
            if edit_mode:
                time_title_input = st.text_input(
                    "‚è±Ô∏è Th·ªùi gian & ti√™u ƒë·ªÅ", default_text, key=f"{key_prefix}_time_title", label_visibility="collapsed")
            else:
                st.markdown(
                    f"""
                    <div style="background-color: #f0f0f0; padding: 8px 16px; border-radius: 6px;">
                        <strong>{default_text}</strong>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
        with col_btns:
            # col_add, col_edit, col_delete = st.columns(3)
            # col_edit, col_delete = st.columns(2)
            # col_edit = st.columns(1)
            # with col_edit:
            if not edit_mode:
                if st.button("‚úèÔ∏è S·ª≠a", key=f"{key_prefix}_edit_btn", help="S·ª≠a", use_container_width=True):
                    st.session_state[f"{key_prefix}_edit"] = True
                    st.rerun()
            else:
                if st.button("‚úÖ L∆∞u", key=f"{key_prefix}_save_btn", help="L∆∞u", use_container_width=True):
                    # L·∫•y gi√° tr·ªã ch·ªânh s·ª≠a cho ti√™u ƒë·ªÅ
                    time_title_raw = st.session_state.get(
                        f"{key_prefix}_time_title", default_text)
                    if "]" in time_title_raw:
                        time_part, title_part = time_title_raw.split(
                            "]", 1)
                        section["time_range"] = time_part.strip(" [")
                        section["title"] = title_part.strip()
                    st.session_state[f"{key_prefix}_edit"] = False
                    st.rerun()
            # with col_delete:
            #     if st.button("üóëÔ∏è Xo√°", key=f"{key_prefix}_delete_btn", help="Xo√°", use_container_width=True):
            #         st.session_state[f"delete_section_{idx}"] = True
            #         st.rerun()

            # with col_add:
            #     if st.button("‚ûï Th√™m", key=f"add_section_btn_{idx}", use_container_width=True):
            #         new_section = {
            #             "time_range": "0:00-0:15",
            #             "title": "Ph·∫ßn m·ªõi",
            #             "visual_description": "M√¥ t·∫£ c·∫£nh quay m·ªõi",
            #             "dialogue": "N·ªôi dung l·ªùi tho·∫°i m·ªõi"
            #         }
            #         st.session_state.updated_script_data["main_content"].insert(
            #             idx + 1, new_section)
            #         st.session_state[f"sec_{idx+1}_edit"] = True
            #         st.rerun()

        # Ph·∫ßn n·ªôi dung: xem ho·∫∑c ch·ªânh s·ª≠a
        col1, col2 = st.columns([1, 2])
        if edit_mode:
            with col1:
                st.markdown("üé• **C·∫£nh quay**")
                st.text_area(
                    "üé• C·∫£nh quay", section['visual_description'], key=f"{key_prefix}_visual", height=100, label_visibility="collapsed")
            with col2:
                st.markdown("üó£Ô∏è **L·ªùi tho·∫°i**")
                st.text_area(
                    "üó£Ô∏è L·ªùi tho·∫°i", section['dialogue'], key=f"{key_prefix}_dialogue", height=100, label_visibility="collapsed")
            # Sau khi ch·ªânh s·ª≠a, c·∫≠p nh·∫≠t n·ªôi dung m·ªõi v√†o section
            section["visual_description"] = st.session_state.get(
                f"{key_prefix}_visual", section["visual_description"])
            section["dialogue"] = st.session_state.get(
                f"{key_prefix}_dialogue", section["dialogue"])
        else:
            with col1:
                st.markdown("üé• **C·∫£nh quay**")
                st.markdown(section['visual_description'])
            with col2:
                st.markdown("üó£Ô∏è **L·ªùi tho·∫°i**")
                st.markdown(f"\"{section['dialogue']}\"")

        updated_sections.append({
            "time_range": section["time_range"],
            "title": section["title"],
            "visual_description": section["visual_description"],
            "dialogue": section["dialogue"]
        })
        # st.markdown("---")

    #     # Gi·ªØa c√°c ph·∫ßn, cho ph√©p th√™m ph·∫ßn m·ªõi
    #     col_add = st.columns(1)[0]
    #     if st.button("‚ûï Th√™m ph·∫ßn m·ªõi", key=f"add_section_btn_{idx}", use_container_width=True):
    #         new_section = {
    #             "time_range": "0:00-0:15",
    #             "title": "Ph·∫ßn m·ªõi",
    #             "visual_description": "M√¥ t·∫£ c·∫£nh quay m·ªõi",
    #             "dialogue": "N·ªôi dung l·ªùi tho·∫°i m·ªõi"
    #         }
    #         st.session_state.updated_script_data["main_content"].insert(
    #             idx + 1, new_section)
    #         st.session_state[f"sec_{idx+1}_edit"] = True
    #         st.rerun()

    # # N·∫øu kh√¥ng c√≥ ph·∫ßn n√†o, hi·ªÉn th·ªã n√∫t th√™m ƒë·∫ßu ti√™n
    # if len(st.session_state.updated_script_data.get("main_content", [])) == 0:
    #     if st.button("‚ûï Th√™m ph·∫ßn ƒë·∫ßu ti√™n", key="add_section_btn_first", use_container_width=True):
    #         new_section = {
    #             "time_range": "0:00-0:15",
    #             "title": "Ph·∫ßn m·ªõi",
    #             "visual_description": "M√¥ t·∫£ c·∫£nh quay m·ªõi",
    #             "dialogue": "N·ªôi dung l·ªùi tho·∫°i m·ªõi"
    #         }
    #         st.session_state.updated_script_data["main_content"].append(
    #             new_section)
    #         st.rerun()

    return st.session_state.updated_script_data


st.title("‚úçÔ∏è T·∫°o k·ªãch b·∫£n TikTok t·ª´ m√¥ t·∫£")

user_description = st.text_area("Nh·∫≠p m√¥ t·∫£ video b·∫°n mu·ªën t·∫°o:",
                                placeholder="Nh·∫≠p m√¥ t·∫£ video b·∫°n mu·ªën t·∫°o:", height=150)

# if st.button("T·∫°o k·ªãch b·∫£n") and user_description:
#     key = "AIzaSyBaT3UMomQUPjjpbRD2pCrE_sk3nT6P47w"  # vphacc096@gmail.com
#     client = genai.Client(api_key=key)

#     with st.spinner("Ph√¢n t√≠ch m√¥ t·∫£ b·∫±ng Gemini..."):
#         label_dict = generate_labels_from_description(
#             user_description, client)

#     with st.spinner("L·ªçc video t∆∞∆°ng ƒë·ªìng..."):
#         if label_dict:
#             filtered_df = filter_by_multiple_labels_unified(
#                 features_df, label_dict, min_count=10)
#             filter_cat_df = features_df[features_df['categories']
#                                         == label_dict['categories']]
#         else:
#             filtered_df = features_df
#             filter_cat_df = features_df

#         mean_word_count = int(filtered_df['transcript_word_count'].mean())
#         mean_duration = int(filtered_df['video.duration'].mean())
#         mean_word_per_second = filtered_df['word_per_second'].mean()
#         mean_hashtag_count = int(filtered_df['hashtag_count'].mean())

#         top_10_hashtags = filter_cat_df['hashtags'].explode(
#         ).value_counts().head(10).index
#         top_10_hashtags_text = ', '.join(top_10_hashtags)

#         transcript_sample_text, desc_sample_text = format_transcript_desc_examples(
#             filtered_df)

#     with st.spinner("T·∫°o k·ªãch b·∫£n th√¥..."):
#         plain_script = generate_plain_script(
#             user_description, transcript_sample_text, mean_word_count, client)

#     with st.spinner("ƒê·ªãnh d·∫°ng l·∫°i k·ªãch b·∫£n..."):
#         formatted_script = format_script_with_gemini(
#             plain_script, desc_sample_text, mean_word_per_second, mean_hashtag_count, top_10_hashtags_text, client)

#     st.subheader("üé¨ K·ªãch b·∫£n g·ª£i √Ω")
#     # st.code(formatted_script, language="markdown")
#     # st.write(formatted_script)
#     if formatted_script:
#         display_script_sections(formatted_script)


formatted_script = {'characters': 'Ng∆∞·ªùi l√†m n·ªôi tr·ª£ y√™u th√≠ch n·∫•u ƒÉn v√† chia s·∫ª c√¥ng th·ª©c.',
                    'duration': '2 ph√∫t 18 gi√¢y',
                    'main_content': [{'time_range': '0:00-0:15',
                                      'title': 'M·ªü ƒë·∫ßu',
                                      'visual_description': 'C·∫≠n c·∫£nh ƒëƒ©a m√¨ √ù s·ªët kem n·∫•m truffle h·∫•p d·∫´n.',
                                      'dialogue': 'Tr·ªùi ∆°i tin ƒë∆∞·ª£c kh√¥ng, m√¨ √ù s·ªët kem n·∫•m truffle l√†m t·∫°i nh√† m√† ngon nh∆∞ nh√† h√†ng 5 sao lu√¥n √°! Tui th·ªÅ l√† tui l√†m xong tui c√≤n b·∫•t ng·ªù √°, sao m√† n√≥ d·ªÖ m√† n√≥ ngon d·ªØ v·∫≠y tr·ªùi.'},
                                     {'time_range': '0:15-0:25',
                                      'title': 'Gi·ªõi thi·ªáu c√¥ng th·ª©c',
                                      'visual_description': 'Ng∆∞·ªùi n√≥i gi·ªõi thi·ªáu v√† h∆∞·ªõng d·∫´n c√°ch l√†m.',
                                      'dialogue': 'H√¥m nay tui ch·ªâ cho m·∫•y b√† c√°ch l√†m m√¨ √ù s·ªët kem n·∫•m truffle si√™u d·ªÖ, ai c≈©ng l√†m ƒë∆∞·ª£c, m√† ƒë·∫£m b·∫£o ngon nh·ª©c n√°ch lu√¥n. M·∫•y b√† n√†o m√† ghi·ªÅn m√¨ √ù s·ªët kem m√† l·∫°i m√™ c√°i m√πi truffle sang ch·∫£nh √° th√¨ nh·∫•t ƒë·ªãnh ph·∫£i coi h·∫øt video n√†y nha.'},
                                     {'time_range': '0:25-0:40',
                                      'title': 'Li·ªát k√™ nguy√™n li·ªáu',
                                      'visual_description': 'Hi·ªÉn th·ªã c√°c nguy√™n li·ªáu c·∫ßn thi·∫øt.',
                                      'dialogue': 'Nguy√™n li·ªáu th√¨ si√™u ƒë∆°n gi·∫£n lu√¥n n√®: m√¨ √ù, n·∫•m c√°c lo·∫°i, tui ·ªü ƒë√¢y d√πng n·∫•m m·ª° v·ªõi n·∫•m ƒë√πi g√† cho n√≥ d·ªÖ ki·∫øm, kem t∆∞∆°i, ph√¥ mai parmesan b√†o s·ª£i s·ª£i √°, t·ªèi, h√†nh t√¢y, r·ªìi th√™m m·ªôt x√≠u truffle oil ho·∫∑c l√† truffle paste cho n√≥ th∆°m n·ª©c m≈©i. N·∫øu c√≥ truffle t∆∞∆°i b√†o l√™n tr√™n th√¨ c√†ng ngon n·ªØa, nh∆∞ng m√† kh√¥ng c√≥ th√¨ truffle oil c≈©ng okila r·ªìi.'},
                                     {'time_range': '0:40-0:50',
                                      'title': 'Lu·ªôc m√¨',
                                      'visual_description': 'Qu√° tr√¨nh lu·ªôc m√¨.',
                                      'dialogue': 'C√°ch l√†m th√¨ c√≤n d·ªÖ h∆°n n·ªØa n√®. ƒê·∫ßu ti√™n l√† lu·ªôc m√¨ tr∆∞·ªõc nha, nh·ªõ cho ch√∫t mu·ªëi v·ªõi d·∫ßu ƒÉn v√¥ cho m√¨ n√≥ kh·ªèi d√≠nh. Lu·ªôc v·ª´a t·ªõi th√¥i nha m·∫•y b√†, ƒë·ª´ng c√≥ lu·ªôc m·ªÅm qu√° ƒÉn n√≥ d·ªü ·∫πc √†.'},
                                     {'time_range': '0:50-1:10',
                                      'title': 'L√†m s·ªët kem n·∫•m truffle',
                                      'visual_description': 'C√°c b∆∞·ªõc l√†m s·ªët kem n·∫•m truffle.',
                                      'dialogue': 'Trong l√∫c ch·ªù lu·ªôc m√¨ √° th√¨ m√¨nh ƒëi l√†m s·ªët kem n·∫•m truffle n√®. B·∫Øt c√°i ch·∫£o l√™n, cho x√≠u b∆° l·∫°t v√¥ cho n√≥ th∆°m, r·ªìi phi th∆°m t·ªèi bƒÉm v·ªõi h√†nh t√¢y bƒÉm. Phi cho n√≥ v√†ng v√†ng th∆°m th∆°m l√™n l√† ƒë∆∞·ª£c r·ªìi. Xong r·ªìi cho n·∫•m v√¥ x√†o, x√†o cho n·∫•m n√≥ ra h·∫øt n∆∞·ªõc v·ªõi l·∫°i n√≥ h∆°i sƒÉn l·∫°i √°.'},
                                     {'time_range': '1:10-1:35',
                                      'title': 'Ho√†n thi·ªán s·ªët',
                                      'visual_description': 'ƒê·ªï kem t∆∞∆°i v√† n√™m n·∫øm gia v·ªã.',
                                      'dialogue': 'Ti·∫øp theo l√† ƒë·ªï kem t∆∞∆°i v√¥, c√°i n√†y tui d√πng whipping cream cho n√≥ b√©o ng·∫≠y. N√™m n·∫øm gia v·ªã cho v·ª´a ƒÉn nha, mu·ªëi, ti√™u, ch√∫t x√≠u h·∫°t n√™m n·∫øu th√≠ch. R·ªìi c√°i quan tr·ªçng nh·∫•t n√®, cho truffle oil ho·∫∑c truffle paste v√¥, c√°i n√†y l√† b√≠ quy·∫øt t·∫°o n√™n c√°i m√πi v·ªã sang ch·∫£nh c·ªßa m√≥n n√†y ƒë√≥. M·∫•y b√† c·ª© n√™m n·∫øm t·ª´ t·ª´ th√¥i nha, cho v·ª´a ƒë·ªß th∆°m l√† ƒë∆∞·ª£c, ƒë·ª´ng c√≥ cho nhi·ªÅu qu√° n√≥ b·ªã n·ªìng √°.'},
                                     {'time_range': '1:35-1:45',
                                      'title': 'Tr·ªôn m√¨ v·ªõi s·ªët',
                                      'visual_description': 'Tr·ªôn m√¨ ƒë√£ lu·ªôc v√†o s·ªët kem n·∫•m.',
                                      'dialogue': 'ƒê·ªÉ l·ª≠a nh·ªè riu riu cho s·ªët n√≥ h∆°i s√°nh l·∫°i l√† ok r·ªìi ƒë√≥. L√∫c n√†y m√¨ c≈©ng v·ª´a ch√≠n t·ªõi r·ªìi, v·ªõt m√¨ ra cho v√¥ ch·∫£o s·ªët kem n·∫•m lu√¥n. Tr·ªôn ƒë·ªÅu l√™n cho m√¨ n√≥ √°o ƒë·ªÅu s·ªët kem n·∫•m l√† xong.'},
                                     {'time_range': '1:45-1:55',
                                      'title': 'Tr√¨nh b√†y',
                                      'visual_description': 'G·∫Øp m√¨ ra ƒëƒ©a v√† r·∫Øc ph√¥ mai parmesan.',
                                      'dialogue': 'Cu·ªëi c√πng l√† g·∫Øp m√¨ ra dƒ©a, r·∫Øc th√™m ph√¥ mai parmesan b√†o s·ª£i l√™n tr√™n cho n√≥ ƒë·∫πp m·∫Øt v·ªõi l·∫°i n√≥ b√©o n·ªØa. Ai m√† th√≠ch ƒÉn cay th√¨ r·∫Øc th√™m ch√∫t x√≠u ti√™u xay ho·∫∑c l√† ·ªõt b·ªôt l√™n tr√™n nha.'},
                                     {'time_range': '1:55-2:10',
                                      'title': 'C·∫£m nh·∫≠n',
                                      'visual_description': 'ƒÇn th·ª≠ v√† th·ªÉ hi·ªán c·∫£m x√∫c.',
                                      'dialogue': 'Tr·ªùi ∆°i ngon g√¨ ƒë√¢u lu√¥n √°! C√°i s·ª£i m√¨ n√≥ dai dai, s·ªët kem n·∫•m th√¨ b√©o ng·∫≠y th∆°m l·ª´ng m√πi truffle, ƒÉn m·ªôt mi·∫øng l√† mu·ªën ƒÉn th√™m mi·∫øng n·ªØa lu√¥n √°. M·∫•y b√† ph·∫£i th·ª≠ l√†m ngay nha. ƒê·∫£m b·∫£o l√† ai ƒÉn c≈©ng ghi·ªÅn cho coi.'},
                                     {'time_range': '2:10-2:18',
                                      'title': 'K√™u g·ªçi h√†nh ƒë·ªông',
                                      'visual_description': 'H∆∞·ªõng d·∫´n xem c√¥ng th·ª©c v√† follow.',
                                      'dialogue': 'C√¥ng th·ª©c tui ƒë·ªÉ h·∫øt tr√™n m√†n h√¨nh r·ªìi ƒë√≥, m·∫•y b√† c·ª© l√†m theo l√† y chang lu√¥n. L∆∞u video n√†y l·∫°i, share cho b·∫°n b√® c√πng l√†m. Follow tui ƒë·ªÉ xem th√™m nhi·ªÅu m√≥n ngon d·ªÖ l√†m n·ªØa nha!'}],
                    'setting': 'B·∫øp t·∫°i nh√†.',
                    'video_description': 'M√¨ √ù s·ªët kem n·∫•m truffle ngon chu·∫©n nh√† h√†ng 5 sao ngay t·∫°i nh√†! Xem ngay c√¥ng th·ª©c si√™u d·ªÖ n√†y v√† tr·ªï t√†i th√¥i n√†o! #Ancungtiktok #learnontiktok #anngonnaugon #miy'}

if formatted_script:
    display_script_sections(formatted_script)
