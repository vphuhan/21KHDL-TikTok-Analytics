import sys
import os

# SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
# sys.path.append(os.path.dirname(SCRIPT_DIR))

try:
    import streamlit as st
    from google import genai
    import pandas as pd
    import numpy as np
    from types import NoneType
    from google import genai
    from scriptwriting.tools.utils import *
    import pyperclip


except ImportError as e:
    import traceback
    print(f"Error importing required packages: {e}")
    print(traceback.format_exc())
    try:
        # If streamlit is successfully imported, show error in UI
        if 'st' in globals():
            st.error(
                f"Failed to import required packages. Please install them using: pip install -r requirements.txt\n\nError: {e}")
            st.stop()
    except:
        # If we can't even use streamlit, exit the program
        sys.exit(1)

# App configuration
# st.set_page_config(page_title="Write Scripts", page_icon="üìù")


@st.cache_data
def load_data():
    features_df = pd.read_parquet('data/ScriptGen-data/script_gendata.parquet')

    def parse_list(x):
        if isinstance(x, np.ndarray):
            return list(x)
        if isinstance(x, NoneType):
            return []
    for col in features_df.columns:
        list_flag = features_df[col].apply(
            lambda x: isinstance(x, np.ndarray)).any()
        if list_flag:
            features_df[col] = features_df[col].apply(parse_list)
    return features_df


# st.title("Vi·∫øt k·ªãch b·∫£n video TikTok")
# st.write("[Empty for now]")

# Constants
API_KEY = "AIzaSyBaT3UMomQUPjjpbRD2pCrE_sk3nT6P47w"  # vphacc096@gmail.com
DEFAULT_MODEL = "gemini-2.0-flash"
PAGE_TITLE = "Write Scripts"
PAGE_ICON = "üìù"
COLUMN_GAP: str = "medium"

# Available AI Models
AVAILABLE_MODELS = [
    "gemini-2.5-pro-exp-03-25",
    "gemini-2.0-flash",         # Input: 1,048,576 tokens, Output: 8,192 tokens
    "gemini-2.0-pro-exp",       # Input: 2,048,576 tokens, Output: 8,192 tokens
    "gemini-2.0-flash-thinking-exp-1219",
    "gemini-2.0-flash-lite",    # Input: 1,048,576 tokens, Output: 8,192 tokens
    "gemini-1.5-flash",         # Input: 1,048,576 tokens, Output: 8,192 tokens
    "gemini-1.5-flash-8b",      # Input: 1,048,576 tokens, Output: 8,192 tokens
    "gemini-1.5-pro",           # Input: 2,097,152 tokens, Output: 8,192 tokens
    "learnlm-1.5-pro-experimental",
    "gemma-3-27b-it",
]


class ScriptGenerator:
    def __init__(self):
        self.init_page_config()
        self.init_session_state()
        self.model = self.get_model()
        # self.model = None
        self.features_df = self.load_data()
        self.client = genai.Client(api_key=API_KEY)

    def init_page_config(self):
        """Initialize Streamlit page configuration"""
        st.set_page_config(page_title=PAGE_TITLE, page_icon=PAGE_ICON, layout="wide",
                           initial_sidebar_state="expanded",)

    def init_session_state(self):
        """Initialize session state variables"""
        if 'formatted_script' not in st.session_state:
            st.session_state.formatted_script = None
        if 'updated_script_data' not in st.session_state:
            st.session_state.updated_script_data = None

    def get_model(self):
        """Get the selected AI model from sidebar"""
        return st.sidebar.selectbox(
            "Select AI Model:",
            AVAILABLE_MODELS,
            index=AVAILABLE_MODELS.index(DEFAULT_MODEL)
        )

    def load_data(self):
        """Load TikTok data with spinner"""
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu TikTok..."):
            features_df = load_data()

        if features_df is None:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu TikTok. Vui l√≤ng th·ª≠ l·∫°i sau.")
            st.stop()

        return features_df

    def generate_script(self, user_description):
        """Generate script based on user description"""

        with st.spinner("Ph√¢n t√≠ch m√¥ t·∫£..."):
            # Generate labels from description
            label_dict = generate_labels_from_description(
                user_description, self.client, self.model)

            # Handle non-food content
            if label_dict is None:
                filtered_df = self.features_df
                filter_cat_df = self.features_df
            elif label_dict and label_dict['categories'] == 'Kh√¥ng li√™n quan ·∫©m th·ª±c':
                st.error(
                    "Y√™u c·∫ßu c·ªßa b·∫°n kh√¥ng li√™n quan ƒë·∫øn ·∫©m th·ª±c! Vui l√≤ng th·ª≠ l·∫°i v·ªõi m·ªôt m√¥ t·∫£ kh√°c.")
                return None
            else:
                # Extract duration if available
                duration = int(label_dict.pop("duration", None)) if label_dict.get(
                    "duration") is not None else None

                # Filter data based on labels
                filtered_df = filter_by_multiple_labels_unified(
                    self.features_df, label_dict, min_count=20)
                filter_cat_df = self.features_df[self.features_df['categories']
                                                 == label_dict['categories']]

            # Calculate statistics
            stats = self._calculate_statistics(filtered_df, filter_cat_df)

            # Use mean duration if not specified
            if duration is None:
                duration = stats['mean_duration']

            word_count = int(stats['mean_word_per_second'] * duration)
            # max_output_tokens = int(word_count * 1.5)
            max_output_tokens = 2000000

            # Adjusted for better performance
            print(f"Duration: {duration}")
            print(f"Max Word Count: {word_count}")
            print(f"Max Output Token: {max_output_tokens}")

        st.success("üß† M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£!")

        # Generate and format script
        with st.spinner("T·∫°o k·ªãch b·∫£n th√¥..."):
            plain_script = generate_plain_script(
                user_description, stats['transcript_sample_text'], word_count, self.client, self.model, max_output_tokens)
        st.success("üõ†Ô∏è B·∫£n nh√°p ƒë·∫ßu ti√™n ƒë√£ ho√†n th√†nh, ch·ªù tinh ch·ªânh!")

        with st.spinner("ƒê·ªãnh d·∫°ng l·∫°i k·ªãch b·∫£n..."):
            formatted_script = format_script_with_gemini(
                plain_script,
                stats['desc_sample_text'],
                stats['mean_desc_word_count'],
                stats['mean_word_per_second'],
                stats['mean_hashtag_count'],
                stats['top_10_hashtags_text'],
                self.client,
                self.model
            )
            print(f"Desc Word Count: {stats['mean_desc_word_count']}")

            # Save to session state
            st.session_state.formatted_script = formatted_script
            st.session_state.updated_script_data = formatted_script.copy()

        st.success("üé¨ K·ªãch b·∫£n ƒë√£ s·∫µn s√†ng!")
        return formatted_script

    def _calculate_statistics(self, filtered_df, filter_cat_df):
        """Calculate statistics from filtered dataframes"""
        stats = {
            'mean_word_count': int(filtered_df['transcript_word_count'].mean()),
            'mean_duration': int(filtered_df['video.duration'].mean()),
            'mean_word_per_second': filtered_df['word_per_second'].mean(),
            'mean_hashtag_count': int(filtered_df['hashtag_count'].mean()),
            'mean_desc_word_count': int(filtered_df['desc_word_count'].mean()),
        }

        # Get top hashtags
        top_10_hashtags = filter_cat_df['hashtags'].explode(
        ).value_counts().head(10).index
        stats['top_10_hashtags_text'] = ', '.join(top_10_hashtags)

        # Get sample texts
        stats['transcript_sample_text'], stats['desc_sample_text'] = format_transcript_desc_examples(
            filtered_df, min_count=20)

        return stats

    def display_script_overview(self, script_data):
        """Display the script overview section"""
        st.markdown("### üìù T·ªïng quan video")
        st.markdown(
            f"**üé¨ M√¥ t·∫£ video:** {script_data.get('video_description', '')}")
        st.markdown(
            f"**‚è±Ô∏è ƒê·ªô d√†i d·ª± ki·∫øn:** {script_data.get('duration', '')}")
        st.markdown(f"**üìç B·ªëi c·∫£nh:** {script_data.get('setting', '')}")
        st.markdown(f"**üë§ Nh√¢n v·∫≠t:** {script_data.get('characters', '')}")
        st.markdown("---")

    def display_script_sections(self, script_data):
        """Display all script sections with edit functionality"""
        # Display overview
        self.display_script_overview(script_data)

        st.markdown("### üé¨ K·ªãch b·∫£n theo t·ª´ng ph·∫ßn")

        # Process section deletions
        self._process_section_deletions()

        # Display each section
        for idx, section in enumerate(st.session_state.updated_script_data.get("main_content", [])):
            self._display_single_section(idx, section)

        return st.session_state.updated_script_data

    def _process_section_deletions(self):
        """Process any pending section deletions"""
        sections_to_delete = []
        for idx in range(len(st.session_state.updated_script_data.get("main_content", []))):
            if st.session_state.get(f"delete_section_{idx}", False):
                sections_to_delete.append(idx)
                st.session_state[f"delete_section_{idx}"] = False

        for idx in sorted(sections_to_delete, reverse=True):
            st.session_state.updated_script_data["main_content"].pop(idx)

    def _display_single_section(self, idx, section):
        """Display a single script section with edit functionality"""
        key_prefix = f"sec_{idx}"

        # Initialize edit mode state if not exists
        if f"{key_prefix}_edit" not in st.session_state:
            st.session_state[f"{key_prefix}_edit"] = False

        edit_mode = st.session_state[f"{key_prefix}_edit"]
        default_text = f"[{section['time_range']}] {section['title']}"

        # Title row with edit/save buttons
        self._display_section_header(
            key_prefix, section, default_text, edit_mode)

        # Content section (visual and dialogue)
        self._display_section_content(key_prefix, section, edit_mode)

    def _display_section_header(self, key_prefix, section, default_text, edit_mode):
        """Display the section header with edit/save buttons"""
        col_title, col_btns = st.columns([9, 1])

        with col_title:
            if edit_mode:
                time_title_input = st.text_input(
                    "‚è±Ô∏è Th·ªùi gian & ti√™u ƒë·ªÅ", default_text,
                    key=f"{key_prefix}_time_title",
                    label_visibility="collapsed"
                )
            else:
                st.markdown(
                    f"""
                    <div style="background-color: #f0f0f0; padding: 8px 16px; border-radius: 6px;">
                        <strong>{default_text}</strong>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

        with col_btns:
            if not edit_mode:
                if st.button("‚úèÔ∏è", key=f"{key_prefix}_edit_btn", help="S·ª≠a", use_container_width=True):
                    st.session_state[f"{key_prefix}_edit"] = True
                    st.rerun()
            else:
                if st.button("‚úÖ", key=f"{key_prefix}_save_btn", help="L∆∞u", use_container_width=True):
                    self._save_section_edits(key_prefix, section, default_text)
                    st.session_state[f"{key_prefix}_edit"] = False
                    st.rerun()

    def _save_section_edits(self, key_prefix, section, default_text):
        """Save edits made to a section"""
        time_title_raw = st.session_state.get(
            f"{key_prefix}_time_title", default_text)
        if "]" in time_title_raw:
            time_part, title_part = time_title_raw.split("]", 1)
            section["time_range"] = time_part.strip(" [")
            section["title"] = title_part.strip()

    def _display_section_content(self, key_prefix, section, edit_mode):
        """Display the content (visual and dialogue) of a section"""
        col1, col2 = st.columns([1, 2])

        if edit_mode:
            with col1:
                st.markdown("üé• **C·∫£nh quay**")
                visual_input = st.text_area(
                    "üé• C·∫£nh quay", section['visual_description'],
                    key=f"{key_prefix}_visual", height=100,
                    label_visibility="collapsed"
                )
            with col2:
                st.markdown("üó£Ô∏è **L·ªùi tho·∫°i**")
                dialogue_input = st.text_area(
                    "üó£Ô∏è L·ªùi tho·∫°i", section['dialogue'],
                    key=f"{key_prefix}_dialogue", height=100,
                    label_visibility="collapsed"
                )

            # Update section values
            if f"{key_prefix}_visual" in st.session_state:
                section["visual_description"] = visual_input
            if f"{key_prefix}_dialogue" in st.session_state:
                section["dialogue"] = dialogue_input
        else:
            with col1:
                st.markdown("üé• **C·∫£nh quay**")
                st.markdown(section['visual_description'])
            with col2:
                st.markdown("üó£Ô∏è **L·ªùi tho·∫°i**")
                st.markdown(f"\"{section['dialogue']}\"")

    def render_script_to_markdown(self, script_dict):
        md = []
        md.append("## üìù T·ªïng quan video\n")
        if 'video_description' in script_dict:
            md.append(
                f"**üìÑ M√¥ t·∫£ video**: {script_dict['video_description']}\n")
        if 'duration' in script_dict:
            md.append(f"**‚è±Ô∏è ƒê·ªô d√†i d·ª± ki·∫øn**: {script_dict['duration']}\n")
        if 'setting' in script_dict:
            md.append(f"**üìç B·ªëi c·∫£nh**: {script_dict['setting']}\n")
        if 'characters' in script_dict:
            md.append(f"**üë§ Nh√¢n v·∫≠t**: {script_dict['characters']}\n")
        md.append("\n## üé¨ K·ªãch b·∫£n theo t·ª´ng ph·∫ßn\n")
        for part in script_dict.get("main_content", []):
            time_range = part.get("time_range", "")
            title = part.get("title", "")
            visual = part.get("visual_description", "")
            dialogue = part.get("dialogue", "")

            md.append(f"#### **[{time_range}] {title}**")
            md.append(f"- **(C·∫£nh quay):** {visual}")
            md.append(f"- **(L·ªùi tho·∫°i):** {dialogue.strip()}\"\n")
        return "\n\n".join(md)

    def display_download_section(self, json_script):
        markdown_script = self.render_script_to_markdown(
            json_script)

        left_col, right_col = st.columns(
            spec=2, gap=COLUMN_GAP, vertical_alignment="top",
            # border=True,
        )
        with left_col:
            if st.button(
                label="Sao ch√©p k·ªãch b·∫£n",
                key="copy_suggestion_button",
                help="Sao ch√©p g·ª£i √Ω v√†o clipboard",
                icon=":material/content_copy:",
                use_container_width=True,
            ):
                pyperclip.copy(markdown_script)
                st.success(
                    "K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard!", icon="‚úÖ")

        with right_col:
            st.download_button(
                label="T·∫£i xu·ªëng k·ªãch b·∫£n",
                key="download_suggestion_button",
                help="T·∫£i xu·ªëng k·ªãch b·∫£n d∆∞·ªõi d·∫°ng file Markdown",
                data=markdown_script,
                file_name="script.md",
                mime="text/plain",
                on_click="ignore",
                icon=":material/download:",
                use_container_width=True,
            )

    def run(self):
        """Main application flow"""
        st.title("T·∫°o k·ªãch b·∫£n TikTok")
        # with option_col_2:  # Column 2: Ch·ªçn m√¥ h√¨nh AI
        # st.subheader(
        #     body=":gray-background[:blue[:material/smart_toy:]] Ch·ªçn m√¥ h√¨nh AI",
        #     anchor="Ch·ªçn m√¥ h√¨nh AI",
        # )

        # Select model
        # self.model = st.selectbox(
        #     label="**:blue[B·∫°n mu·ªën t·∫°o k·ªãch b·∫£n nh∆∞ th·∫ø n√†o?:]**",
        #     options=AVAILABLE_MODELS,
        #     index=1
        # )

        # Expandable section for description input
        with st.expander("**:blue[üìù Nh·∫≠p m√¥ t·∫£ video]**", expanded=True):
            user_description = st.text_area(
                "M√¥ t·∫£ chi ti·∫øt v·ªÅ video TikTok b·∫°n mu·ªën t·∫°o:",
                placeholder="L√†m video TikTok h∆∞·ªõng d·∫´n n·∫•u m√¨ t√¥m tr·ª©ng si√™u nhanh, si√™u d·ªÖ cho sinh vi√™n. C·∫ßn nh·∫•n m·∫°nh v√†o s·ª± ti·ªán l·ª£i v√† h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc...",
                height=250  # Increased height for more space
            )

            # Add some example suggestions
            st.markdown("""
            **M·ªôt s·ªë chi ti·∫øt c√≥ th·ªÉ g·ª£i √Ω cho h·ªá th·ªëng:**
            - **M√≥n ƒÉn** v√† **m·ª•c ti√™u video** (review, n·∫•u, chia s·∫ª...)
            - **C√°ch tri·ªÉn khai** (k·ªÉ chuy·ªán, h∆∞·ªõng d·∫´n, review...)
            - **C√°ch m·ªü ƒë·∫ßu, gi·ªçng ƒëi·ªáu, t·ªëc ƒë·ªô video**
            - C√≥ **CTA** g√¨ kh√¥ng (comment, chia s·∫ª, gh√© qu√°n...)
            - Ai l√† **ng∆∞·ªùi xem** ch√≠nh (h·ªçc sinh, d√¢n vƒÉn ph√≤ng, n·ªôi tr·ª£...)
            
            **V√≠ d·ª•**: T√¥i mu·ªën l√†m video qu·∫£ng b√° cho s·∫£n ph·∫©m b√°nh tr√°ng ch·∫•m ph√¥ mai c·ªßa nh√† t√¥i, c√°ch n√≥i chuy·ªán g·∫ßn g≈©i, c√≥ h∆∞·ªõng d·∫´n c√°ch ƒÉn, gi·ªçng ƒëi·ªáu t·ª´ t·ªën.
            """)

            # col1, col2, col3 = st.columns([2, 1, 2])
            # with col2:
            generate_button = st.button(
                "T·∫°o k·ªãch b·∫£n", use_container_width=True, type='primary', icon=":material/auto_awesome:",
            )

            if generate_button and user_description:
                self.generate_script(user_description)

        # Display script if available
        if st.session_state.formatted_script:
            st.header("üé¨ K·ªãch b·∫£n g·ª£i √Ω")
            self.display_script_sections(st.session_state.formatted_script)
            self.display_download_section(st.session_state.formatted_script)


# Main execution
# if __name__ == "__main__":
app = ScriptGenerator()
app.run()
