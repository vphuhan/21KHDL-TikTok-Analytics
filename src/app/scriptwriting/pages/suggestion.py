import streamlit as st
import os
from google import genai
from typing import List, Dict
import pyperclip


# ================================================================
# *_____________________ [Define constants] _____________________*
# ================================================================
GEMINI_MODELS_FILE: str = "models/gemini_models.txt"
PROMPT_TEMPLATE_FOLDER: str = "data/prompts"
COLUMN_GAP: str = "medium"

OPTION_FOOD_REVIEW: str = "Video review m√≥n ƒÉn ho·∫∑c qu√°n ƒÉn"
OPTION_MUKBANG: str = "Video mukbang"
OPTION_COOKING: str = "Video h∆∞·ªõng d·∫´n n·∫•u ƒÉn"
VIDEO_TYPES: List[str] = [
    OPTION_FOOD_REVIEW,
    OPTION_MUKBANG,
    OPTION_COOKING
]
VIDEO_TYPE_TO_PROMPT: Dict[str, str] = {
    OPTION_FOOD_REVIEW: os.path.join(PROMPT_TEMPLATE_FOLDER, "food_review_template.md"),
    OPTION_MUKBANG: os.path.join(PROMPT_TEMPLATE_FOLDER, "mukbang_template.md"),
    OPTION_COOKING: os.path.join(PROMPT_TEMPLATE_FOLDER, "cooking_template.md"),
}


# ================================================================
# *_________________ [Define helper functions] __________________*
# ================================================================
@st.cache_data
def read_prompt_file(file_path: str) -> str:
    """ Read and cache prompt content from a markdown file. """

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read().strip()
        return content
    except Exception as e:
        st.error(f"Error reading file: {e}")
        return None


@st.cache_data
def read_available_gemini_models(file_path: str) -> List[str]:
    """ Read and cache available Gemini models from a text file. """

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            models: List[str] = [line.strip() for line in file.readlines()]
        return models
    except Exception as e:
        st.error(f"Error reading file: {e}")
        return []


def generate_suggestion(system_prompt: str, model: str,
                        user_description: str) -> str:
    """ Generate video suggestions using Google's Gemini API. """

    # Generate content
    try:
        client = genai.Client(
            api_key="AIzaSyBYqr4g63GOBTslf5xP0-AbIcSSlAuvMnM")
        response = client.models.generate_content(
            model=model,
            contents=[
                system_prompt,
                user_description,
            ],
        )
        return response.text
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o n·ªôi dung: {e}")
        return ""


# ================================================================
# *____________ [Setup Streamlit page configuration] ____________*
# ================================================================
# C·∫•u h√¨nh page
st.set_page_config(
    page_title="H·ªá th·ªëng g·ª£i √Ω n·ªôi dung video ·∫©m th·ª±c",
    page_icon="üçú",
    layout="wide",
)
# ƒê·∫∑t ti√™u ƒë·ªÅ c·ªßa page
st.title("H·ªá th·ªëng g·ª£i √Ω n·ªôi dung video ·∫©m th·ª±c")


# ================================================================
# *_________ [UI for selecting model and type of video] _________*
# ================================================================
# T·∫°o 2 columns cho ng∆∞·ªùi d√πng l·ª±a ch·ªçn
option_col_1, option_col_2 = st.columns(
    spec=2, gap=COLUMN_GAP, vertical_alignment="top",
    border=True,
)
with option_col_1:  # Column 1: Ch·ªçn lo·∫°i video
    st.subheader(
        body=":gray-background[:blue[:material/video_library:]] Ch·ªçn lo·∫°i video",
        anchor="Ch·ªçn lo·∫°i video",
    )
    # Ch·ªçn lo·∫°i video m√† ng∆∞·ªùi d√πng mu·ªën th·ª±c hi·ªán
    video_type = st.radio(
        label="**:blue[H√£y ch·ªçn lo·∫°i video m√† b·∫°n mu·ªën th·ª±c hi·ªán:]**",
        options=VIDEO_TYPES,
        index=0,
    )
with option_col_2:  # Column 2: Ch·ªçn m√¥ h√¨nh AI
    st.subheader(
        body=":gray-background[:blue[:material/smart_toy:]] Ch·ªçn m√¥ h√¨nh AI",
        anchor="Ch·ªçn m√¥ h√¨nh AI",
    )
    # Read available models from a file
    available_gemini_models = read_available_gemini_models(
        file_path=GEMINI_MODELS_FILE)
    # Select model
    model = st.selectbox(
        label="**:blue[Ch·ªçn m√¥ h√¨nh AI m√† b·∫°n mu·ªën s·ª≠ d·ª•ng:]**",
        options=available_gemini_models,
        index=0
    )

# T·∫°o 2 columns ƒë·ªÉ th·ªÉ hi·ªán th√¥ng tin v·ªÅ lo·∫°i video v√† m√¥ h√¨nh ƒë√£ ch·ªçn
info_col_1, info_col_2 = st.columns(
    spec=2, gap=COLUMN_GAP, vertical_alignment="top",
    # border=True,
)
with info_col_1:  # Info v·ªÅ lo·∫°i video ƒë√£ ch·ªçn
    st.info(f"B·∫°n ƒë√£ ch·ªçn lo·∫°i video: **{video_type}**")
with info_col_2:  # Info v·ªÅ m√¥ h√¨nh ƒë√£ ch·ªçn
    st.info(f"B·∫°n ƒë√£ ch·ªçn m√¥ h√¨nh: **{model}**")


# ================================================================
# *____________ [UI for entering video description] _____________*
# ================================================================
# T·∫°o khu v·ª±c cho ng∆∞·ªùi d√πng nh·∫≠p m√¥ t·∫£ video
st.header(
    body=":orange-background[:orange[:material/description:]] M√¥ t·∫£ video c·ªßa b·∫°n",
    anchor="M√¥ t·∫£ video c·ªßa b·∫°n",
)
user_description = st.text_area(
    label="**:orange[H√£y nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ video ·∫©m th·ª±c m√† b·∫°n mu·ªën th·ª±c hi·ªán:]**",
    value="",
    key="user_description",
    placeholder="Nh·∫≠p m√¥ t·∫£ video t·∫°i ƒë√¢y...",
    height=140,
)
# Th·ªÉ hi·ªán 1 v√≠ d·ª• minh h·ªça
with st.expander(label="**V√≠ d·ª• minh h·ªça**", expanded=True):
    st.write("T√¥i mu·ªën t√¨m hi·ªÉu c√°ch quay video review m·ªôt qu√°n b√°n ƒë·ªì ƒÉn v·∫∑t cho h·ªçc sinh sinh vi√™n tr√™n con ƒë∆∞·ªùng C√°ch m·∫°ng Th√°ng T√°m. Theo nh∆∞ t√¥i t√¨m hi·ªÉu th√¨ qu√°n n√†y c√≥ r·∫•t nhi·ªÅu m√≥n ƒÉn v·∫∑t ph√π h·ª£p v·ªõi gi·ªõi tr·∫ª nh∆∞: b√°nh tr√°ng tr·ªôn, b√°nh tr√°ng n∆∞·ªõng, b√°nh tr√°ng cu·ªën, ph·ªü ly full topping h·∫£i s·∫£n, m·ª≥ ly v·ªõi n∆∞·ªõc s√∫p l·∫©u th√°i, v.v.. H√£y ƒë·ªÅ xu·∫•t cho t√¥i nh·ªØng l·ªùi khuy√™n h·ªØu √≠ch v·ªÅ c√°ch quay video, c√°ch tr√≤ chuy·ªán v·ªõi ch·ªß qu√°n, c√°ch gi·ªõi thi·ªáu m√≥n ƒÉn, c√°ch t·∫°o kh√¥ng kh√≠ vui v·∫ª v√† h·∫•p d·∫´n cho video. T√¥i mu·ªën video n√†y c√≥ th·ªÉ thu h√∫t ƒë∆∞·ª£c s·ª± ch√∫ √Ω c·ªßa c√°c b·∫°n tr·∫ª v√† t·∫°o c·∫£m gi√°c mu·ªën ƒë·∫øn qu√°n ƒÉn th·ª≠ ngay l·∫≠p t·ª©c. H√£y cung c·∫•p cho t√¥i m·ªôt s·ªë m·∫πo v√† chi·∫øn l∆∞·ª£c ƒë·ªÉ th·ª±c hi·ªán ƒëi·ªÅu n√†y. T√¥i c≈©ng mu·ªën bi·∫øt v·ªÅ c√°c xu h∆∞·ªõng hi·ªán t·∫°i trong vi·ªác quay video review m√≥n ƒÉn v·∫∑t v√† nh·ªØng ƒëi·ªÅu c·∫ßn tr√°nh khi th·ª±c hi·ªán video n√†y.")


# ================================================================
# *_____________ [Logic for generating suggestions] _____________*
# ================================================================
# Kh·ªüi t·∫°o session state cho g·ª£i √Ω n·∫øu ch∆∞a c√≥
if "suggestion" not in st.session_state:
    st.session_state.suggestion = ""

# Generate suggestions
generate_button: bool = st.button(
    label="**T·∫°o g·ª£i √Ω**",
    key="generate_button",
    help="Nh·∫•n ƒë·ªÉ nh·∫≠n g·ª£i √Ω cho video c·ªßa b·∫°n",
    type="primary",
    icon=":material/auto_awesome:",
    use_container_width=True,
)
if generate_button:
    if not user_description.strip():
        st.warning(
            ":warning: Vui l√≤ng nh·∫≠p m√¥ t·∫£ v·ªÅ video c·ªßa b·∫°n tr∆∞·ªõc khi t·∫°o g·ª£i √Ω."
        )
    else:
        with st.spinner(
            text="‚è≥ ƒêang t·∫°o g·ª£i √Ω...", show_time=True,
        ):
            # √Ånh x·∫° t·ª´ lo·∫°i video sang t·ªáp prompt
            prompt_file: str = VIDEO_TYPE_TO_PROMPT[video_type]
            # ƒê·ªçc n·ªôi dung prompt t·ª´ t·ªáp
            system_prompt: str = read_prompt_file(prompt_file)
            # T·∫°o g·ª£i √Ω cho video th√¥ng qua API
            st.session_state.suggestion = generate_suggestion(
                system_prompt=system_prompt,
                model=model,
                user_description=user_description,
            )

# Hi·ªÉn th·ªã g·ª£i √Ω n·∫øu c√≥
if st.session_state.suggestion:
    st.divider()
    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ cho ph·∫ßn g·ª£i √Ω
    st.header(
        body=":orange-background[:orange[:material/tips_and_updates:]] G·ª£i √Ω cho video c·ªßa b·∫°n",
        anchor="G·ª£i √Ω cho video c·ªßa b·∫°n",
    )
    # Hi·ªÉn th·ªã g·ª£i √Ω
    st.markdown(st.session_state.suggestion)

    # Hi·ªÉn th·ªã c√°c n√∫t ch·ª©c nƒÉng
    left_col, right_col = st.columns(
        spec=2, gap=COLUMN_GAP, vertical_alignment="top",
        # border=True,
    )
    # T·∫°o n√∫t sao ch√©p g·ª£i √Ω v√†o clipboard
    with left_col:
        # T·∫°o n√∫t sao ch√©p g·ª£i √Ω
        if st.button(
            label="Sao ch√©p g·ª£i √Ω",
            key="copy_suggestion_button",
            help="Sao ch√©p g·ª£i √Ω v√†o clipboard",
            icon=":material/content_copy:",
            use_container_width=True,
        ):
            # Copy the suggestion to clipboard
            pyperclip.copy(st.session_state.suggestion)
            st.success("G·ª£i √Ω ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard!", icon="‚úÖ")
    # T·∫°o n√∫t t·∫£i xu·ªëng g·ª£i √Ω d∆∞·ªõi d·∫°ng t·ªáp vƒÉn b·∫£n
    with right_col:
        st.download_button(
            label="T·∫£i xu·ªëng g·ª£i √Ω",
            key="download_suggestion_button",
            help="T·∫£i xu·ªëng g·ª£i √Ω d∆∞·ªõi d·∫°ng file Markdown",
            data=st.session_state.suggestion,
            file_name="video_suggestion.md",
            mime="text/plain",
            on_click="ignore",
            icon=":material/download:",
            use_container_width=True,
        )
