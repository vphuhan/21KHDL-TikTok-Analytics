import streamlit as st
import pandas as pd
import plotly.express as px
import ast
from wordcloud import WordCloud
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")

# B·∫£n d·ªãch c·ªôt
COLUMN_LABELS = {
    'category': 'Ch·ªß ƒë·ªÅ',
    'hook_type': 'Ki·ªÉu m·ªü ƒë·∫ßu',
    'structure_style': 'C·∫•u tr√∫c n·ªôi dung',
    'tone_of_voice': 'Gi·ªçng ƒëi·ªáu',
    'pacing': 'Nh·ªãp ƒë·ªô',
    'has_cta': 'C√≥ CTA',
    'cta_type': 'Ki·ªÉu CTA',
    'has_personal_story': 'C√≥ k·ªÉ chuy·ªán c√° nh√¢n',
    'main_content_focus': 'Tr·ªçng t√¢m n·ªôi dung',
    'speaking_style': 'C√°ch n√≥i',
    'emotion_keywords': 'T·ª´ kho√° c·∫£m x√∫c',
    'hashtags': 'Hashtag'
}

# Load data


@st.cache_data
def load_data():
    df = pd.read_csv("content_analyse.csv")
    list_columns = list(COLUMN_LABELS.keys())

    def parse_list_column(value):
        try:
            parsed = ast.literal_eval(value) if isinstance(
                value, str) and value.startswith('[') else value
            return parsed if isinstance(parsed, list) else [parsed]
        except:
            return [value]

    for col in list_columns:
        if col in df.columns:
            df[col] = df[col].apply(parse_list_column)

    # Lo·∫°i b·ªè video kh√¥ng li√™n quan ·∫©m th·ª±c
    df = df[~df['category'].apply(lambda x: isinstance(
        x, list) and "Audio kh√¥ng li√™n quan ·∫©m th·ª±c" in x)]

    return df


def render_chart(df, field, metric, stat_type):
    # ƒë·∫£m b·∫£o c·ªôt t·ªìn t·∫°i tr∆∞·ªõc khi truy c·∫≠p
    if metric not in df.columns or field not in df.columns:
        return None

    if field == 'cta_type':
        df = df[df['has_cta'] == True]  # ch·ªâ gi·ªØ video c√≥ CTA
        df = df[df['cta_type'].notna()]  # lo·∫°i b·ªè NaN
        df = df[df['cta_type'].apply(lambda x: isinstance(
            x, list) and len(x) > 0)]  # lo·∫°i b·ªè list r·ªóng

    if field not in df.columns:
        return None

    exploded = df[[metric, field]].copy()
    exploded = exploded.explode(field)
    exploded = exploded.dropna(subset=[field])  # lo·∫°i b·ªè nan tr∆∞·ªõc khi group

    if stat_type == 'mean':
        grouped = (
            exploded.groupby(field)[metric]
            .mean()
            .reset_index(name=f'{stat_type}_{metric}')
            .sort_values(by=f'{stat_type}_{metric}', ascending=False)
        )
    elif stat_type == 'median':
        grouped = (
            exploded.groupby(field)[metric]
            .median()
            .reset_index(name=f'{stat_type}_{metric}')
            .sort_values(by=f'{stat_type}_{metric}', ascending=False)
        )
    elif stat_type == 'count':
        grouped = (
            exploded.groupby(field)[metric]
            .count()
            .reset_index(name='S·ªë l∆∞·ª£ng video')
            .sort_values(by='S·ªë l∆∞·ª£ng video', ascending=False)
        )
        metric = 'S·ªë l∆∞·ª£ng video'
    else:
        return None

    fig = px.bar(
        grouped,
        x=grouped.columns[1],
        y=field,
        color=field,
        orientation='h',
        title=f'{COLUMN_LABELS.get(field, field)} vs {grouped.columns[1]}',
        labels={
            grouped.columns[1]: grouped.columns[1],
            field: COLUMN_LABELS.get(field, field)
        },
        height=600
    )
    fig.update_layout(showlegend=False)
    return fig


def render_wordcloud(df, field):
    from itertools import chain
    if field not in df.columns:
        return
    all_keywords = list(chain.from_iterable(df[field].dropna()))
    all_keywords = [str(word) for word in all_keywords if pd.notnull(word)]
    if not all_keywords:
        st.warning(
            f"Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã WordCloud cho {COLUMN_LABELS.get(field, field)}.")
        return
    text = " ".join(all_keywords)
    wc = WordCloud(width=1000, height=600, background_color='white',
                   collocations=False).generate(text)
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.imshow(wc, interpolation='bilinear')
    ax.axis("off")
    st.pyplot(fig)


def render_duration_chart(df, metric='views'):
    import numpy as np

    bins = [0, 10, 30, 60, 90, 120, 180, 300, 600, float("inf")]
    labels = ["<10s", "10-30s", "30-60s", "60-90s", "90-120s",
              "2 mins", "3-5 mins", "5-10 mins", ">10 mins"]

    if 'video.duration' not in df.columns or metric not in df.columns:
        st.warning("Thi·∫øu c·ªôt 'video.duration' ho·∫∑c metric ƒë·ªÉ ph√¢n t√≠ch.")
        return

    df = df.dropna(subset=['video.duration', metric])
    df['duration_bin'] = pd.cut(
        df['video.duration'], bins=bins, labels=labels, right=False)

    grouped = (
        df.groupby('duration_bin')[metric]
        .mean()
        .reset_index(name=f'avg_{metric}')
        .sort_values(by='duration_bin')
    )

    fig = px.bar(
        grouped,
        x='duration_bin',
        y=f'avg_{metric}',
        title=f'Trung b√¨nh {metric.capitalize()} theo ƒë·ªô d√†i video',
        labels={'duration_bin': 'ƒê·ªô d√†i video',
                f'avg_{metric}': f'Trung b√¨nh {metric.capitalize()}'},
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)


# Load data
df = load_data()

# Sidebar
st.sidebar.header("T√πy ch·ªçn ph√¢n t√≠ch")

category_options = sorted({
    cat for sublist in df['category'] if isinstance(sublist, list)
    for cat in sublist if isinstance(cat, str)
})

selected_category = st.sidebar.multiselect(
    "Ch·ªçn ch·ªß ƒë·ªÅ:", options=category_options, default=None
)

# L·ªçc theo category n·∫øu c√≥ ch·ªçn
if selected_category:
    df = df[df['category'].apply(lambda cats: any(
        cat in cats for cat in selected_category))]

selected_field = st.sidebar.selectbox("Ch·ªçn tr∆∞·ªùng n·ªôi dung:", [
    'hook_type', 'structure_style', 'tone_of_voice', 'pacing',
    'has_cta', 'cta_type', 'has_personal_story', 'main_content_focus',
    'speaking_style'
], format_func=lambda x: COLUMN_LABELS.get(x, x))

selected_metric = st.sidebar.selectbox("Ch·ªâ s·ªë hi·ªáu su·∫•t:", [
    'views', 'likes', 'comments', 'shares', 'collects', 'engagement_rate'
], format_func=lambda x: {
    'views': 'L∆∞·ª£t xem',
    'likes': 'L∆∞·ª£t th√≠ch',
    'comments': 'B√¨nh lu·∫≠n',
    'shares': 'Chia s·∫ª',
    'collects': 'L∆∞u',
    'engagement_rate': 'T·ª∑ l·ªá t∆∞∆°ng t√°c'
}.get(x, x))

stat_type = st.sidebar.radio("Lo·∫°i th·ªëng k√™:", options=['mean', 'median', 'count'], format_func=lambda x: {
    'mean': 'Trung b√¨nh',
    'median': 'Trung v·ªã',
    'count': 'S·ªë l∆∞·ª£ng video'
}.get(x, x))

# Main layout
st.title("üìä TikTok Content Insight Dashboard")

st.markdown("## 1. Bi·ªÉu ƒë·ªì hi·ªáu su·∫•t theo tr∆∞·ªùng n·ªôi dung")
fig = render_chart(df, selected_field, selected_metric, stat_type)
if fig:
    st.plotly_chart(fig, use_container_width=True)

st.markdown("## 2. Word Cloud cho T·ª´ kho√° C·∫£m x√∫c")
render_wordcloud(df, field='emotion_keywords')

st.markdown("## 3. Word Cloud cho Hashtag")
render_wordcloud(df, field='hashtags')

st.markdown("## 4. Hi·ªáu su·∫•t theo ƒë·ªô d√†i video")
render_duration_chart(df, metric=selected_metric)
