import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from google import genai
from typing import List, Tuple, Dict
import scipy.stats as stats


# ================================================================
# *_____________________ [Define constants] _____________________*
# ================================================================
DARK_GRAY: str = "#444444"
CLEANED_USER_DATA_FILE: str = "data/processed/cleaned_user_info.parquet"
COLUMN_TO_AXIS_TITLE: Dict[str, str] = {
    "stats.videoCount": "S·ªë video",
    "stats.followerCount": "S·ªë ng∆∞·ªùi theo d√µi",
    "stats.heartCount": "S·ªë l∆∞·ª£t th√≠ch",
    "avg_comments_per_video": "S·ªë b√¨nh lu·∫≠n tr√™n m·ªói video",
    "avg_diggs_per_video": "S·ªë l∆∞·ª£t th√≠ch tr√™n m·ªói video",
    "avg_plays_per_video": "S·ªë l∆∞·ª£t xem tr√™n m·ªói video",
    "avg_shares_per_video": "S·ªë l∆∞·ª£t chia s·∫ª tr√™n m·ªói video",
    "avg_collects_per_video": "S·ªë l∆∞·ª£t l∆∞u tr√™n m·ªói video",
    "avg_videos_per_week": "S·ªë video m·ªói tu·∫ßn",
    "avg_hashtags_per_video": "S·ªë hashtag m·ªói video",
    "avg_video_duration": "Th·ªùi gian video (gi√¢y)",
}


# ================================================================
# *____________________ [Utility functions] _____________________*
# ================================================================
# H√†m gi√∫p t·∫°o nh·∫≠n x√©t v√† r√∫t ra insights t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch v√† tr·ª±c quan h√≥a d·ªØ li·ªáu
@st.cache_data(show_spinner=False)
def generate_insights(prompt: str, api_key: str) -> str:
    # return "[TEMPORARY] Ch·ª©c nƒÉng n√†y hi·ªán ƒëang t·∫°m d·ª´ng ho·∫°t ƒë·ªông."
    """ T·∫°o nh·∫≠n x√©t t·ª´ Gemini API """
    # Generate content
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model="gemini-2.0-flash-lite",
            contents=[prompt]
        )
        return response.text
    except Exception as e:
        print(f"L·ªói khi t·∫°o n·ªôi dung: {e}")
        return ""


# T·∫°o 1 module d√†nh ri√™ng cho vi·ªác r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì
# v√† th·ªÉ hi·ªán l√™n trang web
def display_AI_generated_insights(prompt: str, api_key: str,
                                  print_to_console: bool = False,
                                  expanded: bool = True
                                  ) -> None:
    """ End-to-end module ƒë·ªÉ r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì v√† hi·ªán th·ªã l√™n trang web """

    with st.expander(
            label=":blue-background[:blue[**:material/auto_awesome: Nh·∫≠n x√©t t·ª´ AI**]]",
            expanded=expanded):
        # T·∫°o nh·∫≠n x√©t t·ª´ Gemini API
        with st.spinner(text="ƒêang t·∫°o nh·∫≠n x√©t t·ª´ AI...", show_time=True):
            insights = generate_insights(prompt=prompt, api_key=api_key)
            if not insights:
                st.error("Hi·ªán t·∫°i h·ªá th·ªëng ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau.")
            else:
                st.markdown(insights)
                if print_to_console:
                    print(f"Nh·∫≠n x√©t t·ª´ AI:\n{insights}")


# T·∫£i d·ªØ li·ªáu
# @st.cache_data
def load_user_data() -> pd.DataFrame:
    """ T·∫£i v√† l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t·ª´ t·ªáp """
    if CLEANED_USER_DATA_FILE.endswith(".csv"):
        return pd.read_csv(CLEANED_USER_DATA_FILE)
    elif CLEANED_USER_DATA_FILE.endswith(".parquet"):
        return pd.read_parquet(CLEANED_USER_DATA_FILE)

    return None


# H√†m t√≠nh t·ª∑ l·ªá t∆∞∆°ng t√°c
@st.cache_data
def calculate_engagement_ratio(df: pd.DataFrame) -> pd.DataFrame:
    """ T√≠nh to√°n t·ª∑ l·ªá t∆∞∆°ng t√°c cho t·ª´ng ng∆∞·ªùi d√πng """
    df['engagement_ratio'] = (
        df['stats.heartCount'] /
        df['stats.followerCount'].replace(0, 1)
    )
    return df


# H√†m t√≠nh s·ªë l∆∞·ª£t like trung b√¨nh tr√™n m·ªói video c·ªßa m·ªói user
@st.cache_data
def calculate_avg_likes_per_video(df: pd.DataFrame) -> pd.DataFrame:
    """ T√≠nh to√°n s·ªë l∆∞·ª£t th√≠ch trung b√¨nh tr√™n m·ªói video """
    df['avg_likes_per_video'] = df['stats.heartCount'] / \
        df['stats.videoCount'].replace(0, 1)
    return df


# H√†m t√≠nh c√°c gi√° tr·ªã ph√¢n v·ªã ƒë·ªÉ l·ªçc d·ªØ li·ªáu
@st.cache_data
def calculate_percentiles(df: pd.DataFrame,
                          percentiles: List[float]) -> Tuple[float, float, float, float]:
    """ T√≠nh to√°n c√°c gi√° tr·ªã ph√¢n v·ªã cho ng∆∞·ªùi theo d√µi v√† t∆∞∆°ng t√°c """

    low_followers = df['stats.followerCount'].quantile(percentiles[1])
    high_followers = df['stats.followerCount'].quantile(percentiles[2])
    low_engagement = df['engagement_ratio'].quantile(percentiles[1])
    high_engagement = df['engagement_ratio'].quantile(percentiles[2])

    return low_followers, high_followers, low_engagement, high_engagement


# H√†m l·ªçc d·ªØ li·ªáu theo m·ª©c ƒë·ªô t∆∞∆°ng t√°c v√† ng∆∞·ªùi theo d√µi
@st.cache_data
def filter_data(df: pd.DataFrame, follower_level: str, engagement_level: str,
                low_followers: float, high_followers: float,
                low_engagement: float, high_engagement: float
                ) -> pd.DataFrame:
    """ L·ªçc d·ªØ li·ªáu theo m·ª©c ƒë·ªô t∆∞∆°ng t√°c v√† ng∆∞·ªùi theo d√µi """

    # L·ªçc theo m·ª©c ng∆∞·ªùi theo d√µi
    if follower_level == "Th·∫•p":
        filtered_df = df[df['stats.followerCount'] <= low_followers]
    elif follower_level == "Trung b√¨nh":
        filtered_df = df[
            (df['stats.followerCount'] > low_followers) &
            (df['stats.followerCount'] <= high_followers)
        ]
    else:
        filtered_df = df[df['stats.followerCount'] > high_followers]

    # # L·ªçc theo m·ª©c t∆∞∆°ng t√°c
    # if engagement_level == "Th·∫•p":
    #     filtered_df = filtered_df[
    #         filtered_df['engagement_ratio'] <= low_engagement]
    # elif engagement_level == "Trung b√¨nh":
    #     filtered_df = filtered_df[
    #         (filtered_df['engagement_ratio'] > low_engagement) &
    #         (filtered_df['engagement_ratio'] <= high_engagement)
    #     ]
    # else:
    #     filtered_df = filtered_df[
    #         filtered_df['engagement_ratio'] > high_engagement]

    return filtered_df


# H√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì scatter plot th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa ng∆∞·ªùi theo d√µi v√† m·ª©c ƒë·ªô t∆∞∆°ng t√°c
@st.cache_data(show_spinner=False)
def plot_engagement_scatter(df: pd.DataFrame, x_col: str, y_col: str,
                            color: str = None) -> Tuple[go.Figure, float]:
    """ V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa ng∆∞·ªùi theo d√µi v√† m·ª©c ƒë·ªô t∆∞∆°ng t√°c """

    # T·∫°o bi·ªÉu ƒë·ªì ph√¢n t√°n
    fig = px.scatter(
        df, x=x_col, y=y_col,

        # color='lightblue',
        # color_continuous_scale='Teal',
        hover_data=['user.uniqueId'],
        height=400,
        opacity=0.8,

        # V·∫Ω regression line tr√™n bi·ªÉu ƒë·ªì ph√¢n t√°n
        trendline="ols",
        trendline_color_override="#f56b69",
        trendline_options=dict(
            log_x=True,
            log_y=True,
            add_constant=True,
        ),

    )

    # C·∫≠p nh·∫≠t marker v√† m√†u s·∫Øc
    fig.update_traces(
        marker=dict(
            line=dict(width=1, color=DARK_GRAY),
            size=10,
            color=color,
            opacity=0.8,
        ),
    )

    # Hi·ªÉn th·ªã h·ªá s·ªë t∆∞∆°ng quan gi·ªØa 2 bi·∫øn x v√† y
    corr = df[x_col].corr(df[y_col])
    fig.add_annotation(
        text=f" œÅ = {corr:.2f} ",
        xref="paper",
        yref="paper",
        x=0.95,
        y=0.95,
        showarrow=False,
        font=dict(size=18, color=DARK_GRAY),
        bgcolor='#e7f4ea',
        bordercolor='#39a342',
        borderwidth=1,
    )

    # C·∫≠p nh·∫≠t b·ªë c·ª•c bi·ªÉu ƒë·ªì
    fig.update_layout(
        xaxis_title=COLUMN_TO_AXIS_TITLE[x_col],
        yaxis_title=COLUMN_TO_AXIS_TITLE[y_col],
        xaxis_type="log",
        yaxis_type="log",
        # showlegend=True,
        # coloraxis_colorbar_title="T·ª∑ l·ªá t∆∞∆°ng t√°c üî•",

        # Thay ƒë·ªïi m√†u n·ªÅn v√† k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ
        plot_bgcolor="#fafafa",
        # title_x=0.5,
        title_y=0.95,
        # title_xanchor="right",
        title_yanchor="top",
        title_font_size=20,
        title_font_color=DARK_GRAY,
        title_text=f"M·ªëi t∆∞∆°ng quan gi·ªØa {COLUMN_TO_AXIS_TITLE[x_col]}<br />v√† {COLUMN_TO_AXIS_TITLE[y_col]}",
        title_font_family="Arial",

        # Thay ƒë·ªïi k√≠ch th∆∞·ªõc x, y-axis label
        xaxis_title_font=dict(size=16),
        yaxis_title_font=dict(size=16),

        # Thay ƒë·ªïi k√≠ch th∆∞·ªõc x, y-axis tick labels
        xaxis_tickfont=dict(size=14),
        yaxis_tickfont=dict(size=14),
    )

    return fig, corr


# ================================================================
# *_______________________ [Basic setup] ________________________*
# ================================================================
# C·∫•u h√¨nh Streamlit
st.set_page_config(
    page_title="Engagement Insights",
    page_icon="üìä",
    layout="wide",
)
# Ti√™u ƒë·ªÅ trang
st.title("üìä Ph√¢n t√≠ch ƒë·∫∑c ƒëi·ªÉm v√† hi·ªáu su·∫•t gi·ªØa c√°c nh√≥m TikToker kh√°c nhau")
st.write(
    "So s√°nh c√°c ch·ªâ s·ªë t∆∞∆°ng t√°c, t·∫ßn su·∫•t ƒëƒÉng t·∫£i, v√† ƒë·∫∑c ƒëi·ªÉm n·ªôi dung gi·ªØa c√°c nh√≥m ng∆∞·ªùi d√πng c√≥ m·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi kh√°c nhau.")

# Custom CSS for better styling
st.markdown("""
<style>
    .card {background-color: #F3F4F6; border-radius: 8px; padding: 1.2rem; margin-bottom: 1rem; border-left: 4px solid #2563EB;}
    .card-title {font-size: 1.2rem; font-weight: 600; color: #1E40AF;}
</style>
""", unsafe_allow_html=True)


# ================================================================
# *_______________ [Read data and set up styles] ________________*
# ================================================================
# T·∫£i d·ªØ li·ªáu ƒë√£ l∆∞u tr·ªØ
cleaned_user_info_df: pd.DataFrame = load_user_data()
print(cleaned_user_info_df.columns)


# ================================================================
# *___________________ [Data transformation] ____________________*
# ================================================================
# T√≠nh t·ª∑ l·ªá t∆∞∆°ng t√°c
cleaned_user_info_df = calculate_engagement_ratio(
    cleaned_user_info_df)

# T√≠nh s·ªë l∆∞·ª£ng like trung b√¨nh tr√™n m·ªói video
cleaned_user_info_df = calculate_avg_likes_per_video(
    cleaned_user_info_df)

# X√°c ƒë·ªãnh c√°c ph√¢n v·ªã ƒë·ªÉ l·ªçc
percentiles = [0, 0.33, 0.66, 1]
low_followers, high_followers, low_engagement, high_engagement = \
    calculate_percentiles(cleaned_user_info_df, percentiles)


# ================================================================
# *_________________ [Display follower levels] __________________*
# ================================================================
# Feature cards in 3 columns
follower_col1, follower_col2, follower_col3 = st.columns(3)

# X√°c ƒë·ªãnh nh·ªØng ng∆∞·ªùi d√πng thu·ªôc nh√≥m ng∆∞·ªùi theo d√µi th·∫•p, trung b√¨nh v√† cao
with follower_col1:
    st.markdown(f"""
    <div class="card">
        <div class="card-title">ü•â Nh√≥m ng∆∞·ªùi theo d√µi th·∫•p</div>
        <p>Nh·ªØng ng∆∞·ªùi d√πng c√≥ s·ªë ng∆∞·ªùi theo d√µi th·∫•p h∆°n <b>{low_followers:,.0f}</b>.</p>
        <p>Nh·ªØng ng∆∞·ªùi d√πng n√†y c√≥ th·ªÉ l√† nh·ªØng ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu ho·∫∑c ch∆∞a c√≥ nhi·ªÅu n·ªôi dung n·ªïi b·∫≠t.</p>
    </div>
    """, unsafe_allow_html=True)
with follower_col2:
    st.markdown(f"""
    <div class="card">
        <div class="card-title">ü•à Nh√≥m ng∆∞·ªùi theo d√µi trung b√¨nh</div>
        <p>Nh·ªØng ng∆∞·ªùi d√πng c√≥ s·ªë ng∆∞·ªùi theo d√µi n·∫±m trong kho·∫£ng <b>{low_followers:,.0f} - {high_followers:,.0f}</b>.</p>
        <p>Nh·ªØng ng∆∞·ªùi d√πng n√†y c√≥ th·ªÉ l√† nh·ªØng ng∆∞·ªùi m·ªõi n·ªïi ho·∫∑c c√≥ ·∫£nh h∆∞·ªüng v·ª´a ph·∫£i tr√™n TikTok.</p>
    </div>
    """, unsafe_allow_html=True)
with follower_col3:
    st.markdown(f"""
    <div class="card">
        <div class="card-title">ü•á Nh√≥m ng∆∞·ªùi theo d√µi cao</div>
        <p>Nh·ªØng ng∆∞·ªùi d√πng c√≥ s·ªë ng∆∞·ªùi theo d√µi cao h∆°n <b>{high_followers:,.0f}</b>.</p>
        <p>Nh·ªØng ng∆∞·ªùi d√πng n√†y c√≥ th·ªÉ l√† nh·ªØng ng∆∞·ªùi n·ªïi ti·∫øng ho·∫∑c c√≥ ·∫£nh h∆∞·ªüng l·ªõn tr√™n TikTok.</p>
    </div>
    """, unsafe_allow_html=True)


# ================================================================
# *_________________ [UI for selecting filters] _________________*
# ================================================================
# Cho ng∆∞·ªùi d√πng ch·ªçn c√°c b·ªô l·ªçc
st.subheader(
    body="üîç Ch·ªçn b·ªô l·ªçc ƒë·ªÉ ph√¢n t√≠ch",
    help="Ch·ªçn c√°c b·ªô l·ªçc ƒë·ªÉ ph√¢n t√≠ch m·ª©c ƒë·ªô t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng TikTok.",
)
follower_level = st.selectbox(
    label=":blue[**Ch·ªçn m·ª©c ng∆∞·ªùi theo d√µi:**]",
    options=["Th·∫•p", "Trung b√¨nh", "Cao"]
)
# engagement_level = st.selectbox(
#     label="üî• :orange[**Ch·ªçn m·ª©c t∆∞∆°ng t√°c:**]",
#     options=["Th·∫•p", "Trung b√¨nh", "Cao"]
# )
engagement_level = None

# L·ªçc d·ªØ li·ªáu theo m·ª©c ƒë·ªô t∆∞∆°ng t√°c v√† ng∆∞·ªùi theo d√µi
filtered_df = filter_data(
    df=cleaned_user_info_df,
    follower_level=follower_level,
    engagement_level=engagement_level,
    low_followers=low_followers,
    high_followers=high_followers,
    low_engagement=low_engagement,
    high_engagement=high_engagement
)

# S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng
st.info(
    body=f"üìå S·ªë ng∆∞·ªùi d√πng trong nh√≥m c√≥ m·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi **{follower_level}** l√†: **{len(filtered_df):,}**",
)


# ================================================================
# *___________________ [Display basic stats] ____________________*
# ================================================================
# Hi·ªÉn th·ªã ti√™u ƒë·ªÅ cho bi·ªÉu ƒë·ªì
st.header(
    # body=f"Th√¥ng tin chi ti·∫øt v·ªÅ t∆∞∆°ng t√°c: S·ªë ng∆∞·ªùi theo d√µi {follower_level} & M·ª©c ƒë·ªô t∆∞∆°ng t√°c {engagement_level}",
    body=f"Th√¥ng tin chi ti·∫øt v·ªÅ m·ª©c ƒë·ªô t∆∞∆°ng t√°c c·ªßa c√°c TikToker c√≥ s·ªë ng∆∞·ªùi theo d√µi {follower_level}",
)

# Hi·ªÉn th·ªã s·ªë li·ªáu th·ªëng k√™
# S·ªë ng∆∞·ªùi d√πng
# stats.followerCount    | avg_likes_per_video    | avg_videos_per_week
# avg_plays_per_video    | avg_shares_per_video   | avg_hashtags_per_video
# avg_comments_per_video | avg_collects_per_video | avg_video_duration

# 22  avg_videos_per_week                 264 non-null    float64
# 23  avg_collects_per_video              264 non-null    float64
# 24  avg_comments_per_video              264 non-null    float64
# 25  avg_diggs_per_video                 264 non-null    float64
# 26  avg_plays_per_video                 264 non-null    float64
# 27  avg_shares_per_video                264 non-null    float64
# 28  avg_video_duration                  264 non-null    float64
# 29  avg_hashtags_per_video              264 non-null    float64
col1, col2, col3 = st.columns(spec=3, gap="small", border=False)
with col1:
    # S·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi trung b√¨nh
    st.metric(label="üëÄ S·ªë ng∆∞·ªùi theo d√µi",
              value=f"{filtered_df['stats.followerCount'].mean():,.0f}",
              border=True,
              )
    # S·ªë l∆∞·ª£t xem tr√™n m·ªói video
    st.metric(label="üëÅÔ∏è S·ªë l∆∞·ª£t xem tr√™n m·ªói video",
              value=f"{filtered_df['avg_plays_per_video'].mean():,.0f}",
              border=True,
              )
    # S·ªë l∆∞·ª£t b√¨nh lu·∫≠n tr√™n m·ªói video
    st.metric(label="üí¨ S·ªë b√¨nh lu·∫≠n tr√™n m·ªói video",
              value=f"{filtered_df['avg_comments_per_video'].mean():,.0f}",
              border=True,
              )
with col2:
    # S·ªë l∆∞·ª£ng th√≠ch trung b√¨nh tr√™n m·ªói video
    st.metric(label="üíñ S·ªë l∆∞·ª£t th√≠ch tr√™n m·ªói video",
              value=f"{filtered_df['avg_likes_per_video'].mean():,.0f}",
              border=True,
              )
    # S·ªë l∆∞·ª£t chia s·∫ª tr√™n m·ªói video
    st.metric(label="üîó S·ªë l∆∞·ª£t chia s·∫ª tr√™n m·ªói video",
              value=f"{filtered_df['avg_shares_per_video'].mean():,.0f}",
              border=True,
              )
    # S·ªë l∆∞·ª£t l∆∞u tr√™n m·ªói video
    st.metric(label="üíæ S·ªë l∆∞·ª£t l∆∞u tr√™n m·ªói video",
              value=f"{filtered_df['avg_collects_per_video'].mean():,.0f}",
              border=True,
              )
with col3:
    # S·ªë l∆∞·ª£ng video trung b√¨nh trong m·ªói tu·∫ßn (calendar emoji)
    st.metric(label="üìÖ S·ªë video m·ªói tu·∫ßn",
              value=f"{filtered_df['avg_videos_per_week'].mean():,.1f} ¬± {filtered_df['avg_videos_per_week'].std():,.1f}",
              border=True,
              )
    # S·ªë l∆∞·ª£ng hashtag tr√™n m·ªói video
    st.metric(label="üè∑Ô∏è S·ªë hashtag tr√™n m·ªói video",
              value=f"{filtered_df['avg_hashtags_per_video'].mean():,.1f} ¬± {filtered_df['avg_hashtags_per_video'].std():,.1f}",
              border=True,
              )
    # Th·ªùi l∆∞·ª£ng video trung b√¨nh
    st.metric(label="‚è±Ô∏è Th·ªùi l∆∞·ª£ng video (gi√¢y)",
              value=f"{filtered_df['avg_video_duration'].mean():,.1f} ¬± {filtered_df['avg_video_duration'].std():,.1f}",
              border=True,
              )


# ================================================================
# *___________________ [Engagement Analysis] ____________________*
# ================================================================
st.divider()
# Research question
st.header(":blue-background[:blue[C√¢u h·ªèi:]] V·ªõi c√πng m·ªôt ng∆∞·ª°ng s·ªë ng∆∞·ªùi theo d√µi nh·∫•t ƒë·ªãnh, li·ªáu vi·ªác tƒÉng s·ªë l∆∞·ª£ng video c√≥ th·ª±c s·ª± ƒëem l·∫°i nhi·ªÅu l∆∞·ª£t xem v√† l∆∞·ª£t t∆∞∆°ng t√°c h∆°n tr√™n m·ªói video, hay ch·ªâ ƒë∆°n thu·∫ßn t·∫°o ra nhi·ªÅu l∆∞·ª£t xem v√† t∆∞∆°ng t√°c t·ªïng?")
# Answer
with st.expander(label=":green[**:material/check_box: Tr·∫£ l·ªùi**]", expanded=False):
    st.markdown(f"""
    **K·∫øt qu·∫£ ph√¢n t√≠ch ch√≠nh v√† Nh·∫≠n x√©t t·ªïng qu√°t:**

    Qua ph√¢n t√≠ch m·ªëi t∆∞∆°ng quan gi·ªØa **T·ªïng s·ªë video ƒëƒÉng t·∫£i** v√† c√°c ch·ªâ s·ªë **L∆∞·ª£t xem/L∆∞·ª£t th√≠ch/L∆∞·ª£t b√¨nh lu·∫≠n/L∆∞·ª£t chia s·∫ª trung b√¨nh tr√™n m·ªói video**, m·ªôt xu h∆∞·ªõng nh·∫•t qu√°n ƒë√£ ƒë∆∞·ª£c quan s√°t v√† c√≥ th·ªÉ t·ªïng qu√°t h√≥a cho c·∫£ ba nh√≥m ng∆∞·ªùi d√πng (Th·∫•p, Trung b√¨nh, Cao v·ªÅ s·ªë ng∆∞·ªùi theo d√µi):

    1.  **M·ªëi t∆∞∆°ng quan ngh·ªãch gi·ªØa S·ªë l∆∞·ª£ng video v√† T∆∞∆°ng t√°c tr√™n m·ªói video:**

        - ƒê·ªëi v·ªõi t·∫•t c·∫£ c√°c ch·ªâ s·ªë t∆∞∆°ng t√°c ƒë∆∞·ª£c ph√¢n t√≠ch (L∆∞·ª£t xem, L∆∞·ª£t th√≠ch, L∆∞·ª£t b√¨nh lu·∫≠n, L∆∞·ª£t chia s·∫ª), ƒë·ªÅu t·ªìn t·∫°i m·ªëi t∆∞∆°ng quan **ngh·ªãch** v·ªõi t·ªïng s·ªë l∆∞·ª£ng video ƒëƒÉng t·∫£i. ƒêi·ªÅu n√†y c√≥ nghƒ©a l√†, nh√¨n chung, khi m·ªôt TikToker ƒëƒÉng t·∫£i **c√†ng nhi·ªÅu video**, th√¨ l∆∞·ª£ng t∆∞∆°ng t√°c trung b√¨nh (l∆∞·ª£t xem, l∆∞·ª£t th√≠ch, b√¨nh lu·∫≠n, chia s·∫ª) m√† **m·ªói video ri√™ng l·∫ª** nh·∫≠n ƒë∆∞·ª£c c√≥ xu h∆∞·ªõng **gi·∫£m xu·ªëng**.
        - M·ªëi t∆∞∆°ng quan ngh·ªãch n√†y th·ªÉ hi·ªán r√µ nh·∫•t ·ªü **L∆∞·ª£t xem** v√† **L∆∞·ª£t th√≠ch**, v√† y·∫øu d·∫ßn ·ªü **L∆∞·ª£t b√¨nh lu·∫≠n** v√† **L∆∞·ª£t chia s·∫ª**. ƒêi·ªÅu n√†y cho th·∫•y vi·ªác tƒÉng s·ªë l∆∞·ª£ng video t√°c ƒë·ªông m·∫°nh h∆°n ƒë·∫øn l∆∞·ª£t xem v√† l∆∞·ª£t th√≠ch tr√™n t·ª´ng video so v·ªõi l∆∞·ª£t b√¨nh lu·∫≠n v√† chia s·∫ª.
        - ƒê∆∞·ªùng xu h∆∞·ªõng tr√™n c√°c bi·ªÉu ƒë·ªì ph√¢n t√°n ƒë·ªÅu minh h·ªça xu h∆∞·ªõng gi·∫£m c·ªßa t∆∞∆°ng t√°c tr√™n m·ªói video khi s·ªë l∆∞·ª£ng video tƒÉng l√™n.

    2.  **S·ª± ƒë√°nh ƒë·ªïi gi·ªØa S·ªë l∆∞·ª£ng v√† Ch·∫•t l∆∞·ª£ng (tr√™n m·ªói video):**
        - K·∫øt qu·∫£ n√†y nh·∫•n m·∫°nh s·ª± ƒë√°nh ƒë·ªïi ti·ªÅm ·∫©n gi·ªØa s·ªë l∆∞·ª£ng v√† hi·ªáu qu·∫£ t∆∞∆°ng t√°c tr√™n t·ª´ng video. M·∫∑c d√π vi·ªác ƒëƒÉng nhi·ªÅu video h∆°n c√≥ th·ªÉ l√†m tƒÉng t·ªïng s·ªë l∆∞·ª£t xem/t∆∞∆°ng t√°c k√™nh nh·∫≠n ƒë∆∞·ª£c (do s·ªë l∆∞·ª£ng n·ªôi dung nhi·ªÅu h∆°n), n√≥ d∆∞·ªùng nh∆∞ l·∫°i l√†m "lo√£ng" m·ª©c ƒë·ªô t∆∞∆°ng t√°c trung b√¨nh m√† m·ªói video ƒë∆°n l·∫ª c√≥ th·ªÉ thu h√∫t.
        - Quan s√°t v·ªÅ c√°c TikToker c√≥ **√≠t video nh∆∞ng ƒë·∫°t l∆∞·ª£t t∆∞∆°ng t√°c trung b√¨nh tr√™n m·ªói video r·∫•t cao** (n·∫±m ·ªü g√≥c tr√™n b√™n tr√°i c·ªßa c√°c bi·ªÉu ƒë·ªì ph√¢n t√°n) c·ªßng c·ªë nh·∫≠n ƒë·ªãnh n√†y. Nh·ªØng nh√† s√°ng t·∫°o n√†y c√≥ th·ªÉ ƒëang t·∫≠p trung v√†o vi·ªác s·∫£n xu·∫•t n·ªôi dung ch·∫•t l∆∞·ª£ng cao, ƒë·ªôc ƒë√°o, ho·∫∑c t√¨m ƒë∆∞·ª£c th·ªã tr∆∞·ªùng ng√°ch hi·ªáu qu·∫£, gi√∫p t·ªëi ƒëa h√≥a hi·ªáu qu·∫£ t∆∞∆°ng t√°c c·ªßa t·ª´ng video m√† kh√¥ng c·∫ßn ƒëƒÉng b√†i ·ªì ·∫°t.

    **H√†m √Ω cho Nh√† s√°ng t·∫°o n·ªôi dung (T·ªïng qu√°t cho m·ªçi nh√≥m):**

    D·ª±a tr√™n m·ªëi t∆∞∆°ng quan ngh·ªãch ƒë∆∞·ª£c quan s√°t, chi·∫øn l∆∞·ª£c "ch·∫•t l∆∞·ª£ng h∆°n s·ªë l∆∞·ª£ng" (tr√™n m·ªói video) d∆∞·ªùng nh∆∞ l√† m·ªôt y·∫øu t·ªë quan tr·ªçng ƒë·ªÉ t·ªëi ƒëa h√≥a m·ª©c ƒë·ªô t∆∞∆°ng t√°c trung b√¨nh cho t·ª´ng n·ªôi dung.

    - **∆Øu ti√™n Ch·∫•t l∆∞·ª£ng N·ªôi dung:** Thay v√¨ ch·ªâ t·∫≠p trung v√†o vi·ªác tƒÉng t·∫ßn su·∫•t ƒëƒÉng b√†i ƒë·ªÉ c√≥ nhi·ªÅu n·ªôi dung h∆°n, c√°c nh√† s√°ng t·∫°o ·ªü m·ªçi nh√≥m (Th·∫•p, Trung b√¨nh, Cao) n√™n ∆∞u ti√™n ƒë·∫ßu t∆∞ th·ªùi gian, c√¥ng s·ª©c v√†o vi·ªác s·∫£n xu·∫•t c√°c video c√≥ ch·∫•t l∆∞·ª£ng cao, h·∫•p d·∫´n, ƒë·ªôc ƒë√°o v√† ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u.
    - **T·ªëi ∆∞u h√≥a T∆∞∆°ng t√°c tr√™n t·ª´ng Video:** Ch√∫ tr·ªçng v√†o c√°c y·∫øu t·ªë gi√∫p tƒÉng t∆∞∆°ng t√°c tr√™n m·ªói video nh∆∞ n·ªôi dung gi√° tr·ªã, h√¨nh ·∫£nh/√¢m thanh thu h√∫t, k√™u g·ªçi h√†nh ƒë·ªông (call-to-action) r√µ r√†ng, t∆∞∆°ng t√°c v·ªõi b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi xem, v.v..
    - **C√¢n b·∫±ng gi·ªØa S·ªë l∆∞·ª£ng v√† Ch·∫•t l∆∞·ª£ng:** Nh√† s√°ng t·∫°o c·∫ßn t√¨m ra s·ª± c√¢n b·∫±ng ph√π h·ª£p gi·ªØa t·∫ßn su·∫•t ƒëƒÉng b√†i ƒë·ªÅu ƒë·∫∑n v√† vi·ªác duy tr√¨ ch·∫•t l∆∞·ª£ng cho t·ª´ng video ƒë·ªÉ t·ªëi ∆∞u h√≥a c·∫£ t·ªïng t∆∞∆°ng t√°c k√™nh v√† hi·ªáu qu·∫£ c·ªßa t·ª´ng n·ªôi dung.

    **K·∫øt lu·∫≠n:**

    Ph√¢n t√≠ch n√†y cho th·∫•y m·ªôt xu h∆∞·ªõng r√µ r√†ng: vi·ªác tƒÉng t·ªïng s·ªë l∆∞·ª£ng video ƒëƒÉng t·∫£i c√≥ m·ªëi li√™n h·ªá ti√™u c·ª±c v·ªõi hi·ªáu qu·∫£ t∆∞∆°ng t√°c trung b√¨nh tr√™n m·ªói video. ƒêi·ªÅu n√†y nh·∫•n m·∫°nh t·∫ßm quan tr·ªçng c·ªßa ch·∫•t l∆∞·ª£ng n·ªôi dung v√† chi·∫øn l∆∞·ª£c t·ªëi ∆∞u h√≥a t·ª´ng video ƒë·ªëi v·ªõi c√°c nh√† s√°ng t·∫°o TikTok, b·∫•t k·ªÉ h·ªç ƒëang ·ªü m·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi n√†o.
    """)

# Hi·ªÉn th·ªã tr·ª±c quan v·ªõi v√≤ng quay ch·ªù
with st.spinner(text="ƒêang t·∫£i bi·ªÉu ƒë·ªì...", show_time=True):
    row1_col1, row1_col2 = st.columns(2, gap="small", border=True)
    with row1_col1:
        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa
        # s·ªë video v√† s·ªë l∆∞·ª£t xem tr√™n m·ªói video
        scatter_fig1, corr1 = plot_engagement_scatter(
            df=filtered_df, x_col="stats.videoCount",
            y_col="avg_plays_per_video", color="#FFD2A0"
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(scatter_fig1, use_container_width=True)
    with row1_col2:
        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa
        # s·ªë video v√† s·ªë l∆∞·ª£t th√≠ch tr√™n m·ªói video
        scatter_fig2, corr2 = plot_engagement_scatter(
            df=filtered_df, x_col="stats.videoCount",
            y_col="avg_diggs_per_video", color="#B7B1F2"
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(scatter_fig2, use_container_width=True)

    row2_col1, row2_col2 = st.columns(2, gap="small", border=True)
    with row2_col1:
        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa
        # s·ªë video v√† s·ªë l∆∞·ª£t b√¨nh lu·∫≠n tr√™n m·ªói video
        scatter_fig3, corr3 = plot_engagement_scatter(
            df=filtered_df, x_col="stats.videoCount",
            y_col="avg_comments_per_video", color="#91e3fa"
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(scatter_fig3, use_container_width=True)
    with row2_col2:
        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa
        # s·ªë video v√† s·ªë l∆∞·ª£t chia s·∫ª tr√™n m·ªói video
        scatter_fig4, corr4 = plot_engagement_scatter(
            df=filtered_df, x_col="stats.videoCount",
            y_col="avg_shares_per_video", color="#ffa9d0"
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(scatter_fig4, use_container_width=True)

# Function to create a specific prompt for a single chart


def create_single_chart_prompt(chart_type: str, metric_name: str, corr: float, df: pd.DataFrame) -> str:
    return f"""
    H√£y ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa 'S·ªë l∆∞·ª£ng video' c·ªßa TikToker v·ªõi '{metric_name}' d·ª±a tr√™n bi·ªÉu ƒë·ªì ph√¢n t√°n n√†y.
    H·ªá s·ªë t∆∞∆°ng quan (œÅ = {corr:.2f}) cho bi·∫øt ƒëi·ªÅu g√¨ v·ªÅ m·ªëi quan h·ªá n√†y?

    Th√¥ng tin b·ªï sung v·ªÅ d·ªØ li·ªáu:
    - T·∫≠p d·ªØ li·ªáu ƒëang ph√¢n t√≠ch g·ªìm {len(df):,} TikToker c√≥ m·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi '{follower_level}'
    - S·ªë ng∆∞·ªùi theo d√µi trung b√¨nh c·ªßa nh√≥m n√†y: {df['stats.followerCount'].mean():,.0f} ng∆∞·ªùi

    H√£y ph√¢n t√≠ch c√°c ƒëi·ªÉm sau:
    1. H·ªá s·ªë t∆∞∆°ng quan n√†y th·ªÉ hi·ªán m·ªëi quan h·ªá nh∆∞ th·∫ø n√†o gi·ªØa s·ªë l∆∞·ª£ng video v√† {metric_name.lower()}?
    2. ƒê∆∞·ªùng xu h∆∞·ªõng (trend line) m√†u ƒë·ªè tr√™n bi·ªÉu ƒë·ªì th·ªÉ hi·ªán xu h∆∞·ªõng g√¨?
    3. Nh·ªØng TikToker c√≥ √≠t video nh∆∞ng {metric_name.lower()} cao (g√≥c tr√™n b√™n tr√°i c·ªßa bi·ªÉu ƒë·ªì) c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨ ƒë√°ng ch√∫ √Ω?
    4. Chi·∫øn l∆∞·ª£c n√†o ph√π h·ª£p v·ªõi nh√≥m ng∆∞·ªùi d√πng n√†y d·ª±a tr√™n ph√¢n t√≠ch?

    Vui l√≤ng cung c·∫•p ph√¢n t√≠ch ng·∫Øn g·ªçn, s√∫c t√≠ch, kho·∫£ng 100-150 t·ª´.
    """


# Generate and display AI insights for each chart
with row1_col1:
    view_prompt = create_single_chart_prompt(
        chart_type="l∆∞·ª£t xem",
        metric_name="S·ªë l∆∞·ª£t xem tr√™n m·ªói video",
        corr=corr1,
        df=filtered_df
    )
    display_AI_generated_insights(
        prompt=view_prompt,
        api_key="AIzaSyAdbNfxlQQQjKSgAcOjQt-XUwil-FMl6V8",
        print_to_console=False, expanded=False
    )

with row1_col2:
    like_prompt = create_single_chart_prompt(
        chart_type="l∆∞·ª£t th√≠ch",
        metric_name="S·ªë l∆∞·ª£t th√≠ch tr√™n m·ªói video",
        corr=corr2,
        df=filtered_df
    )
    display_AI_generated_insights(
        prompt=like_prompt,
        api_key="AIzaSyCSGNpc1IlacTUwN31TKWms0RzF_we17vk",
        print_to_console=False, expanded=False
    )

with row2_col1:
    comment_prompt = create_single_chart_prompt(
        chart_type="l∆∞·ª£t b√¨nh lu·∫≠n",
        metric_name="S·ªë l∆∞·ª£t b√¨nh lu·∫≠n tr√™n m·ªói video",
        corr=corr3,
        df=filtered_df
    )
    display_AI_generated_insights(
        prompt=comment_prompt,
        api_key="AIzaSyAHiAgc7tIuq4YKtswB-AaHa0W9eqQ5jGw",
        print_to_console=False, expanded=False
    )

with row2_col2:
    share_prompt = create_single_chart_prompt(
        chart_type="l∆∞·ª£t chia s·∫ª",
        metric_name="S·ªë l∆∞·ª£t chia s·∫ª tr√™n m·ªói video",
        corr=corr4,
        df=filtered_df
    )
    display_AI_generated_insights(
        prompt=share_prompt,
        api_key="AIzaSyCnUToo7FRJn8v3BwMOt3FWwrDDFf2b4UI",
        print_to_console=False, expanded=False
    )


# ================================================================
# *__________ [Comparative Analysis by Follower Level] __________*
# ================================================================
st.divider()
# Research question
st.header(":blue-background[:blue[C√¢u h·ªèi:]] C√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™ v·ªÅ :blue[t·∫ßn su·∫•t ƒëƒÉng t·∫£i video m·ªói tu·∫ßn], :blue[s·ªë l∆∞·ª£ng hashtag trung b√¨nh tr√™n m·ªói video] v√† :blue[th·ªùi l∆∞·ª£ng video trung b√¨nh] gi·ªØa c√°c nh√≥m ng∆∞·ªùi d√πng c√≥ s·ªë ng∆∞·ªùi theo d√µi th·∫•p, trung b√¨nh v√† cao kh√¥ng?")
# Answer
with st.expander(label=":green[**:material/check_box: Tr·∫£ l·ªùi**]", expanded=False):
    st.markdown(f"""
    **K·∫øt qu·∫£ ph√¢n t√≠ch ch√≠nh:**

    1.  **V·ªÅ S·ªë video ƒëƒÉng t·∫£i m·ªói tu·∫ßn:**

        - **K·∫øt qu·∫£ ch√≠nh:** Ph√¢n t√≠ch cho th·∫•y **kh√¥ng c√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™** v·ªÅ s·ªë l∆∞·ª£ng video ƒëƒÉng t·∫£i m·ªói tu·∫ßn gi·ªØa ba nh√≥m ng∆∞·ªùi d√πng d·ª±a tr√™n s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi (p-value = 0.0856 > 0.05).
        - **Nh·∫≠n x√©t xu h∆∞·ªõng:** M·∫∑c d√π gi√° tr·ªã trung b√¨nh c√≥ tƒÉng nh·∫π t·ª´ nh√≥m Th·∫•p (4.41 video/tu·∫ßn) l√™n nh√≥m Cao (4.66 video/tu·∫ßn), s·ª± kh√°c bi·ªát n√†y kh√¥ng ƒë·ªß l·ªõn v√† ƒë√°ng tin c·∫≠y ƒë·ªÉ k·∫øt lu·∫≠n r·∫±ng s·ªë ng∆∞·ªùi theo d√µi hi·ªán t·∫°i l√† y·∫øu t·ªë quy·∫øt ƒë·ªãnh ch√≠nh ƒë·∫øn t·∫ßn su·∫•t ƒëƒÉng video.
        - **√ù nghƒ©a:** K·∫øt qu·∫£ n√†y g·ª£i √Ω r·∫±ng c√°c nh√† s√°ng t·∫°o n·ªôi dung kh√¥ng nh·∫•t thi·∫øt ph·∫£i t·∫≠p trung v√†o vi·ªác tƒÉng s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi hi·ªán t·∫°i ƒë·ªÉ c·∫£i thi·ªán t·∫ßn su·∫•t ƒëƒÉng b√†i. C√°c y·∫øu t·ªë kh√°c c√≥ th·ªÉ ƒë√≥ng vai tr√≤ quan tr·ªçng h∆°n trong vi·ªác ƒë·ªãnh h√¨nh th√≥i quen ƒëƒÉng t·∫£i.

    2.  **V·ªÅ S·ªë l∆∞·ª£ng hashtag tr√™n m·ªói video:**

        - **K·∫øt qu·∫£ ch√≠nh:** Ph√¢n t√≠ch ch·ªâ ra **c√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™** v·ªÅ s·ªë l∆∞·ª£ng hashtag trung b√¨nh tr√™n m·ªói video gi·ªØa c√°c nh√≥m ng∆∞·ªùi d√πng (p-value = 0.0000 < 0.05).
        - **Nh·∫≠n x√©t xu h∆∞·ªõng:** Nh√≥m ng∆∞·ªùi d√πng c√≥ s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi **Th·∫•p** s·ª≠ d·ª•ng trung b√¨nh s·ªë hashtag **cao nh·∫•t** (7.46 hashtag/video), trong khi nh√≥m **Cao** s·ª≠ d·ª•ng s·ªë hashtag **th·∫•p nh·∫•t** (5.73 hashtag/video).
        - **√ù nghƒ©a:** Xu h∆∞·ªõng n√†y c√≥ th·ªÉ ph·∫£n √°nh chi·∫øn l∆∞·ª£c c·ªßa ng∆∞·ªùi d√πng. Nh·ªØng ng∆∞·ªùi c√≥ √≠t ng∆∞·ªùi theo d√µi c√≥ xu h∆∞·ªõng s·ª≠ d·ª•ng nhi·ªÅu hashtag h∆°n nh·∫±m tƒÉng kh·∫£ nƒÉng kh√°m ph√° video c·ªßa h·ªç b·ªüi ƒë·ªëi t∆∞·ª£ng kh√°n gi·∫£ m·ªõi. Ng∆∞·ª£c l·∫°i, nh·ªØng ng∆∞·ªùi ƒë√£ c√≥ l∆∞·ª£ng ng∆∞·ªùi theo d√µi l·ªõn c√≥ th·ªÉ √≠t ph·ª• thu·ªôc v√†o hashtag h∆°n.

    3.  **V·ªÅ Th·ªùi l∆∞·ª£ng video:**
        - **K·∫øt qu·∫£ ch√≠nh:** Ph√¢n t√≠ch x√°c nh·∫≠n **c√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™** v·ªÅ th·ªùi l∆∞·ª£ng video trung b√¨nh gi·ªØa ba nh√≥m ng∆∞·ªùi d√πng theo s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi (p-value = 0.0000 < 0.05).
        - **Nh·∫≠n x√©t xu h∆∞·ªõng:** Th·ªùi l∆∞·ª£ng video trung b√¨nh c√≥ xu h∆∞·ªõng **tƒÉng l√™n ƒë√°ng k·ªÉ** khi s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi tƒÉng. Nh√≥m Th·∫•p c√≥ th·ªùi l∆∞·ª£ng trung b√¨nh ng·∫Øn nh·∫•t (59.01 gi√¢y), nh√≥m Trung b√¨nh d√†i h∆°n (74.48 gi√¢y), v√† nh√≥m Cao c√≥ th·ªùi l∆∞·ª£ng trung b√¨nh d√†i nh·∫•t (103.56 gi√¢y).
        - **√ù nghƒ©a:** K·∫øt qu·∫£ n√†y ·ªßng h·ªô quan s√°t r·∫±ng nh·ªØng ng∆∞·ªùi s√°ng t·∫°o c√≥ l∆∞·ª£ng ng∆∞·ªùi theo d√µi l·ªõn h∆°n c√≥ xu h∆∞·ªõng t·∫°o ra c√°c video c√≥ th·ªùi l∆∞·ª£ng d√†i h∆°n. ƒêi·ªÅu n√†y c√≥ th·ªÉ li√™n quan ƒë·∫øn vi·ªác ƒë·∫ßu t∆∞ nhi·ªÅu h∆°n v√†o n·ªôi dung, kh·∫£ nƒÉng gi·ªØ ch√¢n kh√°n gi·∫£ l√¢u h∆°n, ho·∫∑c x√¢y d·ª±ng uy t√≠n th√¥ng qua n·ªôi dung chuy√™n s√¢u h∆°n.

    **T√≥m t·∫Øt v√† H√†m √Ω:**

    K·∫øt qu·∫£ ph√¢n t√≠ch cho th·∫•y trong ba ƒë·∫∑c ƒëi·ªÉm ƒë∆∞·ª£c kh·∫£o s√°t, **s·ªë l∆∞·ª£ng hashtag s·ª≠ d·ª•ng** v√† **th·ªùi l∆∞·ª£ng video** c√≥ m·ªëi li√™n h·ªá c√≥ √Ω nghƒ©a th·ªëng k√™ v·ªõi s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi. C·ª• th·ªÉ, ng∆∞·ªùi d√πng c√≥ √≠t ng∆∞·ªùi theo d√µi c√≥ xu h∆∞·ªõng d√πng nhi·ªÅu hashtag h∆°n v√† t·∫°o video ng·∫Øn h∆°n, trong khi ng∆∞·ªùi d√πng c√≥ nhi·ªÅu ng∆∞·ªùi theo d√µi l·∫°i d√πng √≠t hashtag h∆°n v√† t·∫°o video d√†i h∆°n. Ng∆∞·ª£c l·∫°i, **t·∫ßn su·∫•t ƒëƒÉng t·∫£i video m·ªói tu·∫ßn** l·∫°i kh√¥ng cho th·∫•y s·ª± kh√°c bi·ªát ƒë√°ng k·ªÉ gi·ªØa c√°c nh√≥m.

    ƒê·ªëi v·ªõi c√°c nh√† s√°ng t·∫°o n·ªôi dung, nh·ªØng ph√°t hi·ªán n√†y g·ª£i √Ω r·∫±ng:

    - Vi·ªác tƒÉng t·∫ßn su·∫•t ƒëƒÉng video c√≥ th·ªÉ kh√¥ng tr·ª±c ti·∫øp ph·ª• thu·ªôc v√†o vi·ªác tƒÉng s·ªë ng∆∞·ªùi theo d√µi hi·ªán c√≥.
    - Hashtag c√≥ th·ªÉ l√† c√¥ng c·ª• quan tr·ªçng h∆°n cho nh·ªØng ng∆∞·ªùi d√πng m·ªõi ho·∫∑c c√≥ √≠t ng∆∞·ªùi theo d√µi ƒë·ªÉ tƒÉng kh·∫£ nƒÉng hi·ªÉn th·ªã.
    - Th·ªùi l∆∞·ª£ng video c√≥ th·ªÉ l√† m·ªôt ƒë·∫∑c ƒëi·ªÉm ph√°t tri·ªÉn theo qu√° tr√¨nh x√¢y d·ª±ng l∆∞·ª£ng kh√°n gi·∫£, khi ng∆∞·ªùi s√°ng t·∫°o c√≥ th·ªÉ ƒë·ªß kh·∫£ nƒÉng v√† l√Ω do ƒë·ªÉ t·∫°o ra n·ªôi dung d√†i h∆°n v√† gi·ªØ ch√¢n ng∆∞·ªùi xem hi·ªáu qu·∫£ h∆°n.
                """)

st.header("Ph√¢n t√≠ch ch·ªâ s·ªë theo m·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi")


def categorize_by_followers(df: pd.DataFrame) -> pd.DataFrame:
    """ Define follower levels based on follower count """

    # Calculate follower percentiles
    low_threshold = df['stats.followerCount'].quantile(0.33)
    high_threshold = df['stats.followerCount'].quantile(0.66)

    # Create a new column for follower level
    df_with_levels = df.copy()
    df_with_levels['follower_level'] = 'Trung b√¨nh'
    df_with_levels.loc[df_with_levels['stats.followerCount']
                       <= low_threshold, 'follower_level'] = 'Th·∫•p'
    df_with_levels.loc[df_with_levels['stats.followerCount']
                       > high_threshold, 'follower_level'] = 'Cao'

    return df_with_levels


# Add follower levels to the dataframe
user_df_with_levels = categorize_by_followers(cleaned_user_info_df)

# Create filter for metric selection
metric_options = {
    "S·ªë video m·ªói tu·∫ßn": "avg_videos_per_week",
    "S·ªë hashtag tr√™n m·ªói video": "avg_hashtags_per_video",
    "Th·ªùi l∆∞·ª£ng video (gi√¢y)": "avg_video_duration"
}

selected_metric_name = st.selectbox(
    "Ch·ªçn ch·ªâ s·ªë ƒë·ªÉ ph√¢n t√≠ch:",
    options=list(metric_options.keys())
)

selected_metric_col = metric_options[selected_metric_name]

# Create groups for the analysis
low_followers = user_df_with_levels[user_df_with_levels['follower_level'] == 'Th·∫•p']
medium_followers = user_df_with_levels[user_df_with_levels['follower_level'] == 'Trung b√¨nh']
high_followers = user_df_with_levels[user_df_with_levels['follower_level'] == 'Cao']

# Create a boxplot to visualize the distribution of the selected metric by follower level
fig_box = go.Figure()

for level, color in zip(['Th·∫•p', 'Trung b√¨nh', 'Cao'], ['#FF9999', '#66B2FF', '#99CC99']):
    group_data = user_df_with_levels[user_df_with_levels['follower_level']
                                     == level][selected_metric_col]
    fig_box.add_trace(go.Box(
        y=group_data,
        name=f'{level}',
        boxpoints='all',
        jitter=0.3,
        pointpos=-1.8,
        marker_color=color,
        marker=dict(size=3),
        boxmean=True,
    ))

fig_box.update_layout(
    title=f'Ph√¢n ph·ªëi {selected_metric_name}<br />theo m·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi',
    xaxis_title='M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi',
    yaxis_title=selected_metric_name,
    plot_bgcolor='#fafafa',
    boxmode="overlay",
    showlegend=False,

    height=450,
    title_y=0.95,
    title_yanchor="top",
    title_font_size=20,
    title_font_color=DARK_GRAY,
    title_font_family="Arial",
)

# Create a bar chart to compare means
metric_means = user_df_with_levels.groupby(
    'follower_level')[selected_metric_col].mean().reset_index()
metric_std = user_df_with_levels.groupby(
    'follower_level')[selected_metric_col].std().reset_index()

fig_bar = px.bar(
    metric_means,
    x='follower_level',
    y=selected_metric_col,
    color='follower_level',
    color_discrete_map={'Th·∫•p': '#FF9999',
                        'Trung b√¨nh': '#66B2FF', 'Cao': '#99CC99'},
    labels={'follower_level': 'M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi',
            selected_metric_col: selected_metric_name},
    title=f'{selected_metric_name} trung b√¨nh<br />theo m·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi',
    # Sort x-axis of barchart by "Th·∫•p", "Trung b√¨nh", "Cao"
    category_orders={
        'follower_level': ['Th·∫•p', 'Trung b√¨nh', 'Cao']
    },
)

# Annotation for the mean value of each bar
for i, row in metric_means.iterrows():
    fig_bar.add_annotation(
        x=row['follower_level'],
        y=row[selected_metric_col],
        text=f" {row[selected_metric_col]:.2f} ",
        showarrow=False,
        font=dict(size=12, color=DARK_GRAY),
        bgcolor='white',
        bordercolor=DARK_GRAY,
        borderwidth=1,
    )

# Add error bars
fig_bar.update_traces(
    error_y=dict(
        type='data',
        array=metric_std[selected_metric_col],
        visible=True
    ),
    textposition='none',
)

fig_bar.update_layout(
    xaxis_title='M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi',
    yaxis_title=selected_metric_name,
    plot_bgcolor='#fafafa',
    showlegend=False,

    height=450,
    title_y=0.95,
    title_yanchor="top",
    title_font_size=20,
    title_font_color=DARK_GRAY,
    title_font_family="Arial",
)

# Display visualizations
col1, col2 = st.columns(spec=2, gap="small", border=True)
with col1:
    st.plotly_chart(fig_box, use_container_width=True)
with col2:
    st.plotly_chart(fig_bar, use_container_width=True)

# Display statistical test results
st.subheader("K·∫øt qu·∫£ ki·ªÉm ƒë·ªãnh th·ªëng k√™")

# Count samples in each group
group_counts = user_df_with_levels.groupby(
    'follower_level')[selected_metric_col].count().reset_index()
group_counts.columns = ['M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi', 'S·ªë l∆∞·ª£ng m·∫´u']

# Create table of descriptive statistics
desc_stats = user_df_with_levels.groupby('follower_level')[selected_metric_col].agg([
    'mean', 'std', 'min', 'max']).reset_index()
desc_stats.columns = ['M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi',
                      'Trung b√¨nh', 'ƒê·ªô l·ªách chu·∫©n', 'T·ªëi thi·ªÉu', 'T·ªëi ƒëa']

# Format the numeric columns to 2 decimal places
for col in ['Trung b√¨nh', 'ƒê·ªô l·ªách chu·∫©n', 'T·ªëi thi·ªÉu', 'T·ªëi ƒëa']:
    desc_stats[col] = desc_stats[col].round(2)

# Merge the two tables
desc_stats = pd.merge(
    left=group_counts, right=desc_stats, on='M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi', how='left'
)

# Reorder the DataFrame from "Th·∫•p" - "Trung b√¨nh" - "Cao"
desc_stats = pd.concat(
    [desc_stats[desc_stats['M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi'] == 'Th·∫•p'],
     desc_stats[desc_stats['M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi'] == 'Trung b√¨nh'],
     desc_stats[desc_stats['M·ª©c ƒë·ªô ng∆∞·ªùi theo d√µi'] == 'Cao']],
    ignore_index=True
)

# Display final tables
st.dataframe(desc_stats, hide_index=True)

# Perform statistical test (Kruskal-Wallis)
try:
    # Extract data for each group, dropping NaN values
    group1 = low_followers[selected_metric_col].dropna()
    group2 = medium_followers[selected_metric_col].dropna()
    group3 = high_followers[selected_metric_col].dropna()

    # Perform Kruskal-Wallis test (non-parametric alternative to ANOVA)
    stat, p_value = stats.kruskal(group1, group2, group3)

    # Display test results
    st.metric(
        label="Ki·ªÉm ƒë·ªãnh Kruskal-Wallis",
        value=f"p-value = {p_value:.4f}",
        delta="C√≥ s·ª± kh√°c bi·ªát √Ω nghƒ©a" if p_value < 0.05 else "Kh√¥ng c√≥ s·ª± kh√°c bi·ªát √Ω nghƒ©a"
    )

    # Display explanation based on p-value
    if p_value < 0.05:
        st.success(f"""
        **K·∫øt lu·∫≠n:** C√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™ v·ªÅ {selected_metric_name} 
        gi·ªØa c√°c nh√≥m ng∆∞·ªùi d√πng c√≥ s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi kh√°c nhau (p = {p_value:.4f} < 0.05).
        """)

        # Report which group has highest/lowest mean
        highest_group = metric_means.loc[metric_means[selected_metric_col].idxmax(
        )]
        lowest_group = metric_means.loc[metric_means[selected_metric_col].idxmin(
        )]

        st.markdown(f"""
        - Nh√≥m c√≥ {selected_metric_name} cao nh·∫•t: **{highest_group['follower_level']}** ({highest_group[selected_metric_col]:.2f})
        - Nh√≥m c√≥ {selected_metric_name} th·∫•p nh·∫•t: **{lowest_group['follower_level']}** ({lowest_group[selected_metric_col]:.2f})
        """)
    else:
        st.info(f"""
        **K·∫øt lu·∫≠n:** Kh√¥ng c√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™ v·ªÅ {selected_metric_name} 
        gi·ªØa c√°c nh√≥m ng∆∞·ªùi d√πng c√≥ s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi kh√°c nhau (p = {p_value:.4f} > 0.05).
        """)

    # Generate insights prompt for AI
    analysis_prompt = f"""
    H√£y ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi c·ªßa ng∆∞·ªùi d√πng TikTok v√† {selected_metric_name}.
    K·∫øt qu·∫£ ki·ªÉm ƒë·ªãnh Kruskal-Wallis cho p-value = {p_value:.4f}.

    C√°c th·ªëng k√™ m√¥ t·∫£:
    - Nh√≥m ng∆∞·ªùi theo d√µi Th·∫•p: Trung b√¨nh {group1.mean():.2f} (ƒë·ªô l·ªách chu·∫©n {group1.std():.2f})
    - Nh√≥m ng∆∞·ªùi theo d√µi Trung b√¨nh: Trung b√¨nh {group2.mean():.2f} (ƒë·ªô l·ªách chu·∫©n {group2.std():.2f})
    - Nh√≥m ng∆∞·ªùi theo d√µi Cao: Trung b√¨nh {group3.mean():.2f} (ƒë·ªô l·ªách chu·∫©n {group3.std():.2f})

    D·ª±a tr√™n k·∫øt qu·∫£ tr√™n, h√£y cung c·∫•p nh·∫≠n x√©t v·ªÅ m·ªëi quan h·ªá gi·ªØa s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi v√† {selected_metric_name}. Nh·∫≠n x√©t n√™n bao g·ªìm c√°c ƒëi·ªÉm sau:
    1. Li·ªáu c√≥ s·ª± kh√°c bi·ªát c√≥ √Ω nghƒ©a th·ªëng k√™ gi·ªØa c√°c nh√≥m kh√¥ng?
    2. N·∫øu c√≥, nh√≥m n√†o c√≥ {selected_metric_name} cao nh·∫•t/th·∫•p nh·∫•t?
    3. √ù nghƒ©a c·ªßa k·∫øt qu·∫£ n√†y ƒë·ªëi v·ªõi c√°c nh√† s√°ng t·∫°o n·ªôi dung tr√™n TikTok?
    4. C√≥ th·ªÉ r√∫t ra chi·∫øn l∆∞·ª£c g√¨ t·ª´ ph√¢n t√≠ch n√†y?

    H√£y ƒë∆∞a ra nh·∫≠n x√©t ng·∫Øn g·ªçn, d∆∞·ªõi 400 t·ª´.
    """

    # Display AI-generated insights
    display_AI_generated_insights(
        prompt=analysis_prompt,
        api_key="AIzaSyCnUToo7FRJn8v3BwMOt3FWwrDDFf2b4UI"
    )

except Exception as e:
    st.error(f"L·ªói khi th·ª±c hi·ªán ki·ªÉm ƒë·ªãnh th·ªëng k√™: {str(e)}")
    st.warning(
        "Kh√¥ng th·ªÉ th·ª±c hi·ªán ki·ªÉm ƒë·ªãnh th·ªëng k√™ do d·ªØ li·ªáu kh√¥ng ƒë·ªß ho·∫∑c kh√¥ng ph√π h·ª£p.")
