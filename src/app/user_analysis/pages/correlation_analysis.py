import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from google import genai
from typing import Dict, Any, List
from plotly import figure_factory
# from user_analysis.utils.footer import display_footer


# ================================================================
# *_____________________ [Define constants] _____________________*
# ================================================================
# H·∫±ng s·ªë
COLORS_RGBA: List[str] = [
    "rgba(99, 110, 250, 0.9)",  # Xanh d∆∞∆°ng
    "rgba(239, 85, 59, 0.8)",   # ƒê·ªè
    "rgba(0, 204, 150, 0.7)"    # Xanh l√°
]
METRICS: List[str] = [
    "stats.followerCount", "stats.heartCount", "stats.videoCount"]
METRIC_LABELS: List[str] = [
    "S·ªë ng∆∞·ªùi theo d√µi", "S·ªë l∆∞·ª£t th√≠ch", "S·ªë l∆∞·ª£ng video"]
DARK_GRAY: str = "#444444"
# CLEANED_USER_DATA_FILE: str = "data/interim/cleaned_user_info.csv"
CLEANED_USER_DATA_FILE: str = "data/processed/cleaned_user_info.parquet"


# ================================================================
# *____________________ [Utility functions] _____________________*
# ================================================================
def apply_styles():
    """ Thay ƒë·ªïi CSS cho web page """
    st.markdown("""
        <style>
        .main-title {
            font-size: 28px;
            font-weight: bold;
            color: #FFFFFF;
            text-align: center;
            padding-bottom: 20px;
        }
        .subheader {
            font-size: 20px;
            font-weight: bold;
            color: #E0E0E0;
            padding-top: 10px;
        }
        .stButton>button {
            background-color: #4CAF50;
            color: white;
            border-radius: 5px;
        }
        .stExpander {
            border-radius: 10px;
            padding: 10px;
        }
        </style>
    """, unsafe_allow_html=True)


@st.cache_data(show_spinner=False)
def get_correlation_matrix(df: pd.DataFrame) -> pd.DataFrame:
    """ T√≠nh to√°n ma tr·∫≠n t∆∞∆°ng quan """
    return df.corr()


# @st.cache_data
def select_columns(df: pd.DataFrame, columns: List[str]) -> pd.DataFrame:
    """ Ch·ªçn c√°c c·ªôt t·ª´ DataFrame """
    return df[columns]


# H√†m gi√∫p t·∫°o nh·∫≠n x√©t v√† r√∫t ra insights t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch v√† tr·ª±c quan h√≥a d·ªØ li·ªáu
@st.cache_data(show_spinner=False)
def generate_insights(prompt: str, api_key: str) -> str:
    """ T·∫°o nh·∫≠n x√©t t·ª´ Gemini API """
    # Generate content
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model="gemini-2.0-flash-lite",
            contents=[prompt]
        )
        return response.text
    except Exception as e:
        print(f"L·ªói khi t·∫°o n·ªôi dung: {e}")
        return ""


# T·∫°o 1 module d√†nh ri√™ng cho vi·ªác r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì
# v√† th·ªÉ hi·ªán l√™n trang web
def display_AI_generated_insights(prompt: str, api_key: str) -> None:
    """ End-to-end module ƒë·ªÉ r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì v√† hi·ªán th·ªã l√™n trang web """

    with st.expander(
            label=":blue-background[:blue[**:material/auto_awesome: Nh·∫≠n x√©t t·ª´ AI**]]",
            expanded=True):
        # T·∫°o nh·∫≠n x√©t t·ª´ Gemini API
        with st.spinner(text="ƒêang t·∫°o nh·∫≠n x√©t t·ª´ AI...", show_time=True):
            insights = generate_insights(prompt=prompt, api_key=api_key)
            if not insights:
                st.error("Hi·ªán t·∫°i h·ªá th·ªëng ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau.")
            else:
                st.markdown(insights)


# T·∫£i d·ªØ li·ªáu
@st.cache_data
def load_user_data() -> pd.DataFrame:
    """ T·∫£i v√† l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t·ª´ t·ªáp """
    if CLEANED_USER_DATA_FILE.endswith(".csv"):
        return pd.read_csv(CLEANED_USER_DATA_FILE)
    elif CLEANED_USER_DATA_FILE.endswith(".parquet"):
        # ƒê·ªçc t·ªáp Parquet
        return pd.read_parquet(CLEANED_USER_DATA_FILE)

    return None


@st.cache_data
def create_scatter_matrix(df: pd.DataFrame, template: str) -> go.Figure:
    """ T·∫°o m·ªôt bi·ªÉu ƒë·ªì ma tr·∫≠n ph√¢n t√°n ch·ªâ hi·ªÉn th·ªã tam gi√°c d∆∞·ªõi b√™n tr√°i """

    df = select_columns(df, METRICS)
    density = px.histogram(df, x=[0, 1, 2], histnorm='probability density')
    df_corr = get_correlation_matrix(df)

    fig = figure_factory.create_scatterplotmatrix(
        df=df, diag='histogram',
        height=600,
    )

    # 1.How can I specify a single color for all the plots?
    for i in range(9):
        fig.data[i]['marker']['color'] = "rgba(99, 110, 250, 0.9)"
        fig.data[i]['marker']['opacity'] = 0.8
        fig.data[i]['marker']['line']['width'] = 0.5
        fig.data[i]['marker']['line']['color'] = "rgba(0, 0, 0, 0.5)"

    # 4.Is there a way to include the correlation coefficient (say, computed from df.corr())
    # in the upper right corner of the non-diagonal plots?
    for r, x, y in zip(df_corr.values.flatten(),
                       ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9'],
                       ['y1', 'y2', 'y3', 'y4', 'y5', 'y6', 'y7', 'y8', 'y9']):
        if r == 1.0:
            pass
        else:
            # Map to column names
            if x in ['x1', 'x2', 'x3']:
                col_y = METRICS[0]
                col_x = METRICS[int(x[-1]) - 1]
            elif x in ['x4', 'x5', 'x6']:
                col_y = METRICS[1]
                col_x = METRICS[int(x[-1]) - 4]
            elif x in ['x7', 'x8', 'x9']:
                col_y = METRICS[2]
                col_x = METRICS[int(x[-1]) - 7]

            # # Add a correlation coefficient annotation to the scatter plot
            # fig.add_annotation(x=df[col_x].max() * 0.90,
            #                    y=df[col_y].max() * 0.90,
            #                    xref=x, yref=y,
            #                    showarrow=False,
            #                    # Add a border to the annotation box: gray
            #                    bordercolor='rgba(128, 128, 128, 0.8)',
            #                    borderwidth=1,
            #                    text='R:'+str(round(r, 2)),
            #                    font=dict(size=12, color='black'),
            #                    # Background color for the annotation box: light yellow
            #                    bgcolor='rgba(255, 255, 0, 0.2)',
            #                    )

            # Create a line for each scatter plot
            fig.add_shape(type="line",
                          x0=df[col_x].min(), y0=df[col_y].min(),
                          x1=df[col_x].max(), y1=df[col_y].max(),
                          line=dict(color="rgba(255, 0, 0, 0.5)", width=2),
                          xref=x, yref=y,
                          )

    # Change the name of each x-axis and y-axis
    # * Theo tr·ª•c x
    for col_number in range(1, 4):
        fig.update_xaxes(title_text=METRIC_LABELS[col_number-1],
                         row=3, col=col_number)
    # * Theo tr·ª•c y
    for row_number in range(1, 4):
        fig.update_yaxes(title_text=METRIC_LABELS[row_number-1],
                         row=row_number, col=1)

    # Update title and layout
    fig.update_layout(
        # ƒê·∫∑t ti√™u ƒë·ªÅ cho bi·ªÉu ƒë·ªì
        title=dict(
            text="üîç Ma tr·∫≠n ph√¢n t√°n",
            font=dict(size=22, color=DARK_GRAY),
            x=0,     # Adjust horizontal position
            # y=0.95,  # Adjust vertical position
        ),
        template=template,
        margin=dict(b=0, t=80, l=0, r=0),  # Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c c·∫°nh
    )

    return fig


@st.cache_data
def create_correlation_heatmap(df: pd.DataFrame, template: str):
    """ T·∫°o m·ªôt bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan ch·ªâ hi·ªÉn th·ªã tam gi√°c d∆∞·ªõi b√™n tr√°i """

    # T√≠nh to√°n ma tr·∫≠n t∆∞∆°ng quan
    correlation_matrix = df[METRICS].corr()

    # T·∫°o m·∫∑t n·∫° cho tam gi√°c tr√™n
    mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
    masked_correlation = correlation_matrix.mask(mask)

    global masked_correlation_latex
    masked_correlation_latex = masked_correlation.to_latex()

    # V·∫Ω bi·ªÉu ƒë·ªì nhi·ªát
    fig = px.imshow(
        masked_correlation,
        aspect="equal",
        color_continuous_scale="Blues",
        # labels=dict(x="Ch·ªâ s·ªë", y="Ch·ªâ s·ªë", color="T∆∞∆°ng quan"),
        # K√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
        height=600,
        text_auto=".2f",
    )
    # Increase the font size of the text in the heatmap
    fig.update_traces(textfont_size=16)
    # Update layout
    fig.update_layout(
        xaxis=dict(tickvals=[0, 1, 2], ticktext=METRIC_LABELS),
        yaxis=dict(tickvals=[0, 1, 2], ticktext=METRIC_LABELS),
        template=template,
        title=dict(
            text="üìä Bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan",
            font=dict(size=22, color=DARK_GRAY),
            x=0,  # Adjust horizontal position
            # y=0.95,  # Adjust vertical position
        ),
        # Show color bar in horizontal orientation
        coloraxis_colorbar=dict(
            orientation="h",
            title="H·ªá s·ªë t∆∞∆°ng quan",
            thicknessmode="pixels",
            thickness=20,
            lenmode="pixels",
            len=300,
            xanchor="center",
            yanchor="top",
            x=0.5,
            y=0.90,
            title_side="top",
            title_font=dict(size=14, color=DARK_GRAY),
            # Increase the font size of the color bar labels
            tickfont=dict(size=12),
        ),
        # Hide grid lines
        xaxis_showgrid=False,
        yaxis_showgrid=False,
        margin=dict(b=0, t=80, l=0, r=0),  # Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c c·∫°nh
    )

    # Update size of x and y axis labels
    fig.update_xaxes(tickfont=dict(size=14))
    fig.update_yaxes(tickfont=dict(size=14))

    # Rotate y-axis labels
    fig.update_yaxes(tickangle=-90)

    return fig


@st.cache_data
def create_histogram(df: pd.DataFrame, metric: str, bins: int,
                     log_scale: bool, color: str, template: str,
                     metric_title: str):
    """ T·∫°o m·ªôt bi·ªÉu ƒë·ªì histogram d·ª±a tr√™n ch·ªâ s·ªë ƒë√£ ch·ªçn """
    # titles = {
    #     'stats.followerCount': "Ph√¢n ph·ªëi ng∆∞·ªùi theo d√µi",
    #     'stats.heartCount': "Ph√¢n ph·ªëi l∆∞·ª£t th√≠ch",
    #     'stats.videoCount': "Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng video"
    # }
    fig = px.histogram(
        df,
        x=metric,
        nbins=bins,
        log_y=log_scale,
        color_discrete_sequence=[color],
        height=450,
        marginal="box",
        # title=titles[metric]
    )
    fig.update_layout(
        template=template, bargap=0.1, showlegend=False,
        # Show title
        title=dict(
            text=f"üìä Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi {metric_title}",
            font=dict(size=22, color=DARK_GRAY),
            x=0,  # Adjust horizontal position
            # y=0.95,  # Adjust vertical position
        ),
        margin=dict(b=0, t=80, l=0, r=0),  # Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c c·∫°nh
    )
    # Ch·ªânh s·ª≠a tr·ª•c x
    # (ch·ªâ ri√™ng cho histogram, kh√¥ng ph·∫£i cho boxplot)
    fig.update_xaxes(title_text=metric_title, title_font=dict(size=16),
                     row=1, col=1)

    return fig


# ================================================================
# *_______________________ [Basic setup] ________________________*
# ================================================================
# C·∫•u h√¨nh Streamlit
st.set_page_config(
    page_title="User Correlation Analysis",
    page_icon="üìä",
    layout="wide",
)
# Ti√™u ƒë·ªÅ v√† m√¥ t·∫£
st.title("üìä Ph√¢n t√≠ch t∆∞∆°ng quan gi·ªØa c√°c ch·ªâ s·ªë th·ªëng k√™ c·ªßa TikToker")
st.markdown(
    "Kh√°m ph√° m·ªëi quan h·ªá gi·ªØa s·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi, s·ªë l∆∞·ª£t th√≠ch v√† s·ªë l∆∞·ª£ng video c·ªßa c√°c TikToker v·ªõi c√°c h√¨nh ·∫£nh tr·ª±c quan c√≥ kh·∫£ nƒÉng t∆∞∆°ng t√°c.",
    # help="S·ª≠ d·ª•ng thanh b√™n ƒë·ªÉ t√πy ch·ªânh ph√¢n t√≠ch c·ªßa b·∫°n"
)


# ================================================================
# *_______________ [Read data and set up styles] ________________*
# ================================================================
# √Åp d·ª•ng ki·ªÉu d√°ng v√† t·∫£i d·ªØ li·ªáu
apply_styles()
df = load_user_data()

# X√°c ƒë·ªãnh m√†u s·∫Øc cho bi·ªÉu ƒë·ªì
theme = "S√°ng"
plotly_template = "plotly_white" if theme == "T·ªëi" else "plotly_dark"


# ================================================================
# *_________________ [Overview and statistics] __________________*
# ================================================================
st.divider()
# Th·ªëng k√™ t√≥m t·∫Øt
with st.container():
    st.header("T·ªïng quan v·ªÅ d·ªØ li·ªáu")
    col1, col2, col3, col4 = st.columns(spec=4, gap="small")
    with col1:
        st.metric(label=":material/functions: T·ªïng s·ªë TikToker",
                  value=f"{len(df):,}",
                  help="T·ªïng s·ªë TikToker trong t·∫≠p d·ªØ li·ªáu",
                  border=True,
                  )
    with col2:
        st.metric(label=":material/people: S·ªë ng∆∞·ªùi theo d√µi trung b√¨nh",
                  value=f"{df['stats.followerCount'].mean():,.0f}",
                  help="S·ªë ng∆∞·ªùi theo d√µi trung b√¨nh c·ªßa TikToker",
                  border=True,
                  )
    with col3:
        st.metric(label=":material/favorite_border: S·ªë l∆∞·ª£t th√≠ch trung b√¨nh",
                  value=f"{df['stats.heartCount'].mean():,.0f}",
                  help="S·ªë l∆∞·ª£t th√≠ch trung b√¨nh c·ªßa TikToker",
                  border=True,
                  )
    with col4:
        st.metric(label=":material/ondemand_video: S·ªë l∆∞·ª£ng video trung b√¨nh",
                  value=f"{df['stats.videoCount'].mean():,.0f}",
                  help="S·ªë l∆∞·ª£ng video trung b√¨nh c·ªßa TikToker",
                  border=True,
                  )


# ================================================================
# *___________________ [Correlation analysis] ___________________*
# ================================================================
st.header("Ph√¢n t√≠ch t∆∞∆°ng quan gi·ªØa c√°c ch·ªâ s·ªë")

# Chia 2 c·ªôt cho bi·ªÉu ƒë·ªì ph√¢n t√°n v√† bi·ªÉu ƒë·ªì nhi·ªát
scatter_plot_col, heatmap_col = st.columns(
    spec=[0.6, 0.4], gap="small",
    vertical_alignment="top", border=True
)
with scatter_plot_col:  # Scatter plot with histogram
    # st.markdown("#### üîç Ma tr·∫≠n ph√¢n t√°n")
    scatter_fig = create_scatter_matrix(df, plotly_template)
    st.plotly_chart(scatter_fig, use_container_width=True)
with heatmap_col:  # Heatmap
    # st.markdown("#### üìä Bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan")
    heatmap_fig = create_correlation_heatmap(df, plotly_template)
    st.plotly_chart(heatmap_fig, use_container_width=True)

# D√πng AI ƒë·ªÉ r√∫t ra insights t·ª´ bi·ªÉu ƒë·ªì
correlation_analysis_prompt = f"""
H√£y ph√¢n t√≠ch m·ªëi t∆∞∆°ng quan gi·ªØa 'S·ªë ng∆∞·ªùi theo d√µi', 'S·ªë l∆∞·ª£t th√≠ch' v√† 'S·ªë l∆∞·ª£ng video' c·ªßa c√°c TikToker d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p. Vi·∫øt m·ªôt ƒëo·∫°n ph√¢n t√≠ch s√∫c t√≠ch (kho·∫£ng 250-350 t·ª´) t·∫≠p trung v√†o:

1. M·ª©c ƒë·ªô t∆∞∆°ng quan (m·∫°nh, trung b√¨nh, y·∫øu) gi·ªØa c√°c c·∫∑p bi·∫øn
2. H∆∞·ªõng t∆∞∆°ng quan (d∆∞∆°ng/√¢m) v√† √Ω nghƒ©a th·ª±c t·∫ø c·ªßa n√≥
3. C√°c ƒëi·ªÉm b·∫•t th∆∞·ªùng ho·∫∑c xu h∆∞·ªõng ƒë√°ng ch√∫ √Ω t·ª´ bi·ªÉu ƒë·ªì ph√¢n t√°n
4. C√°c h√†m √Ω cho ng∆∞·ªùi s√°ng t·∫°o n·ªôi dung TikTok

D·ªØ li·ªáu ph√¢n t√≠ch:

1. Bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa ba ch·ªâ s·ªë. Bi·ªÉu ƒë·ªì n√†y s·∫Ω ƒë∆∞·ª£c ƒë√≠nh k√®m d∆∞·ªõi d·∫°ng byte:
{scatter_fig.to_image()}

2. B·∫£ng ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c ch·ªâ s·ªë (h·ªá s·ªë Pearson). D∆∞·ªõi ƒë√¢y l√† b·∫£ng th·ªëng k√™ th·ªÉ hi·ªán c√°c th√¥ng tin n√†y d∆∞·ªõi d·∫°ng LaTeX:
{get_correlation_matrix(select_columns(df, METRICS)).to_latex()}

3. Th√¥ng tin b·ªï sung: 
    - H·ªá s·ªë t∆∞∆°ng quan t·ª´ 0.7-1.0: t∆∞∆°ng quan m·∫°nh
    - H·ªá s·ªë t∆∞∆°ng quan t·ª´ 0.3-0.7: t∆∞∆°ng quan trung b√¨nh
    - H·ªá s·ªë t∆∞∆°ng quan t·ª´ 0.0-0.3: t∆∞∆°ng quan y·∫øu

C·∫•u tr√∫c ph√¢n t√≠ch n√™n bao g·ªìm:
- T·ªïng quan v·ªÅ m·ª©c ƒë·ªô t∆∞∆°ng quan chung gi·ªØa c√°c bi·∫øn
- Ph√¢n t√≠ch chi ti·∫øt t·ª´ng c·∫∑p t∆∞∆°ng quan quan tr·ªçng 
- K·∫øt lu·∫≠n v√† g·ª£i √Ω th·ª±c ti·ªÖn cho ng∆∞·ªùi s√°ng t·∫°o n·ªôi dung

H√£y b·∫Øt ƒë·∫ßu ph√¢n t√≠ch tr·ª±c ti·∫øp m√† kh√¥ng c·∫ßn d√πng c√°c c·ª•m t·ª´ gi·ªõi thi·ªáu nh∆∞ "D·ª±a tr√™n d·ªØ li·ªáu..." ho·∫∑c "Theo bi·ªÉu ƒë·ªì...".
"""
display_AI_generated_insights(
     prompt=correlation_analysis_prompt,
     api_key="AIzaSyAdbNfxlQQQjKSgAcOjQt-XUwil-FMl6V8")


# ================================================================
# *__________________ [Distribution analysis] ___________________*
# ================================================================
st.header("Ph√¢n t√≠ch ph√¢n ph·ªëi c·ªßa c√°c ch·ªâ s·ªë")

# T·∫°o 2 c·ªôt, c·ªôt b√™n tr√°i cho ng∆∞·ªùi d√πng l·ª±a ch·ªçn c√†i ƒë·∫∑t v√† c·ªôt b√™n ph·∫£i cho bi·ªÉu ƒë·ªì
setting_col, histogram_col = st.columns(
    spec=[0.2, 0.8], gap="medium",
    vertical_alignment="top", border=False
)
with setting_col:  # C·ªôt b√™n tr√°i cho ng∆∞·ªùi d√πng l·ª±a ch·ªçn c√†i ƒë·∫∑t
    with st.expander(
        label="Ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ tr·ª±c quan h√≥a",
        expanded=True,
    ):
        # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn c√°c ch·ªâ s·ªë ƒë·ªÉ tr·ª±c quan h√≥a
        st.markdown("#### ‚öôÔ∏è T√πy ch·ªçn tr·ª±c quan h√≥a")
        chart_option = st.selectbox(
            label="**:blue[Ch·ªçn ch·ªâ s·ªë ƒë·ªÉ tr·ª±c quan h√≥a]**",
            options=METRIC_LABELS,
            help="Ch·ªçn m·ªôt ch·ªâ s·ªë ƒë·ªÉ tr·ª±c quan h√≥a ph√¢n ph·ªëi c·ªßa n√≥"
        )
        num_bins = st.slider(
            label="**:blue[S·ªë l∆∞·ª£ng bins]**",
            min_value=10, max_value=100, value=50, step=5,
            help="ƒêi·ªÅu ch·ªânh ƒë·ªô chi ti·∫øt c·ªßa histogram"
        )
        log_scale = st.checkbox(
            label="**:blue[S·ª≠ d·ª•ng thang ƒëo logarit]**",
            value=True,
            help="B·∫≠t ƒë·ªÉ tr·ª±c quan h√≥a d·ªØ li·ªáu l·ªách t·ªët h∆°n"
        )
with histogram_col:  # C·ªôt b√™n ph·∫£i cho bi·ªÉu ƒë·ªì
    # st.markdown("#### üìä Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi")

    # √Ånh x·∫° ch·ªâ s·ªë ƒë√£ ch·ªçn v·ªõi t√™n c·ªôt trong DataFrame
    # v√† ch·ªâ s·ªë m√†u s·∫Øc t∆∞∆°ng ·ª©ng
    metric_map = {
        "S·ªë ng∆∞·ªùi theo d√µi": ('stats.followerCount', 0),
        "S·ªë l∆∞·ª£t th√≠ch": ('stats.heartCount', 1),
        "S·ªë l∆∞·ª£ng video": ('stats.videoCount', 2),
    }
    metric, color_idx = metric_map[chart_option]

    # Histogram ƒë·ªông
    with st.spinner(f"ƒêang t·∫°o bi·ªÉu ƒë·ªì ph√¢n ph·ªëi cho `{chart_option}`...", show_time=True):
        hist_fig = create_histogram(
            df=df, metric=metric, bins=num_bins, log_scale=log_scale,
            color=COLORS_RGBA[color_idx], template=plotly_template,
            metric_title=chart_option
        )
        st.plotly_chart(hist_fig, use_container_width=True)

# D√πng AI ƒë·ªÉ r√∫t ra insights t·ª´ bi·ªÉu ƒë·ªì
distribution_analysis_prompt = f"""
H√£y gi√∫p t√¥i vi·∫øt 1 ƒëo·∫°n nh·∫≠n x√©t v·ªÅ ph√¢n ph·ªëi '{chart_option}' c·ªßa c√°c TikToker. ƒêo·∫°n nh·∫≠n x√©t n√†y n√™n ng·∫Øn g·ªçn, x√∫c t√≠ch, t·∫≠p trung v√†o nh·ªØng ƒëi·ªÉm n·ªïi b·∫≠t t·ª´ ph√¢n ph·ªëi quan s√°t ƒë∆∞·ª£c. ƒêo·∫°n vƒÉn ch·ªâ n√™n c√≥ kho·∫£ng 250 ƒë·∫øn 350 t·ª´.

T√¥i s·∫Ω cung c·∫•p cho b·∫°n 2 th√¥ng tin v·ªÅ d·ªØ li·ªáu m√† t√¥i ƒë√£ ph√¢n t√≠ch.
ƒê·∫ßu ti√™n l√† m·ªôt bi·ªÉu ƒë·ªì c√≥ s·ª± k·∫øt h·ª£p gi·ªØa histogram ·ªü b√™n d∆∞·ªõi v√† boxplot ·ªü b√™n tr√™n th·ªÉ hi·ªán ph√¢n ph·ªëi c·ªßa '{chart_option}'. Bi·ªÉu ƒë·ªì n√†y cho th·∫•y ph√¢n ph·ªëi c·ªßa '{chart_option}' c·ªßa c√°c TikToker trong b·ªô d·ªØ li·ªáu. Bi·ªÉu ƒë·ªì n√†y s·∫Ω ƒë∆∞·ª£c ƒë√≠nh k√®m d∆∞·ªõi d·∫°ng byte:
{hist_fig.to_image()}

Th·ª© hai l√† m·ªôt b·∫£ng th·ªÉ hi·ªán m·ªôt s·ªë gi√° tr·ªã th·ªëng k√™ c∆° b·∫£n cho '{chart_option}'. B·∫£ng n√†y bao g·ªìm c√°c th√¥ng tin nh∆∞ gi√° tr·ªã trung b√¨nh, ƒë·ªô l·ªách chu·∫©n, c√°c gi√° tr·ªã t·ª© ph√¢n v·ªã v√† c√°c gi√° tr·ªã c·ª±c tr·ªã. D∆∞·ªõi ƒë√¢y l√† b·∫£ng th·ªëng k√™ th·ªÉ hi·ªán c√°c th√¥ng tin n√†y d∆∞·ªõi d·∫°ng LaTeX:
{df[metric].describe().to_latex()}

H√£y tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi b·∫Øt ƒë·∫ßu v·ªõi c·ª•m t·ª´: "Ph√¢n ph·ªëi ...". ƒê·ª´ng b·∫Øt ƒë·∫ßu c√¢u tr·∫£ l·ªùi b·∫±ng c√°c c·ª•m t·ª´ nh∆∞: "D·ª±a tr√™n ...".
"""
with histogram_col:  # C·ªôt b√™n ph·∫£i cho bi·ªÉu ƒë·ªì
    display_AI_generated_insights(
        prompt=distribution_analysis_prompt,
        api_key="AIzaSyC-letXWg8hVdOA8H6BlEXb-TXF7W7twQM")


# ================================================================
# *______________________ [Download data] _______________________*
# ================================================================
st.divider()
st.header("T·∫£i d·ªØ li·ªáu")

st.markdown(
    "T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong bi·ªÉu ƒë·ªì ph√¢n t√≠ch t∆∞∆°ng quan v√† ph√¢n ph·ªëi.",
    help="T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong bi·ªÉu ƒë·ªì ph√¢n t√≠ch t∆∞∆°ng quan v√† ph√¢n ph·ªëi."
)
# T·∫°o m·ªôt n√∫t t·∫£i xu·ªëng cho d·ªØ li·ªáu ƒë√£ ch·ªçn
data_to_download = select_columns(df, METRICS)
st.download_button(
    label="**üì• Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ t·∫£i d·ªØ li·ªáu**",
    data=data_to_download.to_csv(index=False),
    file_name="tiktok_creator_metrics.csv",
    mime="text/plain",
    help="T·∫£i d·ªØ li·ªáu ƒë∆∞·ª£c s·ª≠ d·ª•ng trong bi·ªÉu ƒë·ªì n√†y d∆∞·ªõi d·∫°ng t·ªáp CSV",
    on_click="ignore",
    type="primary",
    # use_container_width=True,
)
