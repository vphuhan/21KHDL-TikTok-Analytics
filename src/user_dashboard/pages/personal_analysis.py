import streamlit as st
import plotly.express as px
import pandas as pd
from styles import personal_styles
from footer import display_footer
from data_loader import load_data

# T·∫£i d·ªØ li·ªáu v·ªõi v√≤ng quay ch·ªù
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu TikTok..."):
    # T·∫£i d·ªØ li·ªáu
    cleaned_user_info_df, cleaned_video_info_df, cleaned_script_df = load_data()
    # L∆∞u tr·ªØ d·ªØ li·ªáu trong tr·∫°ng th√°i phi√™n ƒë·ªÉ c√°c trang truy c·∫≠p
    st.session_state['cleaned_user_info_df'] = cleaned_user_info_df
    st.session_state['cleaned_video_info_df'] = cleaned_video_info_df
    st.session_state['cleaned_script_df'] = cleaned_script_df

def analyze_scripts(data_df, title="üç≥ Ph√¢n t√≠ch k·ªãch b·∫£n", user_context="ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn"):
    """
    Ph√¢n t√≠ch c√°c thu·ªôc t√≠nh k·ªãch b·∫£n v√† hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt cho m·ªôt DataFrame ƒë√£ cho.
    
    Tham s·ªë:
    - data_df: DataFrame ch·ª©a d·ªØ li·ªáu video v·ªõi c√°c c·ªôt k·ªãch b·∫£n
    - title: Ti√™u ƒë·ªÅ cho ph·∫ßn ph√¢n t√≠ch
    - user_context: B·ªëi c·∫£nh cho (c√°c) ng∆∞·ªùi d√πng ƒëang ƒë∆∞·ª£c ph√¢n t√≠ch (v√≠ d·ª•: "ng∆∞·ªùi d√πng" ho·∫∑c "ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn")
    """
    # CSS t√πy ch·ªânh ƒë·ªÉ ƒë·ªãnh ki·ªÉu (nh·∫•t qu√°n v·ªõi b·∫£n g·ªëc)
    st.markdown("""
        <style>
        .main {background-color: #f5f5f5; padding: 20px;}
        .stSubheader {font-size: 20px; font-weight: bold; color: #2c3e50;}
        .stButton>button {background-color: #3498db; color: white; border-radius: 5px;}
        .stMarkdown {font-size: 14px; color: #34495e;}
        </style>
    """, unsafe_allow_html=True)

    # Ti√™u ƒë·ªÅ v√† Gi·ªõi thi·ªáu
    st.title(title)
    st.markdown(f"_L·ªçc v√† kh√°m ph√° video v·ªõi th√¥ng tin chi ti·∫øt cho {user_context}._")

    # B·ªô l·ªçc
    st.subheader("üîç L·ªçc video")
    col1, col2, col3 = st.columns(3)
    with col1:
        selected_main_focus = st.multiselect("Ch·ªß ƒë·ªÅ ch√≠nh", data_df["main_content_focus"].explode().unique(), 
                                             help="Tr·ªçng t√¢m ch√≠nh c·ªßa video.")
        selected_structure_style = st.multiselect("Phong c√°ch n·ªôi dung", data_df["structure_style"].explode().unique(), 
                                                  help="C·∫•u tr√∫c c·ªßa k·ªãch b·∫£n.")
    with col2:
        selected_hook_type = st.multiselect("Lo·∫°i m√≥c c√¢u", data_df["hook_type"].explode().unique(), 
                                            help="Lo·∫°i y·∫øu t·ªë thu h√∫t s·ª± ch√∫ √Ω.")
        selected_tone = st.multiselect("Gi·ªçng ƒëi·ªáu", data_df["tone_of_voice"].explode().unique(), 
                                       help="T√¥ng c·∫£m x√∫c c·ªßa video.")
    with col3:
        selected_pacing = st.multiselect("T·ªëc ƒë·ªô", data_df["pacing"].explode().unique(), 
                                         help="T·ªëc ƒë·ªô tr√¨nh b√†y.")
        reset_filters = st.button("ƒê·∫∑t l·∫°i b·ªô l·ªçc")

    # Logic ƒë·∫∑t l·∫°i b·ªô l·ªçc
    if reset_filters:
        selected_main_focus = []
        selected_structure_style = []
        selected_hook_type = []
        selected_tone = []
        selected_pacing = []

    # √Åp d·ª•ng b·ªô l·ªçc
    filtered_df = data_df.copy()
    if selected_main_focus:
        filtered_df = filtered_df[filtered_df["main_content_focus"].apply(lambda x: any(i in selected_main_focus for i in x))]
    if selected_structure_style:
        filtered_df = filtered_df[filtered_df["structure_style"].apply(lambda x: any(i in selected_structure_style for i in x))]
    if selected_hook_type:
        filtered_df = filtered_df[filtered_df["hook_type"].apply(lambda x: any(i in selected_hook_type for i in x))]
    if selected_tone:
        filtered_df = filtered_df[filtered_df["tone_of_voice"].apply(lambda x: any(i in selected_tone for i in x))]
    if selected_pacing:
        filtered_df = filtered_df[filtered_df["pacing"].apply(lambda x: any(i in selected_pacing for i in x))]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë√£ l·ªçc
    st.subheader("üìä Th√¥ng tin chi ti·∫øt v·ªÅ video")
    if filtered_df.empty:
        st.warning(f"Kh√¥ng c√≥ video n√†o kh·ªõp v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn cho {user_context}.")
    else:
        st.info(f"Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt cho {len(filtered_df)} video ph√π h·ª£p.")

        # Bi·ªÉu ƒë·ªì c·ªôt s·ªë li·ªáu t∆∞∆°ng t√°c
        st.markdown("### T·ªïng quan t∆∞∆°ng t√°c")
        engagement_agg = filtered_df[["statsV2.playCount", "statsV2.diggCount", "statsV2.commentCount",
                                      "statsV2.shareCount", "statsV2.collectCount"]].mean().reset_index()
        engagement_agg.columns = ["Ch·ªâ s·ªë", "S·ªë l∆∞·ª£ng trung b√¨nh"]
        engagement_agg["Ch·ªâ s·ªë"] = ["L∆∞·ª£t xem", "L∆∞·ª£t th√≠ch", "B√¨nh lu·∫≠n", "Chia s·∫ª", "L∆∞u"]
        fig_eng = px.bar(
            engagement_agg, x="Ch·ªâ s·ªë", y="S·ªë l∆∞·ª£ng trung b√¨nh",
            text=engagement_agg["S·ªë l∆∞·ª£ng trung b√¨nh"].apply(lambda x: f"{int(x):,}"),
            template="plotly_white", color="Ch·ªâ s·ªë", color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig_eng.update_traces(textposition="auto")
        fig_eng.update_layout(showlegend=False, height=400)
        st.plotly_chart(fig_eng, use_container_width=True)

        # Ph√¢n ph·ªëi th·ªùi l∆∞·ª£ng video
        st.markdown("### Ph√¢n ph·ªëi th·ªùi l∆∞·ª£ng video")
        fig_duration = px.histogram(
            filtered_df, x="video.duration", nbins=20, title="",
            template="plotly_white", color_discrete_sequence=["#3498db"]
        )
        fig_duration.update_layout(height=400, xaxis_title="Th·ªùi l∆∞·ª£ng (gi√¢y)", yaxis_title="S·ªë l∆∞·ª£ng")
        st.plotly_chart(fig_duration, use_container_width=True)

        # Bi·ªÉu ƒë·ªì tr√≤n s·ª≠ d·ª•ng hashtag
        st.markdown("### Hashtag h√†ng ƒë·∫ßu")
        hashtag_counts = filtered_df["hashtags"].explode().value_counts().head(10).reset_index()
        hashtag_counts.columns = ["Hashtag", "S·ªë l∆∞·ª£ng"]
        fig_hashtag = px.pie(
            hashtag_counts, names="Hashtag", values="S·ªë l∆∞·ª£ng",
            template="plotly_white", color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig_hashtag.update_layout(height=400)
        st.plotly_chart(fig_hashtag, use_container_width=True)

        # T·∫•t c·∫£ video trong b·∫£ng ph√¢n trang
        st.markdown("### Chi ti·∫øt t·∫•t c·∫£ video")
        if 'page' not in st.session_state:
            st.session_state.page = 0

        rows_per_page = 10
        total_pages = (len(filtered_df) - 1) // rows_per_page + 1

        display_df = filtered_df[[
            'author.uniqueId', 'video.id', 'desc', 'video.duration', 'createTime',
            'statsV2.playCount', 'statsV2.diggCount', 'statsV2.commentCount',
            'statsV2.shareCount', 'statsV2.collectCount', 'gemini_analysis'
        ]].copy()
        display_df['createTime'] = display_df['createTime'].dt.strftime('%Y-%m-%d')
        display_df.columns = [
            'T√°c gi·∫£', 'ID Video', 'M√¥ t·∫£', 'Th·ªùi l∆∞·ª£ng (gi√¢y)', 'Ng√†y t·∫°o',
            'L∆∞·ª£t xem', 'L∆∞·ª£t th√≠ch', 'B√¨nh lu·∫≠n', 'Chia s·∫ª', 'L∆∞u', 'Ph√¢n t√≠ch Gemini'
        ]

        start_idx = st.session_state.page * rows_per_page
        end_idx = start_idx + rows_per_page
        page_df = display_df.iloc[start_idx:end_idx]

        st.dataframe(page_df, use_container_width=True, height=400)

        col_prev, col_page, col_next = st.columns([1, 2, 1])
        with col_prev:
            if st.button("Tr∆∞·ªõc") and st.session_state.page > 0:
                st.session_state.page -= 1
        with col_page:
            st.write(f"Trang {st.session_state.page + 1} / {total_pages}")
        with col_next:
            if st.button("Ti·∫øp") and st.session_state.page < total_pages - 1:
                st.session_state.page += 1

def personal_analysis(cleaned_video_info_df):
    personal_styles()

    # Ki·ªÉm tra n·∫øu DataFrame tr·ªëng ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt
    required_columns = ['author.uniqueId', 'createTime', 'hashtags', 'music.authorName']
    if cleaned_video_info_df.empty or not all(col in cleaned_video_info_df.columns for col in required_columns):
        st.error("D·ªØ li·ªáu video ƒë∆∞·ª£c cung c·∫•p tr·ªëng ho·∫∑c thi·∫øu c√°c c·ªôt c·∫ßn thi·∫øt.")
        return

    tiktoker_options = cleaned_video_info_df['author.uniqueId'].unique()
    min_date = cleaned_video_info_df['createTime'].min().date()
    max_date = cleaned_video_info_df['createTime'].max().date()

    # Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n cho ph·∫°m vi ng√†y d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng ng√†y
    if 'start_date' not in st.session_state:
        st.session_state['start_date'] = min_date
    if 'end_date' not in st.session_state:
        st.session_state['end_date'] = max_date

    with st.sidebar:
        st.title("üìä Ph√¢n t√≠ch TikTok")
        st.markdown("Ph√¢n t√≠ch xu h∆∞·ªõng TikTok")
        selected_tiktoker = st.selectbox("üë§ Ch·ªçn TikToker", tiktoker_options)
        # ƒê·∫£m b·∫£o gi√° tr·ªã l√† m·ªôt tuple c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng ng√†y
        date_range = st.slider("üìÖ Ph·∫°m vi ng√†y", min_value=min_date, max_value=max_date,
                               value=(st.session_state['start_date'], st.session_state['end_date']),
                               format="MM/DD/YYYY")
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n v·ªõi c√°c ƒë·ªëi t∆∞·ª£ng ng√†y
        st.session_state['start_date'], st.session_state['end_date'] = date_range[0], date_range[1]
        if st.button("üîÑ ƒê·∫∑t l·∫°i"):
            st.session_state['start_date'] = min_date
            st.session_state['end_date'] = max_date
            st.rerun()  # Ch·∫°y l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t thanh tr∆∞·ª£t

    st.header(f"Ph√¢n t√≠ch c·ªßa @{selected_tiktoker}")
    tiktoker_data = cleaned_video_info_df[cleaned_video_info_df['author.uniqueId'] == selected_tiktoker]
    tiktoker_script = cleaned_script_df[cleaned_script_df['author.uniqueId'] == selected_tiktoker]

    if not tiktoker_data.empty:
        user_info = tiktoker_data.iloc[0]
        with st.container():
            st.subheader("T·ªïng quan h·ªì s∆°")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T√™n ng∆∞·ªùi d√πng", user_info['author.uniqueId'])
                st.metric("Ng∆∞·ªùi theo d√µi", f"{user_info.get('authorStats.followerCount', 0):,}")
            with col2:
                st.metric("Th∆∞∆°ng m·∫°i", user_info.get('user.commerceUserInfo.category', 'Kh√¥ng c√≥ th√¥ng tin'))
                st.metric("T·ªïng l∆∞·ª£t th√≠ch", f"{user_info.get('authorStats.heartCount', 0):,}")
            with col3:
                st.metric("ƒê√£ x√°c minh", "C√≥ ‚úÖ" if user_info.get('author.verified', False) else "Kh√¥ng ‚ùå")
                st.metric("T·ªïng s·ªë video", f"{user_info.get('authorStats.videoCount', 0):,}")

        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
            filtered_data = tiktoker_data[(tiktoker_data['createTime'] >= pd.to_datetime(st.session_state['start_date'])) &
                                         (tiktoker_data['createTime'] <= pd.to_datetime(st.session_state['end_date']))]

        if not filtered_data.empty:
            st.markdown("üìà Xu h∆∞·ªõng video", unsafe_allow_html=True)
            video_counts = filtered_data.groupby(filtered_data['createTime'].dt.date).size().reset_index(name='S·ªë l∆∞·ª£ng video')
            fig = px.area(video_counts, x='createTime', y='S·ªë l∆∞·ª£ng video', title="T·∫°o video theo th·ªùi gian", template="plotly_white")
            fig.update_traces(line=dict(color="#00b4d8", width=2), fill='tozeroy')
            fig.add_scatter(x=video_counts['createTime'], y=video_counts['S·ªë l∆∞·ª£ng video'], mode='markers', marker=dict(size=8, color="#00b4d8"))
            max_day = video_counts.loc[video_counts['S·ªë l∆∞·ª£ng video'].idxmax()]
            fig.add_annotation(x=max_day['createTime'], y=max_day['S·ªë l∆∞·ª£ng video'], text=f"ƒê·ªânh: {max_day['S·ªë l∆∞·ª£ng video']}", showarrow=True, arrowhead=1)
            fig.update_layout(xaxis_title="Ng√†y", yaxis_title="Video ƒë√£ ƒëƒÉng", showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

            st.markdown("üéµ S·ª≠ d·ª•ng √¢m nh·∫°c", unsafe_allow_html=True)
            music_counts = filtered_data['music.authorName'].value_counts().head(10).reset_index()
            music_counts.columns = ['T√°c gi·∫£ √¢m nh·∫°c', 'S·ªë l∆∞·ª£ng']
            fig = px.bar(music_counts, x='S·ªë l∆∞·ª£ng', y='T√°c gi·∫£ √¢m nh·∫°c', orientation='h', title="Top 10 l·ª±a ch·ªçn √¢m nh·∫°c", color='S·ªë l∆∞·ª£ng', color_continuous_scale='magma')
            fig.update_layout(xaxis_title="S·ªë l·∫ßn s·ª≠ d·ª•ng", yaxis_title="", showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

            st.markdown("üè∑Ô∏è S·ª≠ d·ª•ng hashtag", unsafe_allow_html=True)
            all_hashtags = filtered_data['hashtags'].dropna().str.split().explode()
            if not all_hashtags.empty:
                hashtag_counts = all_hashtags.value_counts().head(10).reset_index()
                hashtag_counts.columns = ['Hashtag', 'S·ªë l∆∞·ª£ng']
                fig = px.treemap(hashtag_counts, path=['Hashtag'], values='S·ªë l∆∞·ª£ng', title="Top 10 hashtag", color='S·ªë l∆∞·ª£ng', color_continuous_scale='viridis')
                fig.update_layout(margin=dict(t=50, l=0, r=0, b=0))
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.markdown('<p style="color:#3498db;">‚ÑπÔ∏è Kh√¥ng c√≥ hashtag n√†o.</p>', unsafe_allow_html=True)
            analyze_scripts(tiktoker_script)
        else:
            st.markdown(f'<p style="color:#e67e22;">‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu video cho {selected_tiktoker} trong ph·∫°m vi n√†y.</p>', unsafe_allow_html=True)
    else:
        st.markdown(f'<p style="color:#c0392b;">‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu cho {selected_tiktoker}.</p>', unsafe_allow_html=True)

# Ch·ªâ ch·∫°y ph√¢n t√≠ch n·∫øu d·ªØ li·ªáu c√≥ s·∫µn trong tr·∫°ng th√°i phi√™n
if 'cleaned_video_info_df' in st.session_state:
    personal_analysis(st.session_state['cleaned_video_info_df'])
    display_footer()
else:
    st.warning("Vui l√≤ng t·∫£i l√™n ho·∫∑c cung c·∫•p d·ªØ li·ªáu video ƒë·ªÉ ph√¢n t√≠ch.")