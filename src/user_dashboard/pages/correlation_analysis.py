import streamlit as st
import plotly.express as px
import pandas as pd
from footer import display_footer
from styles import apply_styles
import numpy as np

# H·∫±ng s·ªë
COLORS_RGBA = [
    "rgba(99, 110, 250, 0.9)",  # Xanh d∆∞∆°ng
    "rgba(239, 85, 59, 0.8)",   # ƒê·ªè
    "rgba(0, 204, 150, 0.7)"    # Xanh l√°
]
METRICS = ['stats.followerCount', 'stats.heart', 'stats.videoCount']
METRIC_LABELS = ["Ng∆∞·ªùi theo d√µi", "L∆∞·ª£t th√≠ch", "Video"]

# T·∫£i d·ªØ li·ªáu
@st.cache_data
def load_data():
    """T·∫£i v√† l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t·ª´ t·ªáp CSV"""
    return pd.read_csv("data/interim/cleaned_user_info.csv")


# H√†m tr·ª±c quan h√≥a
def create_scatter_matrix(df, template):
    """T·∫°o m·ªôt bi·ªÉu ƒë·ªì ma tr·∫≠n ph√¢n t√°n ch·ªâ hi·ªÉn th·ªã tam gi√°c d∆∞·ªõi b√™n tr√°i"""
    fig = px.scatter_matrix(
        df,
        dimensions=METRICS,
        color_discrete_sequence=COLORS_RGBA,
        height=450,
        opacity=0.6,
        title="Ma tr·∫≠n ph√¢n t√°n"
    )
    fig.update_traces(diagonal_visible=False)
    # Ch·ªâ hi·ªÉn th·ªã tam gi√°c d∆∞·ªõi b√™n tr√°i
    for i, _ in enumerate(METRICS):
        for j, _ in enumerate(METRICS):
            if j >= i:  # ·∫®n c√°c √¥ ·ªü tam gi√°c tr√™n v√† ƒë∆∞·ªùng ch√©o ch√≠nh
                fig.update_traces(visible=False, selector=dict(subplot=f"x{j+1}y{i+1}"))
    fig.update_layout(template=template)
    return fig


def create_correlation_heatmap(df, template):
    """T·∫°o m·ªôt bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan ch·ªâ hi·ªÉn th·ªã tam gi√°c d∆∞·ªõi b√™n tr√°i"""
    correlation_matrix = df[METRICS].corr()
    # T·∫°o m·∫∑t n·∫° cho tam gi√°c tr√™n
    mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
    masked_correlation = correlation_matrix.mask(mask)
    
    global masked_correlation_latex
    masked_correlation_latex = masked_correlation.to_latex()

    fig = px.imshow(
        masked_correlation,
        text_auto=".2f",
        aspect="equal",
        color_continuous_scale="Blues",
        labels=dict(x="Ch·ªâ s·ªë", y="Ch·ªâ s·ªë", color="T∆∞∆°ng quan"),
        height=500
    )
    fig.update_layout(
        xaxis=dict(tickvals=[0, 1, 2], ticktext=METRIC_LABELS),
        yaxis=dict(tickvals=[0, 1, 2], ticktext=METRIC_LABELS),
        template=template
    )
    return fig

def create_histogram(df, metric, bins, log_scale, color, template):
    """T·∫°o m·ªôt bi·ªÉu ƒë·ªì histogram d·ª±a tr√™n ch·ªâ s·ªë ƒë√£ ch·ªçn"""
    titles = {
        'stats.followerCount': "Ph√¢n ph·ªëi ng∆∞·ªùi theo d√µi",
        'stats.heart': "Ph√¢n ph·ªëi l∆∞·ª£t th√≠ch",
        'stats.videoCount': "Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng video"
    }
    fig = px.histogram(
        df,
        x=metric,
        nbins=bins,
        log_y=log_scale,
        color_discrete_sequence=[color],
        height=450,
        marginal="box",
        title=titles[metric]
    )
    fig.update_layout(template=template, bargap=0.1, showlegend=False)
    return fig

# ·ª®ng d·ª•ng ch√≠nh
def main():
    # √Åp d·ª•ng ki·ªÉu d√°ng v√† t·∫£i d·ªØ li·ªáu
    apply_styles()
    df = load_data()

    # C·∫•u h√¨nh thanh b√™n
    st.sidebar.title("‚öôÔ∏è C√†i ƒë·∫∑t")
    theme = "S√°ng"
    plotly_template = "plotly_white" if theme == "T·ªëi" else "plotly_dark"

    st.sidebar.markdown("### T√πy ch·ªçn tr·ª±c quan h√≥a")
    chart_option = st.sidebar.selectbox(
        "Ch·ªçn ki·ªÉu tr·ª±c quan h√≥a",
        ["Ph√¢n ph·ªëi ng∆∞·ªùi theo d√µi", "Ph√¢n ph·ªëi l∆∞·ª£t th√≠ch", "Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng video"],
        help="Ch·ªçn m·ªôt ch·ªâ s·ªë ƒë·ªÉ tr·ª±c quan h√≥a ph√¢n ph·ªëi c·ªßa n√≥"
    )
    num_bins = st.sidebar.slider(
        "S·ªë l∆∞·ª£ng ngƒÉn", 10, 100, 50, 5,
        help="ƒêi·ªÅu ch·ªânh ƒë·ªô chi ti·∫øt c·ªßa histogram"
    )
    log_scale = st.sidebar.checkbox(
        "Thang ƒëo logarit", value=True,
        help="B·∫≠t ƒë·ªÉ tr·ª±c quan h√≥a d·ªØ li·ªáu l·ªách t·ªët h∆°n"
    )

    # N·ªôi dung ch√≠nh
    st.title("üìä Ph√¢n t√≠ch t∆∞∆°ng quan TikTok")
    st.markdown(
        "Kh√°m ph√° m·ªëi quan h·ªá gi·ªØa ng∆∞·ªùi theo d√µi, l∆∞·ª£t th√≠ch v√† s·ªë l∆∞·ª£ng video v·ªõi c√°c h√¨nh ·∫£nh tr·ª±c quan t∆∞∆°ng t√°c.",
        help="S·ª≠ d·ª•ng thanh b√™n ƒë·ªÉ t√πy ch·ªânh ph√¢n t√≠ch c·ªßa b·∫°n"
    )

    # Th·ªëng k√™ t√≥m t·∫Øt
    with st.container():
        st.subheader("T·ªïng quan d·ªØ li·ªáu")
        st.metric("T·ªïng s·ªë ng∆∞·ªùi d√πng", f"{len(df):,}")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Trung b√¨nh ng∆∞·ªùi theo d√µi", f"{df['stats.followerCount'].mean():,.0f}")
        with col2:
            st.metric("Trung b√¨nh l∆∞·ª£t th√≠ch", f"{df['stats.heart'].mean():,.0f}")
        with col3:
            st.metric("Trung b√¨nh video", f"{df['stats.videoCount'].mean():,.0f}")

    # Tr·ª±c quan h√≥a ch√≠nh
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("#### üîç Ma tr·∫≠n ph√¢n t√°n")
        scatter_fig = create_scatter_matrix(df, plotly_template)
        st.plotly_chart(scatter_fig, use_container_width=True)

    with col2:
        st.markdown("#### üìä Bi·ªÉu ƒë·ªì nhi·ªát t∆∞∆°ng quan")
        heatmap_fig = create_correlation_heatmap(df, plotly_template)
        st.plotly_chart(heatmap_fig, use_container_width=True)

    # Histogram ƒë·ªông
    metric_map = {
        "Ph√¢n ph·ªëi ng∆∞·ªùi theo d√µi": ('stats.followerCount', 0),
        "Ph√¢n ph·ªëi l∆∞·ª£t th√≠ch": ('stats.heart', 1),
        "Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng video": ('stats.videoCount', 2)
    }
    metric, color_idx = metric_map[chart_option]
    
    with st.spinner(f"ƒêang t·∫°o {chart_option.lower()}... Vui l√≤ng ƒë·ª£i."):
        hist_fig = create_histogram(df, metric, num_bins, log_scale, COLORS_RGBA[color_idx], plotly_template)
        st.plotly_chart(hist_fig, use_container_width=True)

    # N√∫t t·∫£i xu·ªëng
    data_to_download = df[METRICS]
    st.download_button(
        label="üì• T·∫£i d·ªØ li·ªáu",
        data=data_to_download.to_csv(index=False),
        file_name=f"{chart_option.lower().replace(' ', '_')}.csv",
        mime="text/csv",
        help="T·∫£i d·ªØ li·ªáu ƒë∆∞·ª£c s·ª≠ d·ª•ng trong bi·ªÉu ƒë·ªì n√†y d∆∞·ªõi d·∫°ng t·ªáp CSV"
    )



    global distribution_dataframe_latex 
    distribution_dataframe_latex =  df[METRICS].to_latex() # Khai b√°o bi·∫øn to√†n c·ª•c
    st.markdown(f'''
    ## Dataframe t∆∞∆°ng quan sau khi ƒë∆∞a qua latex
    {masked_correlation_latex}
    '''
    )

    st.markdown(f'''
    ## Dataframe ph√¢n ph·ªëi sau khi ƒë∆∞a qua latex
    {distribution_dataframe_latex}
    '''
    )



if __name__ == "__main__":
    main()