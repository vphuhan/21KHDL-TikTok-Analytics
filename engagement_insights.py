import streamlit as st
import plotly.express as px
import pandas as pd
from google import genai
from typing import List, Tuple

# ================================================================
# *_____________________ [Define constants] _____________________*
# ================================================================
DARK_GRAY: str = "#444444"
# CLEANED_USER_DATA_FILE: str = "data/interim/cleaned_user_info.csv"
CLEANED_USER_DATA_FILE: str = "data/processed/cleaned_user_info.parquet"


# ================================================================
# *____________________ [Utility functions] _____________________*
# ================================================================
# H√†m gi√∫p t·∫°o nh·∫≠n x√©t v√† r√∫t ra insights t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch v√† tr·ª±c quan h√≥a d·ªØ li·ªáu
@st.cache_data(show_spinner=False)
def generate_insights(prompt: str, api_key: str) -> str:
    """ T·∫°o nh·∫≠n x√©t t·ª´ Gemini API """
    # Generate content
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model="gemini-2.0-flash-lite",
            contents=[prompt]
        )
        return response.text
    except Exception as e:
        print(f"L·ªói khi t·∫°o n·ªôi dung: {e}")
        return ""


# T·∫°o 1 module d√†nh ri√™ng cho vi·ªác r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì
# v√† th·ªÉ hi·ªán l√™n trang web
def display_AI_generated_insights(prompt: str, api_key: str) -> None:
    """ End-to-end module ƒë·ªÉ r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì v√† hi·ªán th·ªã l√™n trang web """

    with st.expander(
            label=":blue-background[:blue[**:material/auto_awesome: Nh·∫≠n x√©t t·ª´ AI**]]",
            expanded=True):
        # T·∫°o nh·∫≠n x√©t t·ª´ Gemini API
        with st.spinner(text="ƒêang t·∫°o nh·∫≠n x√©t t·ª´ AI...", show_time=True):
            insights = generate_insights(prompt=prompt, api_key=api_key)
            if not insights:
                st.error("Hi·ªán t·∫°i h·ªá th·ªëng ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau.")
            else:
                st.markdown(insights)


# T·∫£i d·ªØ li·ªáu
@st.cache_data(persist="disk")
def load_user_data() -> pd.DataFrame:
    """ T·∫£i v√† l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t·ª´ t·ªáp """
    if CLEANED_USER_DATA_FILE.endswith(".csv"):
        return pd.read_csv(CLEANED_USER_DATA_FILE)
    elif CLEANED_USER_DATA_FILE.endswith(".parquet"):
        # ƒê·ªçc t·ªáp Parquet
        return pd.read_parquet(CLEANED_USER_DATA_FILE)

    return None


# H√†m t√≠nh t·ª∑ l·ªá t∆∞∆°ng t√°c
@st.cache_data
def calculate_engagement_ratio(df: pd.DataFrame) -> pd.DataFrame:
    """ T√≠nh to√°n t·ª∑ l·ªá t∆∞∆°ng t√°c cho t·ª´ng ng∆∞·ªùi d√πng """
    df['engagement_ratio'] = (
        df['stats.heartCount'] /
        df['stats.followerCount'].replace(0, 1)
    )
    return df


# H√†m t√≠nh c√°c gi√° tr·ªã ph√¢n v·ªã ƒë·ªÉ l·ªçc d·ªØ li·ªáu
@st.cache_data
def calculate_percentiles(df: pd.DataFrame,
                          percentiles: List[float]) -> Tuple[float, float, float, float]:
    """ T√≠nh to√°n c√°c gi√° tr·ªã ph√¢n v·ªã cho ng∆∞·ªùi theo d√µi v√† t∆∞∆°ng t√°c """

    low_followers = df['stats.followerCount'].quantile(percentiles[1])
    high_followers = df['stats.followerCount'].quantile(percentiles[2])
    low_engagement = df['engagement_ratio'].quantile(percentiles[1])
    high_engagement = df['engagement_ratio'].quantile(percentiles[2])

    return low_followers, high_followers, low_engagement, high_engagement


# H√†m l·ªçc d·ªØ li·ªáu theo m·ª©c ƒë·ªô t∆∞∆°ng t√°c v√† ng∆∞·ªùi theo d√µi
@st.cache_data
def filter_data(df: pd.DataFrame, follower_level: str, engagement_level: str,
                low_followers: float, high_followers: float,
                low_engagement: float, high_engagement: float
                ) -> pd.DataFrame:
    """ L·ªçc d·ªØ li·ªáu theo m·ª©c ƒë·ªô t∆∞∆°ng t√°c v√† ng∆∞·ªùi theo d√µi """

    # L·ªçc theo m·ª©c ng∆∞·ªùi theo d√µi
    if follower_level == "Th·∫•p":
        filtered_df = df[df['stats.followerCount'] <= low_followers]
    elif follower_level == "Trung b√¨nh":
        filtered_df = df[
            (df['stats.followerCount'] > low_followers) &
            (df['stats.followerCount'] <= high_followers)
        ]
    else:
        filtered_df = df[df['stats.followerCount'] > high_followers]

    # L·ªçc theo m·ª©c t∆∞∆°ng t√°c
    if engagement_level == "Th·∫•p":
        filtered_df = filtered_df[
            filtered_df['engagement_ratio'] <= low_engagement]
    elif engagement_level == "Trung b√¨nh":
        filtered_df = filtered_df[
            (filtered_df['engagement_ratio'] > low_engagement) &
            (filtered_df['engagement_ratio'] <= high_engagement)
        ]
    else:
        filtered_df = filtered_df[
            filtered_df['engagement_ratio'] > high_engagement]

    return filtered_df


# H√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì scatter plot th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa ng∆∞·ªùi theo d√µi v√† m·ª©c ƒë·ªô t∆∞∆°ng t√°c
@st.cache_data(show_spinner=False)
def plot_engagement_scatter(df: pd.DataFrame):
    """ V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa ng∆∞·ªùi theo d√µi v√† m·ª©c ƒë·ªô t∆∞∆°ng t√°c """

    # T·∫°o bi·ªÉu ƒë·ªì ph√¢n t√°n
    fig = px.scatter(
        df,
        x='stats.followerCount',
        y='stats.heartCount',
        size='stats.videoCount',
        color='engagement_ratio',
        color_continuous_scale='YlGnBu',
        hover_data=['user.uniqueId'],
        height=600,
        opacity=0.75,
    )

    # C·∫≠p nh·∫≠t marker v√† m√†u s·∫Øc
    fig.update_traces(
        marker=dict(line=dict(width=1, color=DARK_GRAY)),
    )

    # C·∫≠p nh·∫≠t b·ªë c·ª•c bi·ªÉu ƒë·ªì
    fig.update_layout(
        xaxis_title="üë• S·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi",
        yaxis_title="‚ù§Ô∏è T·ªïng s·ªë l∆∞·ª£t th√≠ch",
        xaxis_type="log",
        yaxis_type="log",
        showlegend=True,
        coloraxis_colorbar_title="T·ª∑ l·ªá t∆∞∆°ng t√°c üî•",

        # Thay ƒë·ªïi m√†u n·ªÅn v√† k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ
        plot_bgcolor="#fafafa",
        title_x=0.5,
        title_y=0.95,
        title_xanchor="center",
        title_yanchor="top",
        title_font_size=26,
        title_font_color=DARK_GRAY,
        title_text="üìä M·ªëi quan h·ªá gi·ªØa s·ªë ng∆∞·ªùi theo d√µi v√† m·ª©c ƒë·ªô t∆∞∆°ng t√°c",

        # Thay ƒë·ªïi k√≠ch th∆∞·ªõc x, y-axis label
        xaxis_title_font=dict(size=16),
        yaxis_title_font=dict(size=16),

        # Thay ƒë·ªïi k√≠ch th∆∞·ªõc x, y-axis tick labels
        xaxis_tickfont=dict(size=14),
        yaxis_tickfont=dict(size=14),
    )

    # Add annotation for the user to know the size of the markers
    # are proportional to the number of videos
    fig.add_annotation(
        text=" K√≠ch th∆∞·ªõc c·ªßa c√°c ƒëi·ªÉm th·ªÉ hi·ªán s·ªë l∆∞·ª£ng video c·ªßa ng∆∞·ªùi d√πng ",
        xref="paper",
        yref="paper",
        x=0.02,
        y=0.98,
        showarrow=False,
        font=dict(size=18, color="#2c7d33"),
        bgcolor='#e7f4ea',
        bordercolor='#39a342',
        borderwidth=1,
    )

    return fig


# ================================================================
# *_______________________ [Basic setup] ________________________*
# ================================================================
# C·∫•u h√¨nh Streamlit
st.set_page_config(
    page_title="Engagement Insights",
    page_icon="üìä",
    layout="wide",
)
# Ti√™u ƒë·ªÅ trang
st.title("üèÜ Ph√¢n t√≠ch m·ª©c ƒë·ªô t∆∞∆°ng t√°c c·ªßa c√°c TikToker")
st.write(
    "Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa **ng∆∞·ªùi theo d√µi** v√† **m·ª©c ƒë·ªô t∆∞∆°ng t√°c (l∆∞·ª£t th√≠ch/tr√°i tim)**.")
st.divider()


# ================================================================
# *_______________ [Read data and set up styles] ________________*
# ================================================================
# T·∫£i d·ªØ li·ªáu ƒë√£ l∆∞u tr·ªØ
cleaned_user_info_df = load_user_data()


# ================================================================
# *___________________ [Data transformation] ____________________*
# ================================================================
# T√≠nh t·ª∑ l·ªá t∆∞∆°ng t√°c
cleaned_user_info_df = calculate_engagement_ratio(
    cleaned_user_info_df)

# X√°c ƒë·ªãnh c√°c ph√¢n v·ªã ƒë·ªÉ l·ªçc
percentiles = [0, 0.33, 0.66, 1]
low_followers, high_followers, low_engagement, high_engagement = \
    calculate_percentiles(cleaned_user_info_df, percentiles)


# ================================================================
# *_________________ [UI for selecting filters] _________________*
# ================================================================
# T·∫°o 2 c·ªôt, c·ªôt b√™n tr√°i ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn c√°c filter
# v√† c·ªôt b√™n ph·∫£i ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
filter_col, chart_col = st.columns(spec=[0.2, 0.8], gap="large", border=False)


with filter_col:  # Cho ng∆∞·ªùi d√πng ch·ªçn c√°c b·ªô l·ªçc
    with st.expander(label="Ch·ªçn b·ªô l·ªçc", expanded=True):
        st.subheader(
            body="üîç Ch·ªçn b·ªô l·ªçc ƒë·ªÉ ph√¢n t√≠ch",
            help="Ch·ªçn c√°c b·ªô l·ªçc ƒë·ªÉ ph√¢n t√≠ch m·ª©c ƒë·ªô t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng TikTok.",
        )
        st.write(
            "Ch·ªçn c√°c b·ªô l·ªçc ƒë·ªÉ ph√¢n t√≠ch m·ª©c ƒë·ªô t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng TikTok.")

        follower_level = st.selectbox(
            label="üìå :red[**Ch·ªçn m·ª©c ng∆∞·ªùi theo d√µi:**]",
            options=["Th·∫•p", "Trung b√¨nh", "Cao"]
        )
        engagement_level = st.selectbox(
            label="üî• :orange[**Ch·ªçn m·ª©c t∆∞∆°ng t√°c:**]",
            options=["Th·∫•p", "Trung b√¨nh", "Cao"]
        )

    # L·ªçc d·ªØ li·ªáu theo m·ª©c ƒë·ªô t∆∞∆°ng t√°c v√† ng∆∞·ªùi theo d√µi
    filtered_df = filter_data(
        df=cleaned_user_info_df,
        follower_level=follower_level,
        engagement_level=engagement_level,
        low_followers=low_followers,
        high_followers=high_followers,
        low_engagement=low_engagement,
        high_engagement=high_engagement
    )

with chart_col:
    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ cho bi·ªÉu ƒë·ªì
    st.subheader(
        body=f"Th√¥ng tin chi ti·∫øt v·ªÅ t∆∞∆°ng t√°c: S·ªë ng∆∞·ªùi theo d√µi {follower_level} & M·ª©c ƒë·ªô t∆∞∆°ng t√°c {engagement_level}",
    )

    # Hi·ªÉn th·ªã s·ªë li·ªáu th·ªëng k√™
    col1, col2, col3 = st.columns(spec=3, gap="medium", border=False)
    # S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng, trung b√¨nh l∆∞·ª£t th√≠ch v√† ng∆∞·ªùi theo d√µi
    with col1:
        st.metric(label="üìå S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng",
                  value=f"{len(filtered_df):,}",
                  border=True,
                  )
    with col2:
        st.metric(label="‚ù§Ô∏è S·ªë l∆∞·ª£t th√≠ch trung b√¨nh",
                  value=f"{filtered_df['stats.heart'].mean():,.0f}",
                  border=True,
                  )
    with col3:
        st.metric(label="üë• S·ªë ng∆∞·ªùi theo d√µi trung b√¨nh",
                  value=f"{filtered_df['stats.followerCount'].mean():,.0f}",
                  border=True,
                  )

    # Hi·ªÉn th·ªã tr·ª±c quan v·ªõi v√≤ng quay ch·ªù
    with st.spinner(text="ƒêang t·∫£i bi·ªÉu ƒë·ªì...", show_time=True):
        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa ng∆∞·ªùi theo d√µi v√† m·ª©c ƒë·ªô t∆∞∆°ng t√°c
        fig = plot_engagement_scatter(df=filtered_df)
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(fig, use_container_width=True)

# D√πng AI ƒë·ªÉ r√∫t ra insights t·ª´ bi·ªÉu ƒë·ªì
correlation_analysis_prompt = f"""
H√£y gi√∫p t√¥i vi·∫øt 1 ƒëo·∫°n nh·∫≠n x√©t v·ªÅ m·ª©c ƒë·ªô t∆∞∆°ng quan gi·ªØa 'S·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi', 'T·ªïng s·ªë l∆∞·ª£t th√≠ch', 'T·ªïng s·ªë video' v√† 'T·ª∑ l·ªá t∆∞∆°ng t√°c' c·ªßa c√°c TikToker thu·ªôc v√†o nh√≥m ng∆∞·ªùi d√πng c√≥ ƒë·ªìng th·ªùi 2 ƒë·∫∑c ƒëi·ªÉm: s·ªë ng∆∞·ªùi theo d√µi '{follower_level}' v√† m·ª©c ƒë·ªô t∆∞∆°ng t√°c '{engagement_level}'. ƒêo·∫°n nh·∫≠n x√©t n√†y n√™n ng·∫Øn g·ªçn, x√∫c t√≠ch, t·∫≠p trung v√†o nh·ªØng ƒëi·ªÉm n·ªïi b·∫≠t t·ª´ ph√¢n ph·ªëi quan s√°t ƒë∆∞·ª£c. ƒêo·∫°n vƒÉn ch·ªâ n√™n c√≥ kho·∫£ng 300 ƒë·∫øn 500 t·ª´.

T√¥i s·∫Ω cung c·∫•p cho b·∫°n 4 th√¥ng tin v·ªÅ d·ªØ li·ªáu m√† t√¥i ƒë√£ ph√¢n t√≠ch.
ƒê·∫ßu ti√™n l√† m·ªôt bi·ªÉu ƒë·ªì ph√¢n t√°n th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa c√°c ch·ªâ s·ªë. Bi·ªÉu ƒë·ªì n√†y cho th·∫•y m·ªëi t∆∞∆°ng quan gi·ªØa 'S·ªë l∆∞·ª£ng ng∆∞·ªùi theo d√µi' (tr√™n tr·ª•c x) v·ªõi 'T·ªïng s·ªë l∆∞·ª£t th√≠ch' (tr√™n tr·ª•c y), k√≠ch th∆∞·ªõc c·ªßa c√°c ƒëi·ªÉm th·ªÉ hi·ªán 'S·ªë l∆∞·ª£ng video' (k√≠ch th∆∞·ªõc c√†ng l·ªõn th√¨ s·ªë l∆∞·ª£ng video c√†ng nhi·ªÅu) v√† m√†u s·∫Øc c·ªßa c√°c ƒëi·ªÉm th·ªÉ hi·ªán 'T·ª∑ l·ªá t∆∞∆°ng t√°c' (m√†u s·∫Øc c√†ng ƒë·∫≠m th√¨ t·ª∑ l·ªá t∆∞∆°ng t√°c c√†ng cao). Bi·ªÉu ƒë·ªì n√†y s·∫Ω ƒë∆∞·ª£c ƒë√≠nh k√®m d∆∞·ªõi d·∫°ng byte:
{fig.to_image()}

Th·ª© hai l√† th·ªëng k√™ v·ªÅ s·ªë l∆∞·ª£ng TikToker thu·ªôc v√†o nh√≥m n√†y. S·ªë l∆∞·ª£ng TikToker n√†y l√† {len(filtered_df):,} ng∆∞·ªùi d√πng. 

Th·ª© ba l√† th√¥ng tin v·ªÅ s·ªë l∆∞·ª£t th√≠ch trung b√¨nh c·ªßa c√°c TikToker trong nh√≥m n√†y. S·ªë l∆∞·ª£t th√≠ch trung b√¨nh l√† {filtered_df['stats.heart'].mean():,.0f} l∆∞·ª£t th√≠ch.

Th·ª© t∆∞ l√† th√¥ng tin v·ªÅ s·ªë ng∆∞·ªùi theo d√µi trung b√¨nh c·ªßa c√°c TikToker trong nh√≥m n√†y. S·ªë ng∆∞·ªùi theo d√µi trung b√¨nh l√† {filtered_df['stats.followerCount'].mean():,.0f} ng∆∞·ªùi theo d√µi.

ƒê·ª´ng b·∫Øt ƒë·∫ßu c√¢u tr·∫£ l·ªùi b·∫±ng c√°c c·ª•m t·ª´ nh∆∞: "D·ª±a tr√™n ..." m√† h√£y tr·ª±c ti·∫øp ƒëi v√†o n·ªôi dung nh·∫≠n x√©t.
"""
with chart_col:
    display_AI_generated_insights(
        prompt=correlation_analysis_prompt,
        api_key="AIzaSyCnUToo7FRJn8v3BwMOt3FWwrDDFf2b4UI")
