import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from user_analysis.utils.styles import personal_styles
from user_analysis.utils.footer import display_footer
from user_analysis.utils.data_loader import load_data


# T·∫£i d·ªØ li·ªáu v·ªõi v√≤ng quay ch·ªù
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu TikTok..."):
    # T·∫£i d·ªØ li·ªáu
    cleaned_user_info_df, cleaned_video_info_df, cleaned_script_df = load_data()
    # L∆∞u tr·ªØ d·ªØ li·ªáu trong tr·∫°ng th√°i phi√™n ƒë·ªÉ c√°c trang truy c·∫≠p
    st.session_state['cleaned_user_info_df'] = cleaned_user_info_df
    st.session_state['cleaned_video_info_df'] = cleaned_video_info_df
    st.session_state['cleaned_script_df'] = cleaned_script_df


@st.cache_data
def calculate_metrics(video_df):
    """
    T√≠nh to√°n c√°c ch·ªâ s·ªë t·ª´ d·ªØ li·ªáu video.
    """
    # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    required_cols = ['statsV2.playCount', 'statsV2.diggCount',
                     'statsV2.commentCount', 'statsV2.shareCount', 'authorStats.followerCount']
    if video_df.empty or not all(col in video_df.columns for col in required_cols):
        return None

    # T√≠nh trung b√¨nh c√°c ch·ªâ s·ªë
    total_views = video_df['statsV2.playCount'].sum()
    total_likes = video_df['statsV2.diggCount'].sum()
    total_comments = video_df['statsV2.commentCount'].sum()
    total_shares = video_df['statsV2.shareCount'].sum()
    # Gi·∫£ ƒë·ªãnh follower count kh√¥ng thay ƒë·ªïi
    total_followers = video_df['authorStats.followerCount'].iloc[0]
    number_video = len(video_df)

    # T√≠nh c√°c t·ª∑ l·ªá (%):
    views_per_follower = (total_views / total_followers /
                          number_video * 100) if total_followers > 0 else 0
    likes_per_view = (total_likes / total_views *
                      100) if total_views > 0 else 0
    comments_per_view = (total_comments / total_views *
                         100) if total_views > 0 else 0
    shares_per_view = (total_shares / total_views *
                       100) if total_views > 0 else 0
    engagement_rate = ((likes_per_view + comments_per_view +
                       shares_per_view + views_per_follower) / 4)

    return {
        "views_per_follower": views_per_follower,
        "likes_per_view": likes_per_view,
        "comments_per_view": comments_per_view,
        "shares_per_view": shares_per_view,
        "engagement_rate": engagement_rate
    }


def determine_level(value, ref_range):
    if value < ref_range[0]:
        return "Th·∫•p"
    elif ref_range[0] <= value <= ref_range[1]:
        return "Trung b√¨nh"
    else:
        return "Cao"


def display_dynamic_metrics_dashboard(video_df):
    metrics_calculated = calculate_metrics(video_df)
    if metrics_calculated is None:
        st.error(
            "Kh√¥ng th·ªÉ t√≠nh to√°n ch·ªâ s·ªë do d·ªØ li·ªáu tr·ªëng ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt.")
        return

    # Th√¥ng tin c√°c ch·ªâ s·ªë
    metric_definitions = [
        {"name": "T·ª∑ l·ªá t∆∞∆°ng t√°c", "key": "engagement_rate",
            "reference_range": [6, 11.23]},
        {"name": "L∆∞·ª£t xem / L∆∞·ª£t theo d√µi",
            "key": "views_per_follower", "reference_range": [0.8, 7.56]},
        {"name": "L∆∞·ª£t likes / L∆∞·ª£t xem", "key": "likes_per_view",
            "reference_range": [6.6, 10.37]},
        {"name": "L∆∞·ª£t b√¨nh lu·∫≠n / L∆∞·ª£t xem",
            "key": "comments_per_view", "reference_range": [0.03, 0.05]},
        {"name": "L∆∞·ª£t chia s·∫ª / L∆∞·ª£t xem", "key": "shares_per_view",
            "reference_range": [0.03, 0.08]},
    ]

    color_map = {
        "Cao": "#387F39",
        "Trung b√¨nh": "#A2CA71",
        "Th·∫•p": "#BEDC74"
    }

    st.markdown(
        """
        <div style='display: flex; align-items: center;'>
            <h3 style='margin-right: 10px;'>üü† S·ªë li·ªáu chung</h3>
        </div>
        """,
        unsafe_allow_html=True
    )

    cols = st.columns(5)
    for idx, metric_def in enumerate(metric_definitions):
        key = metric_def["key"]
        # Gi√° tr·ªã ƒë√£ l√† ph·∫ßn trƒÉm t·ª´ calculate_metrics
        value = round(metrics_calculated[key], 2)
        ref_range = metric_def["reference_range"]
        level = determine_level(value, ref_range)

        with cols[idx]:
            fig = go.Figure(go.Indicator(
                mode="gauge+number",
                value=value,
                domain={'x': [0, 1], 'y': [0, 1]},
                title={'text': metric_def["name"], 'font': {'size': 14}},
                # Hi·ªÉn th·ªã s·ªë v·ªõi ƒë·ªãnh d·∫°ng ph·∫ßn trƒÉm
                number={'valueformat': '.2f', 'suffix': '%'},
                gauge={
                    # Tr·ª•c hi·ªÉn th·ªã ph·∫ßn trƒÉm
                    'axis': {'range': [0, ref_range[1] * 1.5], 'tickformat': '.2f%'},
                    'bar': {'color': color_map[level]},

                    'steps': [
                        {'range': [0, ref_range[0]], 'color': '#FBFFE4'},
                        {'range': ref_range, 'color': '#B3D8A8'},
                        {'range': [ref_range[1], ref_range[1]
                                   * 1.5], 'color': '#FBFFE4'}
                    ],
                }
            ))

            fig.update_layout(
                height=250,
                margin=dict(l=20, r=20, t=50, b=20),
                paper_bgcolor="rgba(0,0,0,0)",
                font={'color': "#34495e"}
            )

            st.plotly_chart(fig, use_container_width=True)

            st.markdown(
                f"""
                <div style='text-align: center;'>
                    <p style='font-size: 20px; color: #41644A; font-weight: bold;'>{level}</p>
                    <p style='font-size: 14px; color: #7f8c8d;'>Kho·∫£ng trung b√¨nh c·ªßa gi√° tr·ªã n√†y l√†: {ref_range[0]}% - {ref_range[1]}%</p>
                </div>
                """,
                unsafe_allow_html=True
            )


def analyze_scripts(data_df, title="üîç Ph√¢n t√≠ch k·ªãch b·∫£n", user_context="ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn"):
    """
    Ph√¢n t√≠ch c√°c thu·ªôc t√≠nh k·ªãch b·∫£n v√† hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt cho m·ªôt DataFrame ƒë√£ cho.

    Tham s·ªë:
    - data_df: DataFrame ch·ª©a d·ªØ li·ªáu video v·ªõi c√°c c·ªôt k·ªãch b·∫£n
    - title: Ti√™u ƒë·ªÅ cho ph·∫ßn ph√¢n t√≠ch
    - user_context: B·ªëi c·∫£nh cho (c√°c) ng∆∞·ªùi d√πng ƒëang ƒë∆∞·ª£c ph√¢n t√≠ch (v√≠ d·ª•: "ng∆∞·ªùi d√πng" ho·∫∑c "ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn")
    """
    # CSS t√πy ch·ªânh ƒë·ªÉ ƒë·ªãnh ki·ªÉu (nh·∫•t qu√°n v·ªõi b·∫£n g·ªëc)
    st.markdown("""
        <style>
        .main {background-color: #f5f5f5; padding: 20px;}
        .stSubheader {font-size: 20px; font-weight: bold; color: #2c3e50;}
        .stButton>button {background-color: #3498db; color: white; border-radius: 5px;}
        .stMarkdown {font-size: 14px; color: #34495e;}
        </style>
    """, unsafe_allow_html=True)

    # Ti√™u ƒë·ªÅ v√† Gi·ªõi thi·ªáu
    st.subheader(title)

    # Ph√¢n t√≠ch v√† visualize c√°c tr∆∞·ªùng b·∫±ng bar chart
    fields_to_visualize = {
        "main_content_focus": "Ch·ªß ƒë·ªÅ ch√≠nh",
        "structure_style": "Phong c√°ch n·ªôi dung",
        "hook_type": "Lo·∫°i m√≥c c√¢u",
        "tone_of_voice": "Gi·ªçng ƒëi·ªáu",
        "pacing": "T·ªëc ƒë·ªô"
    }
    if not data_df.empty:
        # √¥ng s·ª≠a ·ªü ƒë√¢y n√® :
        st.markdown("### Ph√¢n t√≠ch t·ªïng qu√°t")
        for field, field_name in fields_to_visualize.items():
            # ƒê·∫øm t·∫ßn su·∫•t c√°c gi√° tr·ªã trong tr∆∞·ªùng (explode v√¨ d·ªØ li·ªáu c√≥ th·ªÉ l√† danh s√°ch)
            value_counts = data_df[field].explode(
            ).value_counts().reset_index()
            value_counts.columns = [field_name, "S·ªë l∆∞·ª£ng"]

            # T·∫°o bar chart
            fig = px.bar(
                value_counts,
                x=field_name,
                y="S·ªë l∆∞·ª£ng",
                text=value_counts["S·ªë l∆∞·ª£ng"].apply(lambda x: f"{int(x):,}"),
                template="plotly_white",
                color=field_name,
                color_discrete_sequence=px.colors.qualitative.Pastel
            )
            fig.update_traces(textposition="auto")
            fig.update_layout(
                showlegend=False,
                height=400,
                title=f"Ph√¢n ph·ªëi {field_name}",
                xaxis_title=field_name,
                yaxis_title="S·ªë l∆∞·ª£ng"
            )
            st.plotly_chart(fig, use_container_width=True)

    # D√≤ng gi·ªõi thi·ªáu
    st.markdown(
        f"_L·ªçc v√† kh√°m ph√° video v·ªõi th√¥ng tin chi ti·∫øt cho {user_context}._")
    col1, col2, col3 = st.columns(3)
    with col1:
        selected_main_focus = st.multiselect("Ch·ªß ƒë·ªÅ ch√≠nh", data_df["main_content_focus"].explode().unique(),
                                             help="Tr·ªçng t√¢m ch√≠nh c·ªßa video.")
        selected_structure_style = st.multiselect("Phong c√°ch n·ªôi dung", data_df["structure_style"].explode().unique(),
                                                  help="C·∫•u tr√∫c c·ªßa k·ªãch b·∫£n.")
    with col2:
        selected_hook_type = st.multiselect("Lo·∫°i m√≥c c√¢u", data_df["hook_type"].explode().unique(),
                                            help="Lo·∫°i y·∫øu t·ªë thu h√∫t s·ª± ch√∫ √Ω.")
        selected_tone = st.multiselect("Gi·ªçng ƒëi·ªáu", data_df["tone_of_voice"].explode().unique(),
                                       help="T√¥ng c·∫£m x√∫c c·ªßa video.")
    with col3:
        selected_pacing = st.multiselect("T·ªëc ƒë·ªô", data_df["pacing"].explode().unique(),
                                         help="T·ªëc ƒë·ªô tr√¨nh b√†y.")
        st.write(" ")
        st.write(" ")
        reset_filters = st.button("ƒê·∫∑t l·∫°i b·ªô l·ªçc")

    # Logic ƒë·∫∑t l·∫°i b·ªô l·ªçc
    if reset_filters:
        selected_main_focus = []
        selected_structure_style = []
        selected_hook_type = []
        selected_tone = []
        selected_pacing = []

    # √Åp d·ª•ng b·ªô l·ªçc
    filtered_df = data_df.copy()
    if selected_main_focus:
        filtered_df = filtered_df[filtered_df["main_content_focus"].apply(
            lambda x: any(i in selected_main_focus for i in x))]
    if selected_structure_style:
        filtered_df = filtered_df[filtered_df["structure_style"].apply(
            lambda x: any(i in selected_structure_style for i in x))]
    if selected_hook_type:
        filtered_df = filtered_df[filtered_df["hook_type"].apply(
            lambda x: any(i in selected_hook_type for i in x))]
    if selected_tone:
        filtered_df = filtered_df[filtered_df["tone_of_voice"].apply(
            lambda x: any(i in selected_tone for i in x))]
    if selected_pacing:
        filtered_df = filtered_df[filtered_df["pacing"].apply(
            lambda x: any(i in selected_pacing for i in x))]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë√£ l·ªçc
    st.subheader("üìä Th√¥ng tin chi ti·∫øt v·ªÅ video")
    if filtered_df.empty:
        st.warning(
            f"Kh√¥ng c√≥ video n√†o kh·ªõp v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn cho {user_context}.")
    else:
        st.info(
            f"Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt cho {len(filtered_df)} video ph√π h·ª£p.")

        display_dynamic_metrics_dashboard(filtered_df)

        col1, col2 = st.columns(2)
        with col1:
            # Bi·ªÉu ƒë·ªì c·ªôt s·ªë li·ªáu t∆∞∆°ng t√°c
            st.markdown("### T·ªïng quan t∆∞∆°ng t√°c")
            engagement_agg = filtered_df[["statsV2.playCount", "statsV2.diggCount", "statsV2.commentCount",
                                          "statsV2.shareCount", "statsV2.collectCount"]].mean().reset_index()
            engagement_agg.columns = ["Ch·ªâ s·ªë", "S·ªë l∆∞·ª£ng trung b√¨nh"]
            engagement_agg["Ch·ªâ s·ªë"] = ["L∆∞·ª£t xem",
                                        "L∆∞·ª£t th√≠ch", "B√¨nh lu·∫≠n", "Chia s·∫ª", "L∆∞u"]
            fig_eng = px.bar(
                engagement_agg, x="Ch·ªâ s·ªë", y="S·ªë l∆∞·ª£ng trung b√¨nh",
                text=engagement_agg["S·ªë l∆∞·ª£ng trung b√¨nh"].apply(
                    lambda x: f"{int(x):,}"),
                template="plotly_white", color="Ch·ªâ s·ªë", color_discrete_sequence=px.colors.qualitative.Pastel
            )
            fig_eng.update_traces(textposition="auto")
            fig_eng.update_layout(showlegend=False, height=400)
            st.plotly_chart(fig_eng, use_container_width=True)
        with col2:
            # Bi·ªÉu ƒë·ªì tr√≤n s·ª≠ d·ª•ng hashtag
            st.markdown("### Hashtag h√†ng ƒë·∫ßu")
            hashtag_counts = filtered_df["hashtags"].explode(
            ).value_counts().head(10).reset_index()
            hashtag_counts.columns = ["Hashtag", "S·ªë l∆∞·ª£ng"]
            fig_hashtag = px.pie(
                hashtag_counts, names="Hashtag", values="S·ªë l∆∞·ª£ng",
                template="plotly_white", color_discrete_sequence=px.colors.qualitative.Pastel
            )
            fig_hashtag.update_layout(height=400)
            st.plotly_chart(fig_hashtag, use_container_width=True)

        # Ph√¢n ph·ªëi th·ªùi l∆∞·ª£ng video
        st.markdown("### Ph√¢n ph·ªëi th·ªùi l∆∞·ª£ng video")
        fig_duration = px.histogram(
            filtered_df, x="video.duration", nbins=20, title="",
            template="plotly_white", color_discrete_sequence=["#3498db"]
        )
        fig_duration.update_layout(
            height=400, xaxis_title="Th·ªùi l∆∞·ª£ng (gi√¢y)", yaxis_title="S·ªë l∆∞·ª£ng")
        st.plotly_chart(fig_duration, use_container_width=True)

        # T·∫•t c·∫£ video trong b·∫£ng ph√¢n trang
        st.markdown("### Chi ti·∫øt t·∫•t c·∫£ video")
        if 'page' not in st.session_state:
            st.session_state.page = 0

        rows_per_page = 10
        total_pages = (len(filtered_df) - 1) // rows_per_page + 1

        display_df = filtered_df[[
            'author.uniqueId', 'video.id', 'desc', 'video.duration', 'createTime',
            'statsV2.playCount', 'statsV2.diggCount', 'statsV2.commentCount',
            'statsV2.shareCount', 'statsV2.collectCount', 'gemini_analysis'
        ]].copy()
        display_df['createTime'] = display_df['createTime'].dt.strftime(
            '%Y-%m-%d')
        display_df.columns = [
            'T√°c gi·∫£', 'ID Video', 'M√¥ t·∫£', 'Th·ªùi l∆∞·ª£ng (gi√¢y)', 'Ng√†y t·∫°o',
            'L∆∞·ª£t xem', 'L∆∞·ª£t th√≠ch', 'B√¨nh lu·∫≠n', 'Chia s·∫ª', 'L∆∞u', 'Ph√¢n t√≠ch Gemini'
        ]

        start_idx = st.session_state.page * rows_per_page
        end_idx = start_idx + rows_per_page
        page_df = display_df.iloc[start_idx:end_idx]

        st.dataframe(page_df, use_container_width=True, height=400)

        col_prev, col_page, col_next = st.columns([1, 2, 1])
        with col_prev:
            if st.button("Tr∆∞·ªõc") and st.session_state.page > 0:
                st.session_state.page -= 1
        with col_page:
            st.write(f"Trang {st.session_state.page + 1} / {total_pages}")
        with col_next:
            if st.button("Ti·∫øp") and st.session_state.page < total_pages - 1:
                st.session_state.page += 1


def personal_analysis(cleaned_video_info_df):
    personal_styles()

    # Ki·ªÉm tra n·∫øu DataFrame tr·ªëng ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt
    required_columns = ['author.uniqueId',
                        'createTime', 'hashtags', 'music.authorName']
    if cleaned_video_info_df.empty or not all(col in cleaned_video_info_df.columns for col in required_columns):
        st.error("D·ªØ li·ªáu video ƒë∆∞·ª£c cung c·∫•p tr·ªëng ho·∫∑c thi·∫øu c√°c c·ªôt c·∫ßn thi·∫øt.")
        return

    tiktoker_options = cleaned_video_info_df['author.uniqueId'].unique()
    min_date = cleaned_video_info_df['createTime'].min().date()
    max_date = cleaned_video_info_df['createTime'].max().date()

    # Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n cho ph·∫°m vi ng√†y d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng ng√†y
    if 'start_date' not in st.session_state:
        st.session_state['start_date'] = min_date
    if 'end_date' not in st.session_state:
        st.session_state['end_date'] = max_date

    with st.sidebar:
        st.title("üìä Ph√¢n t√≠ch TikTok")
        st.markdown("Ph√¢n t√≠ch xu h∆∞·ªõng TikTok")
        selected_tiktoker = st.selectbox("üë§ Ch·ªçn TikToker", tiktoker_options)
        # ƒê·∫£m b·∫£o gi√° tr·ªã l√† m·ªôt tuple c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng ng√†y
        date_range = st.slider("üìÖ Ph·∫°m vi ng√†y", min_value=min_date, max_value=max_date,
                               value=(
                                   st.session_state['start_date'], st.session_state['end_date']),
                               format="MM/DD/YYYY")
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n v·ªõi c√°c ƒë·ªëi t∆∞·ª£ng ng√†y
        st.session_state['start_date'], st.session_state['end_date'] = date_range[0], date_range[1]
        if st.button("üîÑ ƒê·∫∑t l·∫°i"):
            st.session_state['start_date'] = min_date
            st.session_state['end_date'] = max_date
            st.rerun()  # Ch·∫°y l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t thanh tr∆∞·ª£t

    st.header(f"Ph√¢n t√≠ch c·ªßa @{selected_tiktoker}")
    tiktoker_data = cleaned_video_info_df[cleaned_video_info_df['author.uniqueId']
                                          == selected_tiktoker]
    tiktoker_script = cleaned_script_df[cleaned_script_df['author.uniqueId']
                                        == selected_tiktoker]

    if not tiktoker_data.empty:
        user_info = tiktoker_data.iloc[0]
        with st.container():
            st.subheader("T·ªïng quan h·ªì s∆°")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T√™n ng∆∞·ªùi d√πng", user_info['author.uniqueId'])
                st.metric("Ng∆∞·ªùi theo d√µi",
                          f"{user_info.get('authorStats.followerCount', 0):,}")
            with col2:
                st.metric("Th∆∞∆°ng m·∫°i", user_info.get(
                    'user.commerceUserInfo.category', 'Kh√¥ng c√≥ th√¥ng tin'))
                st.metric("T·ªïng l∆∞·ª£t th√≠ch",
                          f"{user_info.get('authorStats.heartCount', 0):,}")
            with col3:
                st.metric("ƒê√£ x√°c minh", "C√≥ ‚úÖ" if user_info.get(
                    'author.verified', False) else "Kh√¥ng ‚ùå")
                st.metric("T·ªïng s·ªë video",
                          f"{user_info.get('authorStats.videoCount', 0):,}")

        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
            filtered_data = tiktoker_data[(tiktoker_data['createTime'] >= pd.to_datetime(st.session_state['start_date'])) &
                                          (tiktoker_data['createTime'] <= pd.to_datetime(st.session_state['end_date']))]

    if not filtered_data.empty:
        st.subheader("Ph√¢n t√≠ch ƒëƒÉng t·∫£i")
        st.markdown("üìÖ L·ªãch s·ª≠ ƒëƒÉng b√†i", unsafe_allow_html=True)
        video_counts = filtered_data.groupby(
            filtered_data['createTime'].dt.date).size().reset_index(name='S·ªë l∆∞·ª£ng video')
        fig = px.area(video_counts, x='createTime', y='S·ªë l∆∞·ª£ng video',
                      template="plotly_white")
        fig.update_traces(
            line=dict(color="#FF9149", width=2), fill='tozeroy')
        fig.add_scatter(x=video_counts['createTime'], y=video_counts['S·ªë l∆∞·ª£ng video'],
                        mode='markers', marker=dict(size=8, color="#EA7300"))
        max_day = video_counts.loc[video_counts['S·ªë l∆∞·ª£ng video'].idxmax()]
        fig.add_annotation(x=max_day['createTime'], y=max_day['S·ªë l∆∞·ª£ng video'],
                           text=f"ƒê·ªânh: {max_day['S·ªë l∆∞·ª£ng video']}", showarrow=True, arrowhead=1)
        fig.update_layout(xaxis_title="Ng√†y",
                          yaxis_title="Video ƒë√£ ƒëƒÉng", showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

        # Ph·∫ßn "Ph√¢n t√≠ch l·ªãch ƒëƒÉng b√†i theo th√°ng"
        st.markdown("üìÖ Ph√¢n t√≠ch l·ªãch ƒëƒÉng b√†i theo th√°ng",
                    unsafe_allow_html=True)
        # Ch·ªçn th√°ng ƒë·ªÉ ph√¢n t√≠ch
        col1, col2 = st.columns([1, 2])
        with col1:
            filtered_data['createTime'] = pd.to_datetime(
                filtered_data['createTime'])
            available_months = filtered_data['createTime'].dt.to_period(
                'M').unique()
            selected_month = st.selectbox(
                "Ch·ªçn th√°ng ƒë·ªÉ ph√¢n t√≠ch", available_months, format_func=lambda x: x.strftime('%m/%Y'))

            # L·ªçc d·ªØ li·ªáu theo th√°ng ƒë∆∞·ª£c ch·ªçn
            month_data = filtered_data[filtered_data['createTime'].dt.to_period(
                'M') == selected_month]

        if not month_data.empty:
            with col1:
                # 1. Calendar Heatmap
                month_data['day'] = month_data['createTime'].dt.day

                # L·∫•y s·ªë ng√†y t·ªëi ƒëa trong th√°ng
                max_days = pd.Period(selected_month).days_in_month

                # ƒê·∫øm s·ªë l∆∞·ª£ng b√†i ƒëƒÉng theo ng√†y v√† reindex ƒë·∫øn max_days
                daily_counts = month_data.groupby('day').size().reindex(
                    range(1, max_days + 1), fill_value=0).reset_index(name='S·ªë l∆∞·ª£ng')

                # T·∫°o c·ªôt ng√†y h·ª£p l·ªá
                daily_counts['date'] = pd.to_datetime(
                    f"{selected_month.year}-{selected_month.month}-" +
                    daily_counts['day'].astype(str),
                    # B·ªè qua l·ªói n·∫øu c√≥ (kh√¥ng c·∫ßn thi·∫øt v·ªõi max_days, nh∆∞ng ƒë·ªÉ an to√†n)
                    errors='coerce'
                )
                # 0 = Th·ª© 2, 6 = Ch·ªß nh·∫≠t
                daily_counts['weekday'] = daily_counts['date'].dt.weekday

                # T·∫°o calendar heatmap
                fig_cal = go.Figure(data=go.Heatmap(
                    z=daily_counts['S·ªë l∆∞·ª£ng'],
                    x=daily_counts['weekday'],
                    y=daily_counts['day'],
                    colorscale='Oranges',
                    text=daily_counts['S·ªë l∆∞·ª£ng'].astype(str),
                    hoverinfo='text',
                    showscale=True
                ))
                fig_cal.update_layout(
                    title=f"L·ªãch ƒëƒÉng b√†i - {selected_month.strftime('%m/%Y')}",
                    xaxis=dict(
                        tickmode='array',
                        tickvals=[0, 1, 2, 3, 4, 5, 6],
                        ticktext=['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4',
                                  'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t']
                    ),
                    yaxis=dict(title='Ng√†y trong th√°ng', autorange='reversed'),
                    height=500
                )
                st.plotly_chart(fig_cal, use_container_width=True)
            with col2:
                # 2. Ch·ªâ s·ªë th·ªëng k√™
                st.subheader("Ch·ªâ s·ªë th·ªëng k√™")
                total_posts = len(month_data)
                weeks_in_month = (
                    month_data['createTime'].dt.days_in_month.max() / 7)
                avg_posts_per_week = total_posts / weeks_in_month
                latest_post_date = month_data['createTime'].max().strftime(
                    '%Y-%m-%d')

                # X√°c ƒë·ªãnh c·∫•p ƒë·ªô t·∫ßn su·∫•t
                if total_posts < 6:
                    frequency_level = "√çt"
                elif 6 <= total_posts <= 10:
                    frequency_level = "Trung b√¨nh"
                else:
                    frequency_level = "Nhi·ªÅu"

                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("T·ªïng s·ªë b√†i ƒëƒÉng", total_posts)
                with col2:
                    st.metric("Trung b√¨nh m·ªói tu·∫ßn",
                              f"{avg_posts_per_week:.1f}")
                with col3:
                    st.metric("Ng√†y ƒëƒÉng g·∫ßn nh·∫•t", latest_post_date)
                with col4:
                    st.metric("C·∫•p ƒë·ªô t·∫ßn su·∫•t", frequency_level)

                # 3. Bi·ªÉu ƒë·ªì t·∫ßn su·∫•t ƒëƒÉng theo th·ª© trong tu·∫ßn
                st.subheader("T·∫ßn su·∫•t ƒëƒÉng theo th·ª© trong tu·∫ßn")
                weekday_counts = month_data['createTime'].dt.weekday.value_counts().reindex(
                    range(7), fill_value=0)
                weekday_percentages = (
                    weekday_counts / total_posts * 100).reset_index()
                weekday_percentages.columns = ['Th·ª©', 'T·ª∑ l·ªá (%)']
                weekday_percentages['Th·ª©'] = [
                    'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t']

                fig_weekday = px.bar(
                    weekday_percentages,
                    x='Th·ª©',
                    y='T·ª∑ l·ªá (%)',
                    text=weekday_percentages['T·ª∑ l·ªá (%)'].apply(
                        lambda x: f"{x:.1f}%"),
                    color_discrete_sequence=['#FF6200'],  # M√†u cam
                    template="plotly_white"
                )
                fig_weekday.update_traces(textposition='auto')
                fig_weekday.update_layout(
                    yaxis_title="T·ª∑ l·ªá ph·∫ßn trƒÉm (%)",
                    showlegend=False,
                    height=400
                )
                st.plotly_chart(fig_weekday, use_container_width=True)

        else:
            st.warning(
                f"Kh√¥ng c√≥ d·ªØ li·ªáu cho th√°ng {selected_month.strftime('%m/%Y')}.")
        st.subheader("S·ªü th√≠ch c√° nh√¢n")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("üè∑Ô∏è S·ª≠ d·ª•ng hashtag", unsafe_allow_html=True)
            all_hashtags = filtered_data['hashtags'].dropna(
            ).str.split().explode()
            if not all_hashtags.empty:
                hashtag_counts = all_hashtags.value_counts().head(10).reset_index()
                hashtag_counts.columns = ['Hashtag', 'S·ªë l∆∞·ª£ng']
                fig = px.treemap(hashtag_counts, path=['Hashtag'], values='S·ªë l∆∞·ª£ng',
                                 title="Top 10 hashtag", color='S·ªë l∆∞·ª£ng', color_continuous_scale='aggrnyl')
                fig.update_layout(margin=dict(t=50, l=0, r=0, b=0))
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.markdown(
                    '<p style="color:#3498db;">‚ÑπÔ∏è Kh√¥ng c√≥ hashtag n√†o.</p>', unsafe_allow_html=True)
        with col2:
            st.markdown("üéµ S·ª≠ d·ª•ng √¢m nh·∫°c")
            if 'music.authorName' not in filtered_data.columns:
                st.warning("D·ªØ li·ªáu kh√¥ng ch·ª©a c·ªôt 'music.authorName'.")
                return

            # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói t√°c gi·∫£ √¢m nh·∫°c
            music_counts = filtered_data['music.authorName'].value_counts().head(
                10)

            # T√≠nh ph·∫ßn trƒÉm so v·ªõi t·ªïng s·ªë video
            total_videos = len(filtered_data)
            music_percentages = (music_counts / total_videos * 100).round(1)

            # Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã
            music_bars = [
                (author, percent, color)
                for author, percent, color in zip(
                    music_counts.index,
                    music_percentages,
                    px.colors.qualitative.Safe[:len(
                        music_counts)]  # M√†u t·ª´ Plotly
                )
            ]

            # Hi·ªÉn th·ªã b·∫±ng HTML progress bars
            for author, percent, color in music_bars:
                st.markdown(
                    f"""
                    <div style="margin-bottom: 10px;">
                        <div style="display: flex; justify-content: space-between; font-weight: bold;">
                            <span>{author}</span>
                            <span>{percent:.1f}%</span>
                        </div>
                        <div style="height: 8px; background-color: #eee; border-radius: 6px;">
                            <div style="width: {percent}%; background-color: {color}; height: 100%; border-radius: 6px;"></div>
                        </div>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
        analyze_scripts(tiktoker_script)
    else:
        st.markdown(
            f'<p style="color:#e67e22;">‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu video cho {selected_tiktoker} trong ph·∫°m vi n√†y.</p>', unsafe_allow_html=True)


# Ch·ªâ ch·∫°y ph√¢n t√≠ch n·∫øu d·ªØ li·ªáu c√≥ s·∫µn trong tr·∫°ng th√°i phi√™n
if 'cleaned_video_info_df' in st.session_state:
    personal_analysis(st.session_state['cleaned_video_info_df'])
    display_footer()
else:
    st.warning("Vui l√≤ng t·∫£i l√™n ho·∫∑c cung c·∫•p d·ªØ li·ªáu video ƒë·ªÉ ph√¢n t√≠ch.")
