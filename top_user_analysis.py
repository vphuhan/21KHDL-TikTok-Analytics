import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from google import genai
from typing import Tuple, List, Dict
# from user_analysis.utils.footer import display_footer


# ================================================================
# *_____________________ [Define constants] _____________________*
# ================================================================
DARK_GRAY: str = "#444444"
# CLEANED_USER_DATA_FILE: str = "data/interim/cleaned_user_info.csv"
CLEANED_USER_DATA_FILE: str = "data/processed/cleaned_user_info.parquet"
CHART_OPTIONS: Dict[str, Tuple[str, str, str]] = {
    "S·ªë l∆∞·ª£t th√≠ch": ("stats.heartCount", "reds", "T·ªïng s·ªë l∆∞·ª£t th√≠ch (tim)"),
    "S·ªë l∆∞·ª£ng video": ("stats.videoCount", "greens", "T·ªïng s·ªë video"),
    "S·ªë ng∆∞·ªùi theo d√µi": ("stats.followerCount", "blues", "T·ªïng s·ªë ng∆∞·ªùi theo d√µi"),
    "T·ª∑ l·ªá t∆∞∆°ng t√°c": ("engagement_rate", "purples", "T·ª∑ l·ªá t∆∞∆°ng t√°c")
}


# ================================================================
# *____________________ [Utility functions] _____________________*
# ================================================================
# H√†m gi√∫p t·∫°o nh·∫≠n x√©t v√† r√∫t ra insights t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch v√† tr·ª±c quan h√≥a d·ªØ li·ªáu
@st.cache_data(show_spinner=False)
def generate_insights(prompt: str, api_key: str) -> str:
    """ T·∫°o nh·∫≠n x√©t t·ª´ Gemini API """
    # Generate content
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model="gemini-2.0-flash-lite",
            contents=[prompt]
        )
        return response.text
    except Exception as e:
        print(f"L·ªói khi t·∫°o n·ªôi dung: {e}")
        return ""


# T·∫°o 1 module d√†nh ri√™ng cho vi·ªác r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì
# v√† th·ªÉ hi·ªán l√™n trang web
def display_AI_generated_insights(prompt: str, api_key: str) -> None:
    """ End-to-end module ƒë·ªÉ r√∫t tr√≠ch insights t·ª´ bi·ªÉu ƒë·ªì v√† hi·ªán th·ªã l√™n trang web """

    with st.expander(
            label=":blue-background[:blue[**:material/auto_awesome: Nh·∫≠n x√©t t·ª´ AI**]]",
            expanded=True):
        # T·∫°o nh·∫≠n x√©t t·ª´ Gemini API
        with st.spinner(text="ƒêang t·∫°o nh·∫≠n x√©t t·ª´ AI...", show_time=True):
            insights = generate_insights(prompt=prompt, api_key=api_key)
            if not insights:
                st.error("Hi·ªán t·∫°i h·ªá th·ªëng ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau.")
            else:
                st.markdown(insights)


# T·∫£i d·ªØ li·ªáu
@st.cache_data(persist="disk")
def load_user_data() -> pd.DataFrame:
    """ T·∫£i v√† l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t·ª´ t·ªáp """
    if CLEANED_USER_DATA_FILE.endswith(".csv"):
        return pd.read_csv(CLEANED_USER_DATA_FILE)
    elif CLEANED_USER_DATA_FILE.endswith(".parquet"):
        # ƒê·ªçc t·ªáp Parquet
        return pd.read_parquet(CLEANED_USER_DATA_FILE)

    return None


# H√†m t√≠nh t·ª∑ l·ªá t∆∞∆°ng t√°c
@st.cache_data
def calculate_engagement_ratio(df: pd.DataFrame) -> pd.DataFrame:
    """ T√≠nh to√°n t·ª∑ l·ªá t∆∞∆°ng t√°c cho t·ª´ng ng∆∞·ªùi d√πng """
    df['engagement_rate'] = df['stats.heartCount'] / \
        df['stats.videoCount'].replace(0, 1)
    return df


# L·ªçc top N ng∆∞·ªùi d√πng theo m·ªôt ch·ªâ s·ªë nh·∫•t ƒë·ªãnh
@st.cache_data(persist="disk")
def filter_top_n_users(df: pd.DataFrame, metric: str, n: int, sort_order: str) -> pd.DataFrame:
    """ L·ªçc top N ng∆∞·ªùi d√πng theo m·ªôt ch·ªâ s·ªë nh·∫•t ƒë·ªãnh """

    # L·ªçc d·ªØ li·ªáu theo ch·ªâ s·ªë ƒë√£ ch·ªçn
    top_data = (df.nlargest(n, metric) if sort_order == "Gi·∫£m d·∫ßn"
                else df.nsmallest(n, metric))[['user.uniqueId', metric]]
    # Reset index
    top_data = top_data.reset_index(drop=True)
    return top_data


# H√†m v·∫Ω barchart
@st.cache_data
def create_bar_chart(data: pd.DataFrame, metric: str,
                     color_scale: str, y_label: str) -> go.Figure:
    """ T·∫°o bi·ªÉu ƒë·ªì c·ªôt cho ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu """

    fig = px.bar(
        data,
        x='user.uniqueId',
        y=metric,
        color=metric,
        color_continuous_scale=color_scale,
        text=data[metric].apply(
            lambda x: f'{x:,.1f}' if metric == 'engagement_rate' else f'{x:,}'),
        height=450,
    )
    # Set min and max value for color scale
    fig.update_coloraxes(cmin=0, cmax=data[metric].max())
    fig.update_traces(
        # Add border to each bar
        marker_line_color='black',
        marker_line_width=1.5, opacity=0.8,
        # Change text position to outside of the bar
        # and color
        textposition='outside', textfont_size=12,
        textfont_color='black',
    )
    fig.update_layout(
        xaxis_title="ID c·ªßa ng∆∞·ªùi d√πng",
        yaxis_title=y_label,
        template="plotly_white",
        xaxis_tickangle=-30,
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)",

        # TƒÉng k√≠ch th∆∞·ªõc c·ªßa c√°c ti√™u ƒë·ªÅ tr·ª•c
        xaxis_title_font=dict(size=14, color=DARK_GRAY),
        yaxis_title_font=dict(size=14, color=DARK_GRAY),
    )
    # ·∫®n colorbar ·ªü b√™n ph·∫£i
    fig.update_coloraxes(showscale=False)

    return fig


# V·∫Ω bi·ªÉu b·ªì piechart th·ªÉ hi·ªán ph√¢n ph·ªëi
# trong nh√≥m N ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn
@st.cache_data
def create_pie_chart(data: pd.DataFrame, metric: str) -> go.Figure:
    """ T·∫°o bi·ªÉu ƒë·ªì tr√≤n cho ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu """

    fig = px.pie(
        data,
        names='user.uniqueId',
        values=metric,
        color_discrete_sequence=px.colors.qualitative.Pastel,
        height=450,
    )
    # Set the pie chart lies on left side of the page
    # and the legend lies on right side of the page
    fig.update_layout(
        legend=dict(
            orientation="h",
            xanchor="center",
            yanchor="bottom",
            y=1.02,
            x=0.5,
            font=dict(size=12, color=DARK_GRAY),
        ),
    )
    fig.update_traces(textinfo='percent+label',
                      pull=[0.1] + [0]*(len(data)-1))
    fig.update_layout(
        template="plotly_white",
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)",
        # Move chart to the bottom of the page
        margin=dict(t=80, b=0, l=0, r=0),
    )

    return fig


# ================================================================
# *_______________________ [Basic setup] ________________________*
# ================================================================
# C·∫•u h√¨nh Streamlit
st.set_page_config(
    page_title="Top User Analysis",
    page_icon="üìä",
    layout="wide",
)
# Ti√™u ƒë·ªÅ trang
st.markdown(
    '<div class="main-title" style="font-size: 48px; font-weight: bold; color: #1E90FF;">üèÜ Ph√¢n t√≠ch nh·ªØng ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu</div>',
    unsafe_allow_html=True
)
st.write("Kh√°m ph√° nh·ªØng ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông h√†ng ƒë·∫ßu d·ª±a tr√™n c√°c ch·ªâ s·ªë t∆∞∆°ng t√°c nh∆∞ l∆∞·ª£t th√≠ch v√† s·ªë l∆∞·ª£ng video.")
st.divider()


# ================================================================
# *_______________ [Read data and set up styles] ________________*
# ================================================================
# T·∫£i d·ªØ li·ªáu ƒë√£ l∆∞u tr·ªØ
df = load_user_data()


# ================================================================
# *___________________ [Data transformation] ____________________*
# ================================================================
# T√≠nh t·ª∑ l·ªá t∆∞∆°ng t√°c
df = calculate_engagement_ratio(df)


# ================================================================
# *_________________ [UI for selecting filters] _________________*
# ================================================================
st.header("Ch·ªçn b·ªô l·ªçc ƒë·ªÉ ph√¢n t√≠ch")
st.write("Ch·ªçn s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu v√† lo·∫°i bi·ªÉu ƒë·ªì ƒë·ªÉ ph√¢n t√≠ch.")

# T·∫°o 3 c·ªôt ƒë·ªÉ ch·ªçn c√°c b·ªô l·ªçc
filter_col1, filter_col2, filter_col3 = st.columns(
    spec=[4, 4, 2], gap="medium", border=True)
with filter_col1:
    top_n = st.slider(
        label="Ch·ªçn s·ªë l∆∞·ª£ng $N$ ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu",
        min_value=1, max_value=50, value=10, step=1,
        help="Ch·ªçn s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu ƒë·ªÉ ph√¢n t√≠ch."
    )
with filter_col2:
    chart_option = st.selectbox(
        label="Ch·ªçn lo·∫°i ch·ªâ s·ªë",
        options=list(CHART_OPTIONS.keys())
    )
with filter_col3:
    sort_order = st.radio(
        label="Th·ª© t·ª± s·∫Øp x·∫øp",
        options=["Gi·∫£m d·∫ßn", "TƒÉng d·∫ßn"],
        index=0
    )


# ================================================================
# *________________ [Filter and visualize data] _________________*
# ================================================================
# L·ªçc d·ªØ li·ªáu theo c√°c b·ªô l·ªçc ƒë√£ ch·ªçn
metric, color_scale, y_label = CHART_OPTIONS[chart_option]
top_data = filter_top_n_users(df=df, metric=metric,
                              n=top_n, sort_order=sort_order)

# T·∫°o 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
barchart_col, piechart_col = st.columns(
    spec=[5, 5], gap="small", vertical_alignment="top", border=True)
with barchart_col:
    # T·∫°o ti√™u ƒë·ªÅ cho bi·ªÉu ƒë·ªì
    sort_order_label: str = "cao nh·∫•t" if sort_order == "Gi·∫£m d·∫ßn" else "th·∫•p nh·∫•t"
    barchart_title: str = f"Top {top_n} ng∆∞·ªùi d√πng v·ªõi {chart_option} {sort_order_label}"
    st.subheader(barchart_title)

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
    bar_fig = create_bar_chart(
        data=top_data, metric=metric,
        color_scale=color_scale, y_label=y_label,
    )
    st.plotly_chart(bar_fig, use_container_width=True)
with piechart_col:
    # T·∫°o ti√™u ƒë·ªÅ cho bi·ªÉu ƒë·ªì
    piechart_title: str = f"Ph√¢n ph·ªëi c·ªßa {chart_option} trong top {top_n} ng∆∞·ªùi d√πng t∆∞∆°ng ·ª©ng"
    st.subheader(piechart_title)

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n
    pie_fig = create_pie_chart(data=top_data, metric=metric)
    st.plotly_chart(pie_fig, use_container_width=True)


# D√πng AI ƒë·ªÉ r√∫t ra insights t·ª´ bi·ªÉu ƒë·ªì
correlation_analysis_prompt = f"""
H√£y gi√∫p t√¥i vi·∫øt 1 ƒëo·∫°n nh·∫≠n x√©t v·ªÅ ph√¢n b·ªë c·ªßa {barchart_title} v√† {piechart_title}. ƒêo·∫°n nh·∫≠n x√©t n√†y n√™n ng·∫Øn g·ªçn, x√∫c t√≠ch, t·∫≠p trung v√†o nh·ªØng ƒëi·ªÉm n·ªïi b·∫≠t t·ª´ ph√¢n ph·ªëi quan s√°t ƒë∆∞·ª£c. ƒêo·∫°n vƒÉn ch·ªâ n√™n c√≥ kho·∫£ng 350 ƒë·∫øn 500 t·ª´.

T√¥i s·∫Ω cung c·∫•p cho b·∫°n 3 th√¥ng tin v·ªÅ d·ªØ li·ªáu m√† t√¥i ƒë√£ ph√¢n t√≠ch.
ƒê·∫ßu ti√™n l√† m·ªôt bi·ªÉu ƒë·ªì c·ªôt th·ªÉ hi·ªán gi√° tr·ªã {chart_option} c·ªßa {top_n} ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn. M√†u s·∫Øc c·ªßa c·ªôt c√†ng ƒë·∫≠m th√¨ gi√° tr·ªã {chart_option} c√†ng cao. Bi·ªÉu ƒë·ªì n√†y s·∫Ω ƒë∆∞·ª£c ƒë√≠nh k√®m d∆∞·ªõi d·∫°ng byte:
{bar_fig.to_image()}

Th·ª© hai l√† m·ªôt bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán ph√¢n ph·ªëi c·ªßa {chart_option} trong nh√≥m {top_n} ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn. M√†u s·∫Øc c·ªßa c√°c ph·∫ßn trong bi·ªÉu ƒë·ªì tr√≤n t∆∞∆°ng ·ª©ng v·ªõi c√°c ng∆∞·ªùi d√πng kh√°c nhau. Bi·ªÉu ƒë·ªì c≈©ng cho bi·∫øt t·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa m·ªói ng∆∞·ªùi d√πng trong t·ªïng s·ªë {top_n} ng∆∞·ªùi d√πng. Bi·ªÉu ƒë·ªì n√†y s·∫Ω ƒë∆∞·ª£c ƒë√≠nh k√®m d∆∞·ªõi d·∫°ng byte:
{pie_fig.to_image()}

Th·ª© ba l√† b·∫£ng th·ªëng k√™ ch·ª©a gi√° tr·ªã {chart_option} c·ªßa {top_n} ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn. D∆∞·ªõi ƒë√¢y l√† b·∫£ng th·ªëng k√™ th·ªÉ hi·ªán c√°c th√¥ng tin n√†y d∆∞·ªõi d·∫°ng LaTeX:
{top_data[["user.uniqueId", metric]].to_latex()}

ƒê·ª´ng b·∫Øt ƒë·∫ßu c√¢u tr·∫£ l·ªùi b·∫±ng c√°c c·ª•m t·ª´ nh∆∞: "D·ª±a tr√™n ..." m√† h√£y tr·ª±c ti·∫øp ƒëi v√†o n·ªôi dung nh·∫≠n x√©t. ƒê·ª´ng d√πng c√°c c·ª•m t·ª´ nh∆∞: "B·∫£ng d·ªØ li·ªáu", "B·∫£ng LaTeX", ...
"""
# print(top_data[["user.uniqueId", metric]])
display_AI_generated_insights(
    prompt=correlation_analysis_prompt,
    api_key="AIzaSyCAnhUoYz6YAYCSfSFF-JmGNbMdxzhDKYU")


# D·ªØ li·ªáu chi ti·∫øt
with st.expander(label=":blue[**Xem d·ªØ li·ªáu chi ti·∫øt**]", expanded=False):
    st.dataframe(
        top_data.style.format(
            {metric: "{:,.2f}" if metric == 'engagement_rate' else "{:,}"}),
        use_container_width=True
    )


# ================================================================
# *______________________ [Download data] _______________________*
# ================================================================
st.divider()
st.header("T·∫£i d·ªØ li·ªáu")

st.write("T·∫£i d·ªØ li·ªáu ƒë√£ ph√¢n t√≠ch d∆∞·ªõi d·∫°ng t·ªáp CSV ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y.")
# T√πy ch·ªçn t·∫£i xu·ªëng
csv = top_data.to_csv(index=False)
st.download_button(
    label="**üì• T·∫£i d·ªØ li·ªáu d∆∞·ªõi d·∫°ng CSV**",
    data=csv,
    file_name=f"top_{top_n}_{chart_option.lower().replace(' ', '_')}_{sort_order.lower()}.csv",
    mime="text/plain",
    help="Nh·∫•p v√†o ƒë√¢y ƒë·ªÉ t·∫£i d·ªØ li·ªáu ƒë√£ ph√¢n t√≠ch d∆∞·ªõi d·∫°ng t·ªáp CSV.",
    on_click="ignore",
    type="primary",
)
