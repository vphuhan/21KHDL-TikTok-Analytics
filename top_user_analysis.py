import streamlit as st
import plotly.express as px
import pandas as pd
from user_analysis.utils.footer import display_footer


# H·∫±ng s·ªë
DATA_PATH = "data/interim/cleaned_user_info.csv"
CHART_OPTIONS = {
    "Nhi·ªÅu l∆∞·ª£t th√≠ch nh·∫•t": ("stats.heart", "reds", "T·ªïng s·ªë l∆∞·ª£t th√≠ch (Tr√°i tim)"),
    "Nhi·ªÅu video nh·∫•t": ("stats.videoCount", "greens", "T·ªïng s·ªë video"),
    "Nhi·ªÅu ng∆∞·ªùi theo d√µi nh·∫•t": ("stats.followerCount", "blues", "T·ªïng s·ªë ng∆∞·ªùi theo d√µi"),
    "T·ª∑ l·ªá t∆∞∆°ng t√°c": ("engagement_rate", "purples", "T·ª∑ l·ªá t∆∞∆°ng t√°c")
}


# T·∫£i d·ªØ li·ªáu
@st.cache_data
def load_data():
    """T·∫£i v√† l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch t·ª´ t·ªáp CSV"""
    return pd.read_csv(DATA_PATH)


# H√†m tr·ª±c quan h√≥a
def create_bar_chart(data, metric, title, color_scale, y_label):
    """T·∫°o bi·ªÉu ƒë·ªì c·ªôt cho ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu"""
    fig = px.bar(
        data,
        x='user.uniqueId',
        y=metric,
        color=metric,
        color_continuous_scale=color_scale,
        text=data[metric].apply(
            lambda x: f'{x:,.1f}' if metric == 'engagement_rate' else f'{x:,}'),
        height=500
    )
    fig.update_traces(textposition='outside', textfont_size=12)
    fig.update_layout(
        xaxis_title="ID Ng∆∞·ªùi d√πng",
        yaxis_title=y_label,
        template="plotly_white",
        xaxis_tickangle=-45,
        showlegend=False,
        margin=dict(t=50, b=50),
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)"
    )
    return fig


def create_pie_chart(data, metric, chart_option):
    """T·∫°o bi·ªÉu ƒë·ªì tr√≤n cho ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu"""
    fig = px.pie(
        data,
        names='user.uniqueId',
        values=metric,
        color_discrete_sequence=px.colors.sequential.RdBu,
        height=500
    )
    fig.update_traces(textinfo='percent+label', pull=[0.1] + [0]*(len(data)-1))
    fig.update_layout(
        template="plotly_white",
        margin=dict(t=50, b=50),
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)"
    )
    return fig


def top_users(df):
    """Ph√¢n t√≠ch v√† tr·ª±c quan h√≥a ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông h√†ng ƒë·∫ßu"""
    # Ti√™u ƒë·ªÅ trang
    st.markdown(
        '<div class="main-title" style="font-size: 28px; font-weight: bold; color: #1E90FF;">üèÜ Ph√¢n t√≠ch ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu</div>',
        unsafe_allow_html=True
    )
    st.markdown(
        '<p style="color: #666;">Kh√°m ph√° nh·ªØng ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông h√†ng ƒë·∫ßu d·ª±a tr√™n c√°c ch·ªâ s·ªë t∆∞∆°ng t√°c nh∆∞ l∆∞·ª£t th√≠ch v√† s·ªë l∆∞·ª£ng video.</p>',
        unsafe_allow_html=True
    )

    # Giao di·ªán ng∆∞·ªùi d√πng
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        top_n = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng N ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu", 1, 50, 10, 1)
    with col2:
        chart_option = st.selectbox(
            "Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì", list(CHART_OPTIONS.keys()))
    with col3:
        sort_order = st.radio(
            "Th·ª© t·ª± s·∫Øp x·∫øp", ["Gi·∫£m d·∫ßn", "TƒÉng d·∫ßn"], index=0)

    # X·ª≠ l√Ω d·ªØ li·ªáu
    if chart_option == "T·ª∑ l·ªá t∆∞∆°ng t√°c":
        df['engagement_rate'] = df['stats.heart'] / \
            df['stats.videoCount'].replace(0, 1)

    metric, color_scale, y_label = CHART_OPTIONS[chart_option]
    title = f"Top {top_n} ng∆∞·ªùi d√πng v·ªõi {chart_option}"
    top_data = (df.nlargest(top_n, metric) if sort_order == "Gi·∫£m d·∫ßn"
                else df.nsmallest(top_n, metric))[['user.uniqueId', metric]]

    # Tr·ª±c quan h√≥a
    tab_bar, tab_pie = st.tabs(["Bi·ªÉu ƒë·ªì c·ªôt", "Bi·ªÉu ƒë·ªì tr√≤n"])
    with st.spinner(f"ƒêang t·∫°o h√¨nh ·∫£nh cho Top {top_n} ng∆∞·ªùi d√πng..."):
        with tab_bar:
            st.markdown(
                f'<div class="subheader" style="color: #333; font-weight: bold;">{title}</div>',
                unsafe_allow_html=True
            )
            bar_fig = create_bar_chart(
                top_data, metric, title, color_scale, y_label)
            st.plotly_chart(bar_fig, use_container_width=True)

        with tab_pie:
            st.markdown(
                f'<div class="subheader" style="color: #333; font-weight: bold;">Ph√¢n ph·ªëi c·ªßa {chart_option}</div>',
                unsafe_allow_html=True
            )
            pie_fig = create_pie_chart(top_data, metric, chart_option)
            st.plotly_chart(pie_fig, use_container_width=True)

    # D·ªØ li·ªáu chi ti·∫øt
    with st.expander("Xem d·ªØ li·ªáu chi ti·∫øt", expanded=False):
        st.dataframe(
            top_data.style.format(
                {metric: "{:,.2f}" if metric == 'engagement_rate' else "{:,}"}),
            use_container_width=True
        )

    # T√πy ch·ªçn t·∫£i xu·ªëng
    csv = top_data.to_csv(index=False)
    st.download_button(
        label="üì• T·∫£i d·ªØ li·ªáu d∆∞·ªõi d·∫°ng CSV",
        data=csv,
        file_name=f"top_{top_n}_{chart_option.lower().replace(' ', '_')}_{sort_order.lower()}.csv",
        mime="text/csv"
    )


"""H√†m ·ª©ng d·ª•ng ch√≠nh"""
df = load_data()
st.session_state['cleaned_user_info_df'] = df
if not df.empty:
    top_users(df)
    display_footer()
else:
    st.warning(
        "Vui l√≤ng t·∫£i l√™n ho·∫∑c cung c·∫•p d·ªØ li·ªáu ng∆∞·ªùi d√πng h·ª£p l·ªá ƒë·ªÉ ph√¢n t√≠ch.")
